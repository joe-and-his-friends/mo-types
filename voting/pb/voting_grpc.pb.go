// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: voting/voting.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VotingClient is the client API for Voting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotingClient interface {
	GetContest(ctx context.Context, in *GetContestRequest, opts ...grpc.CallOption) (*GetContestResponse, error)
	PostContest(ctx context.Context, in *PostContestRequest, opts ...grpc.CallOption) (*PostContestResponse, error)
	PutContest(ctx context.Context, in *PutContestRequest, opts ...grpc.CallOption) (*PutContestResponse, error)
	DeleteContest(ctx context.Context, in *DeleteContestRequest, opts ...grpc.CallOption) (*DeleteContestResponse, error)
	GetContests(ctx context.Context, in *GetContestsRequest, opts ...grpc.CallOption) (*GetContestsResponse, error)
	GetActiveContest(ctx context.Context, in *GetActiveContestRequest, opts ...grpc.CallOption) (*GetActiveContestResponse, error)
	PostContestCandidate(ctx context.Context, in *PostContestCandidateRequest, opts ...grpc.CallOption) (*PostContestCandidateResponse, error)
	GetContestCandidates(ctx context.Context, in *GetContestCandidatesRequest, opts ...grpc.CallOption) (*GetContestCandidatesResponse, error)
	GetContestCandidatesByVoterUserId(ctx context.Context, in *GetContestCandidatesByVoterUserIdRequest, opts ...grpc.CallOption) (*GetContestCandidatesByVoterUserIdResponse, error)
	GetVoterUserProfilesByCandidateId(ctx context.Context, in *GetVoterUserProfilesByCandidateIdRequest, opts ...grpc.CallOption) (*GetVoterUserProfilesByCandidateIdResponse, error)
	GetContestCandidate(ctx context.Context, in *GetContestCandidateRequest, opts ...grpc.CallOption) (*GetContestCandidateResponse, error)
	PutContestCandidate(ctx context.Context, in *PutContestCandidateRequest, opts ...grpc.CallOption) (*PutContestCandidateResponse, error)
	PutContestCandidateEnrollment(ctx context.Context, in *PutContestCandidateEnrollmentRequest, opts ...grpc.CallOption) (*PutContestCandidateEnrollmentResponse, error)
	PutContestCandidateExtraNumberOfVotes(ctx context.Context, in *PutContestCandidateExtraNumberOfVotesRequest, opts ...grpc.CallOption) (*PutContestCandidateExtraNumberOfVotesResponse, error)
	DeleteContestCandidate(ctx context.Context, in *DeleteContestCandidateRequest, opts ...grpc.CallOption) (*DeleteContestCandidateResponse, error)
	PostVote(ctx context.Context, in *PostVoteRequest, opts ...grpc.CallOption) (*PostVoteResponse, error)
	GetVotes(ctx context.Context, in *GetVotesRequest, opts ...grpc.CallOption) (*GetVotesResponse, error)
	DeleteVote(ctx context.Context, in *DeleteVoteRequest, opts ...grpc.CallOption) (*DeleteVoteResponse, error)
}

type votingClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingClient(cc grpc.ClientConnInterface) VotingClient {
	return &votingClient{cc}
}

func (c *votingClient) GetContest(ctx context.Context, in *GetContestRequest, opts ...grpc.CallOption) (*GetContestResponse, error) {
	out := new(GetContestResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/GetContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) PostContest(ctx context.Context, in *PostContestRequest, opts ...grpc.CallOption) (*PostContestResponse, error) {
	out := new(PostContestResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/PostContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) PutContest(ctx context.Context, in *PutContestRequest, opts ...grpc.CallOption) (*PutContestResponse, error) {
	out := new(PutContestResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/PutContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) DeleteContest(ctx context.Context, in *DeleteContestRequest, opts ...grpc.CallOption) (*DeleteContestResponse, error) {
	out := new(DeleteContestResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/DeleteContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) GetContests(ctx context.Context, in *GetContestsRequest, opts ...grpc.CallOption) (*GetContestsResponse, error) {
	out := new(GetContestsResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/GetContests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) GetActiveContest(ctx context.Context, in *GetActiveContestRequest, opts ...grpc.CallOption) (*GetActiveContestResponse, error) {
	out := new(GetActiveContestResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/GetActiveContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) PostContestCandidate(ctx context.Context, in *PostContestCandidateRequest, opts ...grpc.CallOption) (*PostContestCandidateResponse, error) {
	out := new(PostContestCandidateResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/PostContestCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) GetContestCandidates(ctx context.Context, in *GetContestCandidatesRequest, opts ...grpc.CallOption) (*GetContestCandidatesResponse, error) {
	out := new(GetContestCandidatesResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/GetContestCandidates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) GetContestCandidatesByVoterUserId(ctx context.Context, in *GetContestCandidatesByVoterUserIdRequest, opts ...grpc.CallOption) (*GetContestCandidatesByVoterUserIdResponse, error) {
	out := new(GetContestCandidatesByVoterUserIdResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/GetContestCandidatesByVoterUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) GetVoterUserProfilesByCandidateId(ctx context.Context, in *GetVoterUserProfilesByCandidateIdRequest, opts ...grpc.CallOption) (*GetVoterUserProfilesByCandidateIdResponse, error) {
	out := new(GetVoterUserProfilesByCandidateIdResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/GetVoterUserProfilesByCandidateId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) GetContestCandidate(ctx context.Context, in *GetContestCandidateRequest, opts ...grpc.CallOption) (*GetContestCandidateResponse, error) {
	out := new(GetContestCandidateResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/GetContestCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) PutContestCandidate(ctx context.Context, in *PutContestCandidateRequest, opts ...grpc.CallOption) (*PutContestCandidateResponse, error) {
	out := new(PutContestCandidateResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/PutContestCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) PutContestCandidateEnrollment(ctx context.Context, in *PutContestCandidateEnrollmentRequest, opts ...grpc.CallOption) (*PutContestCandidateEnrollmentResponse, error) {
	out := new(PutContestCandidateEnrollmentResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/PutContestCandidateEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) PutContestCandidateExtraNumberOfVotes(ctx context.Context, in *PutContestCandidateExtraNumberOfVotesRequest, opts ...grpc.CallOption) (*PutContestCandidateExtraNumberOfVotesResponse, error) {
	out := new(PutContestCandidateExtraNumberOfVotesResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/PutContestCandidateExtraNumberOfVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) DeleteContestCandidate(ctx context.Context, in *DeleteContestCandidateRequest, opts ...grpc.CallOption) (*DeleteContestCandidateResponse, error) {
	out := new(DeleteContestCandidateResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/DeleteContestCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) PostVote(ctx context.Context, in *PostVoteRequest, opts ...grpc.CallOption) (*PostVoteResponse, error) {
	out := new(PostVoteResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/PostVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) GetVotes(ctx context.Context, in *GetVotesRequest, opts ...grpc.CallOption) (*GetVotesResponse, error) {
	out := new(GetVotesResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/GetVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingClient) DeleteVote(ctx context.Context, in *DeleteVoteRequest, opts ...grpc.CallOption) (*DeleteVoteResponse, error) {
	out := new(DeleteVoteResponse)
	err := c.cc.Invoke(ctx, "/voting.Voting/DeleteVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotingServer is the server API for Voting service.
// All implementations must embed UnimplementedVotingServer
// for forward compatibility
type VotingServer interface {
	GetContest(context.Context, *GetContestRequest) (*GetContestResponse, error)
	PostContest(context.Context, *PostContestRequest) (*PostContestResponse, error)
	PutContest(context.Context, *PutContestRequest) (*PutContestResponse, error)
	DeleteContest(context.Context, *DeleteContestRequest) (*DeleteContestResponse, error)
	GetContests(context.Context, *GetContestsRequest) (*GetContestsResponse, error)
	GetActiveContest(context.Context, *GetActiveContestRequest) (*GetActiveContestResponse, error)
	PostContestCandidate(context.Context, *PostContestCandidateRequest) (*PostContestCandidateResponse, error)
	GetContestCandidates(context.Context, *GetContestCandidatesRequest) (*GetContestCandidatesResponse, error)
	GetContestCandidatesByVoterUserId(context.Context, *GetContestCandidatesByVoterUserIdRequest) (*GetContestCandidatesByVoterUserIdResponse, error)
	GetVoterUserProfilesByCandidateId(context.Context, *GetVoterUserProfilesByCandidateIdRequest) (*GetVoterUserProfilesByCandidateIdResponse, error)
	GetContestCandidate(context.Context, *GetContestCandidateRequest) (*GetContestCandidateResponse, error)
	PutContestCandidate(context.Context, *PutContestCandidateRequest) (*PutContestCandidateResponse, error)
	PutContestCandidateEnrollment(context.Context, *PutContestCandidateEnrollmentRequest) (*PutContestCandidateEnrollmentResponse, error)
	PutContestCandidateExtraNumberOfVotes(context.Context, *PutContestCandidateExtraNumberOfVotesRequest) (*PutContestCandidateExtraNumberOfVotesResponse, error)
	DeleteContestCandidate(context.Context, *DeleteContestCandidateRequest) (*DeleteContestCandidateResponse, error)
	PostVote(context.Context, *PostVoteRequest) (*PostVoteResponse, error)
	GetVotes(context.Context, *GetVotesRequest) (*GetVotesResponse, error)
	DeleteVote(context.Context, *DeleteVoteRequest) (*DeleteVoteResponse, error)
	mustEmbedUnimplementedVotingServer()
}

// UnimplementedVotingServer must be embedded to have forward compatible implementations.
type UnimplementedVotingServer struct {
}

func (UnimplementedVotingServer) GetContest(context.Context, *GetContestRequest) (*GetContestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContest not implemented")
}
func (UnimplementedVotingServer) PostContest(context.Context, *PostContestRequest) (*PostContestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostContest not implemented")
}
func (UnimplementedVotingServer) PutContest(context.Context, *PutContestRequest) (*PutContestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutContest not implemented")
}
func (UnimplementedVotingServer) DeleteContest(context.Context, *DeleteContestRequest) (*DeleteContestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContest not implemented")
}
func (UnimplementedVotingServer) GetContests(context.Context, *GetContestsRequest) (*GetContestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContests not implemented")
}
func (UnimplementedVotingServer) GetActiveContest(context.Context, *GetActiveContestRequest) (*GetActiveContestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveContest not implemented")
}
func (UnimplementedVotingServer) PostContestCandidate(context.Context, *PostContestCandidateRequest) (*PostContestCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostContestCandidate not implemented")
}
func (UnimplementedVotingServer) GetContestCandidates(context.Context, *GetContestCandidatesRequest) (*GetContestCandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestCandidates not implemented")
}
func (UnimplementedVotingServer) GetContestCandidatesByVoterUserId(context.Context, *GetContestCandidatesByVoterUserIdRequest) (*GetContestCandidatesByVoterUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestCandidatesByVoterUserId not implemented")
}
func (UnimplementedVotingServer) GetVoterUserProfilesByCandidateId(context.Context, *GetVoterUserProfilesByCandidateIdRequest) (*GetVoterUserProfilesByCandidateIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoterUserProfilesByCandidateId not implemented")
}
func (UnimplementedVotingServer) GetContestCandidate(context.Context, *GetContestCandidateRequest) (*GetContestCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestCandidate not implemented")
}
func (UnimplementedVotingServer) PutContestCandidate(context.Context, *PutContestCandidateRequest) (*PutContestCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutContestCandidate not implemented")
}
func (UnimplementedVotingServer) PutContestCandidateEnrollment(context.Context, *PutContestCandidateEnrollmentRequest) (*PutContestCandidateEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutContestCandidateEnrollment not implemented")
}
func (UnimplementedVotingServer) PutContestCandidateExtraNumberOfVotes(context.Context, *PutContestCandidateExtraNumberOfVotesRequest) (*PutContestCandidateExtraNumberOfVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutContestCandidateExtraNumberOfVotes not implemented")
}
func (UnimplementedVotingServer) DeleteContestCandidate(context.Context, *DeleteContestCandidateRequest) (*DeleteContestCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContestCandidate not implemented")
}
func (UnimplementedVotingServer) PostVote(context.Context, *PostVoteRequest) (*PostVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostVote not implemented")
}
func (UnimplementedVotingServer) GetVotes(context.Context, *GetVotesRequest) (*GetVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVotes not implemented")
}
func (UnimplementedVotingServer) DeleteVote(context.Context, *DeleteVoteRequest) (*DeleteVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVote not implemented")
}
func (UnimplementedVotingServer) mustEmbedUnimplementedVotingServer() {}

// UnsafeVotingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotingServer will
// result in compilation errors.
type UnsafeVotingServer interface {
	mustEmbedUnimplementedVotingServer()
}

func RegisterVotingServer(s grpc.ServiceRegistrar, srv VotingServer) {
	s.RegisterService(&Voting_ServiceDesc, srv)
}

func _Voting_GetContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).GetContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/GetContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).GetContest(ctx, req.(*GetContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_PostContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).PostContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/PostContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).PostContest(ctx, req.(*PostContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_PutContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).PutContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/PutContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).PutContest(ctx, req.(*PutContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_DeleteContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).DeleteContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/DeleteContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).DeleteContest(ctx, req.(*DeleteContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_GetContests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).GetContests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/GetContests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).GetContests(ctx, req.(*GetContestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_GetActiveContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).GetActiveContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/GetActiveContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).GetActiveContest(ctx, req.(*GetActiveContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_PostContestCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostContestCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).PostContestCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/PostContestCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).PostContestCandidate(ctx, req.(*PostContestCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_GetContestCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestCandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).GetContestCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/GetContestCandidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).GetContestCandidates(ctx, req.(*GetContestCandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_GetContestCandidatesByVoterUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestCandidatesByVoterUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).GetContestCandidatesByVoterUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/GetContestCandidatesByVoterUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).GetContestCandidatesByVoterUserId(ctx, req.(*GetContestCandidatesByVoterUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_GetVoterUserProfilesByCandidateId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoterUserProfilesByCandidateIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).GetVoterUserProfilesByCandidateId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/GetVoterUserProfilesByCandidateId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).GetVoterUserProfilesByCandidateId(ctx, req.(*GetVoterUserProfilesByCandidateIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_GetContestCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).GetContestCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/GetContestCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).GetContestCandidate(ctx, req.(*GetContestCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_PutContestCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutContestCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).PutContestCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/PutContestCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).PutContestCandidate(ctx, req.(*PutContestCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_PutContestCandidateEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutContestCandidateEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).PutContestCandidateEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/PutContestCandidateEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).PutContestCandidateEnrollment(ctx, req.(*PutContestCandidateEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_PutContestCandidateExtraNumberOfVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutContestCandidateExtraNumberOfVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).PutContestCandidateExtraNumberOfVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/PutContestCandidateExtraNumberOfVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).PutContestCandidateExtraNumberOfVotes(ctx, req.(*PutContestCandidateExtraNumberOfVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_DeleteContestCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContestCandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).DeleteContestCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/DeleteContestCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).DeleteContestCandidate(ctx, req.(*DeleteContestCandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_PostVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).PostVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/PostVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).PostVote(ctx, req.(*PostVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_GetVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).GetVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/GetVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).GetVotes(ctx, req.(*GetVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voting_DeleteVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServer).DeleteVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.Voting/DeleteVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServer).DeleteVote(ctx, req.(*DeleteVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Voting_ServiceDesc is the grpc.ServiceDesc for Voting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Voting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voting.Voting",
	HandlerType: (*VotingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContest",
			Handler:    _Voting_GetContest_Handler,
		},
		{
			MethodName: "PostContest",
			Handler:    _Voting_PostContest_Handler,
		},
		{
			MethodName: "PutContest",
			Handler:    _Voting_PutContest_Handler,
		},
		{
			MethodName: "DeleteContest",
			Handler:    _Voting_DeleteContest_Handler,
		},
		{
			MethodName: "GetContests",
			Handler:    _Voting_GetContests_Handler,
		},
		{
			MethodName: "GetActiveContest",
			Handler:    _Voting_GetActiveContest_Handler,
		},
		{
			MethodName: "PostContestCandidate",
			Handler:    _Voting_PostContestCandidate_Handler,
		},
		{
			MethodName: "GetContestCandidates",
			Handler:    _Voting_GetContestCandidates_Handler,
		},
		{
			MethodName: "GetContestCandidatesByVoterUserId",
			Handler:    _Voting_GetContestCandidatesByVoterUserId_Handler,
		},
		{
			MethodName: "GetVoterUserProfilesByCandidateId",
			Handler:    _Voting_GetVoterUserProfilesByCandidateId_Handler,
		},
		{
			MethodName: "GetContestCandidate",
			Handler:    _Voting_GetContestCandidate_Handler,
		},
		{
			MethodName: "PutContestCandidate",
			Handler:    _Voting_PutContestCandidate_Handler,
		},
		{
			MethodName: "PutContestCandidateEnrollment",
			Handler:    _Voting_PutContestCandidateEnrollment_Handler,
		},
		{
			MethodName: "PutContestCandidateExtraNumberOfVotes",
			Handler:    _Voting_PutContestCandidateExtraNumberOfVotes_Handler,
		},
		{
			MethodName: "DeleteContestCandidate",
			Handler:    _Voting_DeleteContestCandidate_Handler,
		},
		{
			MethodName: "PostVote",
			Handler:    _Voting_PostVote_Handler,
		},
		{
			MethodName: "GetVotes",
			Handler:    _Voting_GetVotes_Handler,
		},
		{
			MethodName: "DeleteVote",
			Handler:    _Voting_DeleteVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "voting/voting.proto",
}
