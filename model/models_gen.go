// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

type AdoptionAdQueryResult interface {
	IsAdoptionAdQueryResult()
}

type AdoptionAdsQueryResult interface {
	IsAdoptionAdsQueryResult()
}

type AdoptionAgenciesQueryResult interface {
	IsAdoptionAgenciesQueryResult()
}

type AdoptionAgencyQueryResult interface {
	IsAdoptionAgencyQueryResult()
}

type BannersQueryResult interface {
	IsBannersQueryResult()
}

type CheckInCounterQueryResult interface {
	IsCheckInCounterQueryResult()
}

type CheckInCountersQueryResult interface {
	IsCheckInCountersQueryResult()
}

type CheckInRecordQueryResult interface {
	IsCheckInRecordQueryResult()
}

type EventsQueryResult interface {
	IsEventsQueryResult()
}

type JobsResult interface {
	IsJobsResult()
}

type LoginUserResult interface {
	IsLoginUserResult()
}

type PetProfilesQueryResult interface {
	IsPetProfilesQueryResult()
}

type PointTransactionsQueryResult interface {
	IsPointTransactionsQueryResult()
}

type RefreshAccessTokenResult interface {
	IsRefreshAccessTokenResult()
}

type RetailersQueryResult interface {
	IsRetailersQueryResult()
}

type TransactionDetails interface {
	IsTransactionDetails()
}

type UserProfileQueryResult interface {
	IsUserProfileQueryResult()
}

type UserProfilesQueryResult interface {
	IsUserProfilesQueryResult()
}

type VoucherOwnershipQueryResult interface {
	IsVoucherOwnershipQueryResult()
}

type VoucherQueryResult interface {
	IsVoucherQueryResult()
}

type VouchersQueryResult interface {
	IsVouchersQueryResult()
}

type ActiveContest struct {
	Contest *Contest `json:"contest"`
}

type AdoptionActivity struct {
	Details   string   `json:"details"`
	PhotoUrls []string `json:"photoUrls"`
}

type AdoptionActivityInput struct {
	Details   string   `json:"details"`
	PhotoUrls []string `json:"photoUrls"`
}

type AdoptionAd struct {
	ID        primitive.ObjectID `json:"id" bson:"_id"`
	AgencyID  primitive.ObjectID `json:"agencyId"`
	PetName   string             `json:"petName"`
	Sex       Sex                `json:"sex"`
	PetAge    string             `json:"petAge"`
	Breed     *SelectionOption   `json:"breed"`
	PhotoUrls []string           `json:"photoUrls"`
	Remarks   string             `json:"remarks"`
	CreatedAt primitive.DateTime `json:"createdAt"`
	UpdatedAt primitive.DateTime `json:"updatedAt"`
	Hidden    bool               `json:"hidden"`
	Adopted   bool               `json:"adopted"`
}

func (AdoptionAd) IsAdoptionAdQueryResult() {}

type AdoptionAds struct {
	TotalCount int           `json:"totalCount"`
	Items      []*AdoptionAd `json:"items"`
}

func (AdoptionAds) IsAdoptionAdsQueryResult() {}

type AdoptionAdsInput struct {
	AgencyID primitive.ObjectID    `json:"agencyId"`
	Breed    *SelectionOptionInput `json:"breed"`
}

type AdoptionAgencies struct {
	TotalCount int               `json:"totalCount"`
	Items      []*AdoptionAgency `json:"items"`
}

func (AdoptionAgencies) IsAdoptionAgenciesQueryResult() {}

type AdoptionAgenciesInput struct {
	PageNumber           int                   `json:"pageNumber"`
	PageSize             int                   `json:"pageSize"`
	DatetimeFilter       *DatetimeFilter       `json:"datetimeFilter"`
	TerritoriesFilter    *TerritoriesFilter    `json:"territoriesFilter"`
	RecommendationFilter *RecommendationFilter `json:"recommendationFilter"`
	ApprovalFilter       ApprovalFilter        `json:"approvalFilter"`
	UserID               primitive.ObjectID    `json:"userId"`
}

type AdoptionAgency struct {
	ID             primitive.ObjectID     `json:"id" bson:"_id"`
	UserID         primitive.ObjectID     `json:"userId"`
	Name           string                 `json:"name"`
	AvatarURL      string                 `json:"avatarUrl"`
	Phone          string                 `json:"phone"`
	Address        string                 `json:"address"`
	GeoLocation    *GeoLocation           `json:"geoLocation"`
	WebsiteURL     string                 `json:"websiteUrl"`
	PhotoUrls      []string               `json:"photoUrls"`
	Introduction   string                 `json:"introduction"`
	Activity       *AdoptionActivity      `json:"activity"`
	DonationMethod *DonationMethod        `json:"donationMethod"`
	CreatedAt      primitive.DateTime     `json:"createdAt"`
	UpdatedAt      primitive.DateTime     `json:"updatedAt"`
	Ads            AdoptionAdsQueryResult `json:"ads"`
	Approved       bool                   `json:"approved"`
}

func (AdoptionAgency) IsAdoptionAgencyQueryResult() {}

type AppVersionInfo struct {
	LatestReleasedVersion  string `json:"latestReleasedVersion"`
	LowestSupportedVersion string `json:"lowestSupportedVersion"`
	DetailsUrl             string `json:"detailsUrl"`
}

type Banner struct {
	ID            primitive.ObjectID `json:"id" bson:"_id"`
	Name          string             `json:"name"`
	ImageURL      string             `json:"imageUrl"`
	PopupImageURL string             `json:"popupImageUrl"`
	AppPage       AppPage            `json:"appPage"`
	PageParams    string             `json:"pageParams"`
	Visible       bool               `json:"visible"`
}

type Banners struct {
	TotalCount int       `json:"totalCount"`
	Items      []*Banner `json:"items"`
}

func (Banners) IsBannersQueryResult() {}

type BannersInput struct {
	Visible *bool `json:"visible"`
}

type BindPhoneOrEmailInput struct {
	PhoneOrEmail     string `json:"phoneOrEmail"`
	VerificationCode string `json:"verificationCode"`
}

type BlockMomentInput struct {
	BlockedUserId string `json:"blockedUserId"`
	Period        int    `json:"period"`
}

type BreedsFilter struct {
	Names []string `json:"names"`
}

type BreedsFilterInput struct {
	Names []string `json:"names"`
}

type CandidateFilter struct {
	EnrollmentStatus int    `json:"enrollment_status"`
	MatchingText     string `json:"matchingText"`
}

type CategoriesFilter struct {
	Categories []*CategoryFilter `json:"categories"`
}

type CategoryFilter struct {
	Option            *SelectionOptionInput   `json:"option"`
	AdditionalOptions []string                `json:"additionalOptions"`
	SubOptions        []*SelectionOptionInput `json:"subOptions"`
}

type CheckInCounter struct {
	ID                    primitive.ObjectID     `json:"id" bson:"_id"`
	ProductID             primitive.ObjectID     `json:"productId"`
	ProductName           string                 `json:"productName"`
	Name                  string                 `json:"name"`
	Greetings             string                 `json:"greetings"`
	QRCodeURL             string                 `json:"qrCodeUrl"`
	Points                int                    `json:"points"`
	CreatedAt             *primitive.DateTime    `json:"createdAt"`
	ValidTo               *primitive.DateTime    `json:"validTo"`
	ValidFrom             *primitive.DateTime    `json:"validFrom"`
	GeoLocationConstraint *GeoLocationConstraint `json:"geoLocationConstraint"`
	Record                *CheckInRecord         `json:"record"`
}

func (CheckInCounter) IsCheckInCounterQueryResult() {}

type CheckInCounters struct {
	TotalCount int               `json:"totalCount"`
	Items      []*CheckInCounter `json:"items"`
}

func (CheckInCounters) IsCheckInCountersQueryResult() {}

type CheckInCountersInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

type CheckInInput struct {
	CounterID   primitive.ObjectID `json:"counterId"`
	GeoLocation *GeoLocationInput  `json:"geoLocation"`
}

type CheckInRecord struct {
	ID          primitive.ObjectID  `json:"id" bson:"_id"`
	UserID      primitive.ObjectID  `json:"userId"`
	ProductID   primitive.ObjectID  `json:"productId"`
	CounterID   primitive.ObjectID  `json:"counterId"`
	GeoLocation *GeoLocation        `json:"geoLocation"`
	CreatedAt   *primitive.DateTime `json:"createdAt"`
}

func (CheckInRecord) IsCheckInRecordQueryResult() {}

type Comment struct {
	Id                     string                  `json:"id" bson:"_id"`
	PetId                  string                  `json:"petId"`
	UserId                 string                  `json:"userId"`
	RetailerUserId         string                  `json:"retailerUserId"`
	Title                  string                  `json:"title"`
	Details                string                  `json:"details"`
	PictureUrls            []string                `json:"pictureUrls"`
	Score                  int                     `json:"score"`
	Status                 int                     `json:"status"`
	Recommended            bool                    `json:"recommended"`
	DatetimeCreated        string                  `json:"datetimeCreated"`
	CommentatorCertificate *CommentatorCertificate `json:"commentatorCertificate"`
	RetailerProfile        *RetailerProfile        `json:"retailerProfile" bson:"retailerprofile"`
}

type CommentRecommendationFilter struct {
	Option int `json:"option"`
}

type CommentScoreFilter struct {
	Option int `json:"option"`
}

type CommentStatusFilter struct {
	Option int `json:"option"`
}

type CommentatorCertificate struct {
	Phone                string             `json:"phone"`
	Name                 string             `json:"name"`
	SnsPlatformName      string             `json:"snsPlatformName"`
	SnsPlatformSelection *SelectionOption   `json:"snsPlatformSelection"`
	AvatarUrl            string             `json:"avatarUrl"`
	Level                int                `json:"level"`
	Status               int                `json:"status"`
	DatetimeCreated      primitive.DateTime `json:"datetimeCreated"`
}

type CommentatorCertificateStatusFilter struct {
	Option int `json:"option"`
}

type CommentatorCertificates struct {
	Certificates []*CommentatorCertificate `json:"certificates"`
	TotalCount   int                       `json:"totalCount"`
}

type CommentatorCertificatesInput struct {
	PageNumber   int                                 `json:"pageNumber"`
	PageSize     int                                 `json:"pageSize"`
	StatusFilter *CommentatorCertificateStatusFilter `json:"statusFilter"`
}

type Comments struct {
	Comments   []*Comment `json:"comments"`
	TotalCount int        `json:"totalCount"`
}

type CommentsInput struct {
	PetId                   string                       `json:"petId"`
	UserId                  string                       `json:"userId"`
	RetailerUserId          string                       `json:"retailerUserId"`
	PageNumber              int                          `json:"pageNumber"`
	PageSize                int                          `json:"pageSize"`
	StatusFilter            *CommentStatusFilter         `json:"statusFilter"`
	ScoreFilter             *CommentScoreFilter          `json:"scoreFilter"`
	RecommendationFilter    *CommentRecommendationFilter `json:"recommendationFilter"`
	MatchingRetailerName    string                       `json:"matchingRetailerName"`
	MatchingCommentatorName string                       `json:"matchingCommentatorName"`
	DatesFilter             *DatesFilterInput            `json:"datesFilter"`
}

type Contest struct {
	Id        string `json:"id"`
	Name      string `json:"name"`
	StartDate string `json:"startDate"`
	EndDate   string `json:"endDate"`
	PosterUrl string `json:"posterUrl"`
	Active    bool   `json:"active"`
}

type ContestCandidate struct {
	Id                 string             `json:"id"`
	UserId             string             `json:"userId"`
	ContestId          string             `json:"contestId"`
	PetId              string             `json:"petId"`
	PetName            string             `json:"petName"`
	PetOwnerName       string             `json:"petOwnerName"`
	PetOwnerPhone      string             `json:"petOwnerPhone"`
	PetPhotoUrl        string             `json:"petPhotoUrl"`
	PetSnsUrl          string             `json:"petSnsUrl"`
	VotingResult       *VotingResult      `json:"votingResult"`
	Enrollment         *ContestEnrollment `json:"enrollment"`
	Sequence           int                `json:"sequence"`
	ExtraNumberOfVotes int                `json:"extraNumberOfVotes"`
	Position           int                `json:"position"`
}

type ContestCandidates struct {
	Candidates []*ContestCandidate `json:"candidates"`
}

type ContestEnrollment struct {
	Status int    `json:"status"`
	Msg    string `json:"msg"`
}

type ContestEnrollmentInput struct {
	Status int    `json:"status"`
	Msg    string `json:"msg"`
}

type Contests struct {
	Contests []*Contest `json:"contests"`
}

type CreateCommentInput struct {
	PetId          string   `json:"petId"`
	UserId         string   `json:"userId"`
	RetailerUserId string   `json:"retailerUserId"`
	Title          string   `json:"title"`
	Details        string   `json:"details"`
	PictureUrls    []string `json:"pictureUrls"`
	Score          int      `json:"score"`
}

type CreateCommentatorCertificateInput struct {
	UserId               string                `json:"userId"`
	PetId                string                `json:"petId"`
	Phone                string                `json:"phone"`
	Name                 string                `json:"name"`
	SnsPlatformName      string                `json:"snsPlatformName"`
	SnsPlatformSelection *SelectionOptionInput `json:"snsPlatformSelection"`
	AvatarUrl            string                `json:"avatarUrl"`
}

type CreatePetBodyMeasurementsInput struct {
	PetID  primitive.ObjectID `json:"petId"`
	Weight float64            `json:"weight"`
	Back   float64            `json:"back"`
	Chest  float64            `json:"chest"`
	Neck   float64            `json:"neck"`
	Waist  *float64           `json:"waist" bson:",omitempty"`
}

type CreatePetInsuranceInput struct {
	PetID              primitive.ObjectID `json:"petId"`
	CompanyName        string             `json:"companyName"`
	AdvisorPhoneNumber string             `json:"advisorPhoneNumber"`
	EffectiveFrom      primitive.DateTime `json:"effectiveFrom"`
	ValidTo            primitive.DateTime `json:"validTo"`
	NotifiedDaysAhead  int                `json:"notifiedDaysAhead"`
	NotificationOn     bool               `json:"notificationOn"`
}

type CreatePetPawMeasurementsInput struct {
	PetID          primitive.ObjectID `json:"petId"`
	Width          float64            `json:"width"`
	Length         float64            `json:"length"`
	ShoulderHeight *float64           `json:"shoulderHeight" bson:",omitempty"`
	BackLegHeight  *float64           `json:"backLegHeight" bson:",omitempty"`
}

type CreatePetProfileInput struct {
	UserID             string             `json:"userId"`
	AvatarURL          string             `json:"avatarUrl"`
	IDPhotoURL         string             `json:"idPhotoUrl"`
	IDCardURL          string             `json:"idCardUrl"`
	IDCardBgRmdURL     *string            `json:"idCardBgRmdUrl"`
	Name               string             `json:"name"`
	NameZh             string             `json:"nameZh"`
	NameEn             string             `json:"nameEn"`
	Birthday           string             `json:"birthday" bson:",omitempty"`
	Birthday2          primitive.DateTime `json:"birthday2" bson:",omitempty"`
	DepartureDate      primitive.DateTime `json:"departureDate"`
	BreedName          string             `json:"breedName"`
	PetOwnerSnsAccount string             `json:"petOwnerSnsAccount"`
	Sex                string             `json:"sex"`
	HomeArrivalDate    string             `json:"homeArrivalDate"`
}

type CreatePetVaxInput struct {
	PetID               primitive.ObjectID `json:"petId"`
	VaxName             string             `json:"vaxName"`
	Clinic              string             `json:"clinic"`
	VaxxedDate          primitive.DateTime `json:"vaxxedDate"`
	ImmunityLastingUtil primitive.DateTime `json:"immunityLastingUtil"`
	NotifiedDaysAhead   int                `json:"notifiedDaysAhead"`
	NotificationOn      bool               `json:"notificationOn"`
}

type CreateRetailerProfileInput struct {
	AvatarUrl        string                  `json:"avatarUrl" bson:",omitempty"`
	Name             string                  `json:"name" bson:",omitempty"`
	Phone            string                  `json:"phone" bson:",omitempty"`
	GeoLocation      *GeoLocationInput       `json:"geoLocation" bson:",omitempty"`
	ShopPhotoUrls    []string                `json:"shopPhotoUrls" bson:",omitempty"`
	ShopPhotos       []*PhotoInput           `json:"shopPhotos" bson:",omitempty"`
	ShopIntro        string                  `json:"shopIntro" bson:",omitempty"`
	City             *SelectionOptionInput   `json:"city" bson:",omitempty"`
	Region           *SelectionOptionInput   `json:"region" bson:",omitempty"`
	District         *SelectionOptionInput   `json:"district" bson:",omitempty"`
	Landmark         *SelectionOptionInput   `json:"landmark" bson:",omitempty"`
	Address          string                  `json:"address" bson:",omitempty"`
	PaymentMethods   []*SelectionOptionInput `json:"paymentMethods" bson:",omitempty"`
	Category         *SelectionOptionInput   `json:"category" bson:",omitempty"`
	CategoryOptions  []*SelectionOptionInput `json:"categoryOptions" bson:",omitempty"`
	SortingOption    *SelectionOptionInput   `json:"sortingOption" bson:",omitempty"`
	Promotions       string                  `json:"promotions"`
	OpeningHours     string                  `json:"openingHours"`
	Routes           string                  `json:"routes" bson:",omitempty"`
	WebsiteUrl       string                  `json:"websiteUrl" bson:",omitempty"`
	FacebookAccount  string                  `json:"facebookAccount" bson:",omitempty"`
	InstagramAccount string                  `json:"instagramAccount" bson:",omitempty"`
	BusinessLicense  *string                 `json:"businessLicense" bson:",omitempty"`
}

type CreateVoucherOwnershipInput struct {
	VoucherID primitive.ObjectID `json:"voucherId"`
}

type DatesFilter struct {
	Before primitive.DateTime `json:"before"`
	After  primitive.DateTime `json:"after"`
}

type DatesFilterInput struct {
	Before *primitive.DateTime `json:"before"`
	After  *primitive.DateTime `json:"after"`
}

type DatetimeFilter struct {
	StartedAt primitive.DateTime `json:"startedAt"`
	EndedAt   primitive.DateTime `json:"endedAt"`
}

type DeleteFcmRegistrationTokenInput struct {
	UserID primitive.ObjectID `json:"userId"`
	UUID   string             `json:"uuid"`
	Token  string             `json:"token"`
}

type DeletePetBodyMeasurementsInput struct {
	ID    primitive.ObjectID `json:"id"`
	PetID primitive.ObjectID `json:"petId"`
}

type DeletePetInsuranceInput struct {
	ID    primitive.ObjectID `json:"id"`
	PetID primitive.ObjectID `json:"petId"`
}

type DeletePetPawMeasurementsInput struct {
	ID    primitive.ObjectID `json:"id"`
	PetID primitive.ObjectID `json:"petId"`
}

type DeletePetVaxInput struct {
	ID    primitive.ObjectID `json:"id"`
	PetID primitive.ObjectID `json:"petId"`
}

type DonationMethod struct {
	Details   string   `json:"details"`
	PhotoUrls []string `json:"photoUrls"`
}

type DonationMethodInput struct {
	Details   string   `json:"details"`
	PhotoUrls []string `json:"photoUrls"`
}

type EditorialPost struct {
	Title        string `json:"title"`
	ThumbnailUrl string `json:"thumbnailUrl"`
	Categories   []int  `json:"categories"`
	Link         string `json:"link"`
	Id           string `json:"id"`
	Guid         string `json:"guid"`
}

type EditorialPosts struct {
	Posts []*EditorialPost `json:"posts"`
}

type Event struct {
	ID                primitive.ObjectID `json:"id" bson:"_id"`
	UserID            primitive.ObjectID `json:"userId"`
	User              *UserProfile       `json:"user"`
	Name              string             `json:"name"`
	StartedAt         primitive.DateTime `json:"startedAt"`
	EndedAt           primitive.DateTime `json:"endedAt"`
	OpeningHours      string             `json:"openingHours"`
	CreatedAt         primitive.DateTime `json:"createdAt"`
	UpdatedAt         primitive.DateTime `json:"updatedAt"`
	Fees              string             `json:"fees"`
	PhoneNumber       string             `json:"phoneNumber"`
	WebsiteUrl        string             `json:"websiteUrl"`
	FacebookAccount   string             `json:"facebookAccount"`
	InstagramAccount  string             `json:"instagramAccount"`
	Category          *SelectionOption   `json:"category"`
	Online            bool               `json:"online"`
	Address           string             `json:"address"`
	Region            *SelectionOption   `json:"region"`
	District          *SelectionOption   `json:"district"`
	GeoLocation       *GeoLocation       `json:"geoLocation"`
	Photos            []*Photo           `json:"photos"`
	Summary           string             `json:"summary"`
	Details           string             `json:"details"`
	Favorited         bool               `json:"favorited"`
	FavoritingUserIds []string           `json:"favoritingUserIds"`
	Recommended       bool               `json:"recommended"`
	Approved          bool               `json:"approved"`
}

type Events struct {
	TotalCount int      `json:"totalCount"`
	Events     []*Event `json:"events"`
}

func (Events) IsEventsQueryResult() {}

type EventsInput struct {
	PageNumber           int                   `json:"pageNumber"`
	PageSize             int                   `json:"pageSize"`
	CategoriesFilter     *CategoriesFilter     `json:"categoriesFilter"`
	DatetimeFilter       *DatetimeFilter       `json:"datetimeFilter"`
	TerritoriesFilter    *TerritoriesFilter    `json:"territoriesFilter"`
	RecommendationFilter *RecommendationFilter `json:"recommendationFilter"`
	ApprovalFilter       ApprovalFilter        `json:"approvalFilter"`
}

type FavoriteFilter struct {
	Option int `json:"option"`
}

type FavoriteRetailerInput struct {
	UserId         string `json:"userId"`
	RetailerUserId string `json:"retailerUserId"`
	Action         int    `json:"action"`
}

type FcmRegistrationToken struct {
	Token     string             `json:"token"`
	UUID      string             `json:"uuid"`
	UpdatedAt primitive.DateTime `json:"updatedAt"`
}

type FcmRegistrationTokenFilter struct {
	Present bool `json:"present"`
}

type FileOperation struct {
	UploadUrl   string `json:"uploadUrl"`
	DownloadUrl string `json:"downloadUrl"`
}

type FileOperationInput struct {
	Filename   string `json:"filename"`
	PublicRead bool   `json:"publicRead"`
}

type GenerateVerificationCodeInput struct {
	PhoneOrEmail string                          `json:"phoneOrEmail"`
	Purpose      GenerateVerificationCodePurpuse `json:"purpose"`
}

type GeoFilter struct {
	Distance    int               `json:"distance"`
	GeoLocation *GeoLocationInput `json:"geoLocation"`
}

type GeoLocation struct {
	Long float64 `json:"long"`
	Lat  float64 `json:"lat"`
}

type GeoLocationConstraint struct {
	GeoLocation      *GeoLocation `json:"geoLocation"`
	FarthestDistance int          `json:"farthestDistance"`
}

type GeoLocationConstraintInput struct {
	GeoLocation      *GeoLocationInput `json:"geoLocation"`
	FarthestDistance int               `json:"farthestDistance"`
}

type GeoLocationInput struct {
	Long float64 `json:"long"`
	Lat  float64 `json:"lat"`
}

type HomepagePosts struct {
	ChannelPosts       []*EditorialPost `json:"channelPosts"`
	InformationalPosts []*EditorialPost `json:"informationalPosts"`
	RetailerAdPosts    []*EditorialPost `json:"retailerAdPosts"`
	SlidingAdPosts     []*EditorialPost `json:"slidingAdPosts"`
	ActivityPosts      []*EditorialPost `json:"activityPosts"`
}

type Job struct {
	Id           primitive.ObjectID `json:"id" bson:"_id"`
	Name         string             `json:"name"`
	Type         JobType            `json:"type"`
	Schedule     *Schedule          `json:"schedule"`
	Message      *Message           `json:"message"`
	Activated    bool               `json:"activated"`
	EntryID      int                `json:"entryId"`
	CreatedAt    primitive.DateTime `json:"createdAt"`
	UpdatedAt    primitive.DateTime `json:"updatedAt"`
	ExecutedAt   primitive.DateTime `json:"executedAt"`
	UsersFilters *UsersFilters      `json:"usersFilters"`
	PetsFilters  *PetsFilters       `json:"petsFilters"`
	Logs         string             `json:"logs"`
}

type JobActivationFilter struct {
	Option bool `json:"option"`
}

type JobTypeFilter struct {
	Option JobType `json:"option"`
}

type Jobs struct {
	TotalCount int    `json:"totalCount"`
	Jobs       []*Job `json:"jobs"`
}

func (Jobs) IsJobsResult() {}

type JobsInput struct {
	PageNumber          int                  `json:"pageNumber"`
	PageSize            int                  `json:"pageSize"`
	JobTypeFilter       *JobTypeFilter       `json:"jobTypeFilter"`
	JobActivationFilter *JobActivationFilter `json:"jobActivationFilter"`
}

type LandmarkFilter struct {
	Option *SelectionOptionInput `json:"option"`
}

type LandmarksFilter struct {
	Landmarks []*LandmarkFilter `json:"landmarks"`
}

type LevelFilter struct {
	Options []int `json:"options"`
}

type Message struct {
	Title      string   `json:"title"`
	Body       string   `json:"body"`
	AppPage    *AppPage `json:"appPage"`
	PageParams string   `json:"pageParams"`
}

type MessageInput struct {
	Title      string   `json:"title"`
	Body       string   `json:"body"`
	ImageURL   string   `json:"imageUrl"`
	AppPage    *AppPage `json:"appPage"`
	PageParams string   `json:"pageParams"`
}

type MigrateCommentsInput struct {
	SrcPetID   primitive.ObjectID   `json:"srcPetId"`
	DstPetID   primitive.ObjectID   `json:"dstPetId"`
	CommentIds []primitive.ObjectID `json:"commentIds"`
}

type Moment struct {
	Id                string           `json:"id" bson:"_id"`
	UserId            string           `json:"userId"`
	Title             string           `json:"title"`
	Link              string           `json:"link"`
	MediaUrl          string           `json:"mediaUrl"`
	MediaThumbnailUrl string           `json:"mediaThumbnailUrl"`
	IsTemplate        bool             `json:"isTemplate"`
	IsVideo           bool             `json:"isVideo"`
	DatetimeCreated   string           `json:"datetimeCreated"`
	CreateDatetime    string           `json:"createDatetime"`
	RetailerProfile   *RetailerProfile `json:"retailerProfile"`
}

type Moments struct {
	Moments []*Moment `json:"moments"`
}

type MomentsReported struct {
	MomentIds []string `json:"momentIds"`
}

type NameTranslations struct {
	En     string `json:"en"`
	ZhHant string `json:"zhHant"`
}

type NewContest struct {
	Name      string `json:"name"`
	StartDate string `json:"startDate"`
	EndDate   string `json:"endDate"`
	PosterUrl string `json:"posterUrl"`
	Active    bool   `json:"active"`
}

type NewContestCandidate struct {
	ContestId     string `json:"contestId"`
	PetId         string `json:"petId"`
	PetName       string `json:"petName"`
	PetOwnerName  string `json:"petOwnerName"`
	PetOwnerPhone string `json:"petOwnerPhone"`
	PetPhotoUrl   string `json:"petPhotoUrl"`
	PetSnsUrl     string `json:"petSnsUrl"`
}

type NewMoment struct {
	Title      string `json:"title"`
	Link       string `json:"link"`
	MediaUrl   string `json:"mediaUrl"`
	IsTemplate bool   `json:"isTemplate"`
	IsVideo    bool   `json:"isVideo"`
}

type NewUser struct {
	PhoneOrEmail     string             `json:"phoneOrEmail"`
	Password         string             `json:"password"`
	VerificationCode string             `json:"verificationCode"`
	Name             string             `json:"name"`
	ReferralCode     string             `json:"referralCode"`
	ReferralUserID   primitive.ObjectID `json:"referralUserId"`
}

type NewUserWithAppleBinding struct {
	PhoneOrEmail     string `json:"phoneOrEmail"`
	Password         string `json:"password"`
	VerificationCode string `json:"verificationCode"`
	Name             string `json:"name"`
	AuthCode         string `json:"authCode"`
}

type OrderPayment struct {
	PaymentMethodID  string            `json:"paymentMethodId"`
	PaymentType      string            `json:"paymentType"`
	NameTranslations *NameTranslations `json:"nameTranslations"`
	PaymentStatus    string            `json:"paymentStatus"`
}

type OtherFilter struct {
	Option int `json:"option"`
}

type PetBodyMeasurements struct {
	ID              primitive.ObjectID `json:"id"`
	DatetimeCreated primitive.DateTime `json:"datetimeCreated"`
	Weight          float64            `json:"weight"`
	Back            float64            `json:"back"`
	Chest           float64            `json:"chest"`
	Neck            float64            `json:"neck"`
	Waist           float64            `json:"waist"`
}

type PetInsurance struct {
	ID                 primitive.ObjectID `json:"id"`
	CompanyName        string             `json:"companyName"`
	AdvisorPhoneNumber string             `json:"advisorPhoneNumber"`
	EffectiveFrom      primitive.DateTime `json:"effectiveFrom"`
	ValidTo            primitive.DateTime `json:"validTo"`
	NotifiedDaysAhead  int                `json:"notifiedDaysAhead"`
	NotificationOn     bool               `json:"notificationOn"`
}

type PetPawMeasurements struct {
	ID              primitive.ObjectID `json:"id"`
	DatetimeCreated primitive.DateTime `json:"datetimeCreated"`
	Width           float64            `json:"width"`
	Length          float64            `json:"length"`
	ShoulderHeight  float64            `json:"shoulderHeight"`
	BackLegHeight   float64            `json:"backLegHeight"`
}

type PetProfile struct {
	ID                     string                  `json:"id" bson:"_id"`
	AvatarURL              string                  `json:"avatarUrl"`
	IDPhotoURL             string                  `json:"idPhotoUrl"`
	IDCardURL              string                  `json:"idCardUrl"`
	IDCardBgRmdURL         string                  `json:"idCardBgRmdUrl"`
	IDCardNumber           int                     `json:"idCardNumber"`
	Name                   string                  `json:"name"`
	NameZh                 string                  `json:"nameZh"`
	NameEn                 string                  `json:"nameEn"`
	Birthday               string                  `json:"birthday"`
	Birthday2              primitive.DateTime      `json:"birthday2"`
	DepartureDate          primitive.DateTime      `json:"departureDate"`
	BreedName              string                  `json:"breedName"`
	PetOwnerSnsAccount     string                  `json:"petOwnerSnsAccount"`
	UserID                 primitive.ObjectID      `json:"userId"`
	User                   *UserProfile            `json:"user"`
	Sex                    string                  `json:"sex"`
	HomeArrivalDate        string                  `json:"homeArrivalDate"`
	CommentatorCertificate *CommentatorCertificate `json:"commentatorCertificate"`
	CertificateUrls        []string                `json:"certificateUrls"`
	BodyMeasurementsList   []*PetBodyMeasurements  `json:"bodyMeasurementsList"`
	PawMeasurementsList    []*PetPawMeasurements   `json:"pawMeasurementsList"`
	Insurances             []*PetInsurance         `json:"insurances"`
	Vaxes                  []*PetVax               `json:"vaxes"`
	Comments               []*Comment              `json:"comments"`
}

type PetProfiles struct {
	Profiles   []*PetProfile `json:"profiles"`
	TotalCount int           `json:"totalCount"`
}

func (PetProfiles) IsPetProfilesQueryResult() {}

type PetVax struct {
	ID                  primitive.ObjectID `json:"id"`
	VaxName             string             `json:"vaxName"`
	Clinic              string             `json:"clinic"`
	VaxxedDate          primitive.DateTime `json:"vaxxedDate"`
	ImmunityLastingUtil primitive.DateTime `json:"immunityLastingUtil"`
	NotifiedDaysAhead   int                `json:"notifiedDaysAhead"`
	NotificationOn      bool               `json:"notificationOn"`
}

type PetsFilters struct {
	IdCardNumber   int           `json:"idCardNumber"`
	BirthdayFilter *DatesFilter  `json:"birthdayFilter"`
	BreedsFilter   *BreedsFilter `json:"breedsFilter"`
	SexesFilter    *SexesFilter  `json:"sexesFilter"`
}

type PetsFiltersInput struct {
	IdCardNumber   int                `json:"idCardNumber"`
	BirthdayFilter *DatesFilterInput  `json:"birthdayFilter"`
	BreedsFilter   *BreedsFilterInput `json:"breedsFilter"`
	SexesFilter    *SexesFilterInput  `json:"sexesFilter"`
}

type PetsInput struct {
	UserID                             string                              `json:"userId"`
	PageNumber                         int                                 `json:"pageNumber"`
	PageSize                           int                                 `json:"pageSize"`
	MatchingText                       string                              `json:"matchingText"`
	CommentatorCertificateStatusFilter *CommentatorCertificateStatusFilter `json:"commentatorCertificateStatusFilter"`
	IDCardNumber                       int                                 `json:"idCardNumber"`
	BirthdayFilter                     *DatesFilterInput                   `json:"birthdayFilter"`
	BreedsFilter                       *BreedsFilterInput                  `json:"breedsFilter"`
	SexesFilter                        *SexesFilterInput                   `json:"sexesFilter"`
}

type PetsWithCommentsInput struct {
	PageNumber         int               `json:"pageNumber"`
	PageSize           int               `json:"pageSize"`
	CommentDatesFilter *DatesFilterInput `json:"commentDatesFilter"`
}

type Photo struct {
	ID          primitive.ObjectID `json:"id"`
	Url         string             `json:"url"`
	Description string             `json:"description"`
}

type PhotoInput struct {
	Url         string `json:"url"`
	Description string `json:"description"`
}

type PointTransaction struct {
	ID           primitive.ObjectID      `json:"id" bson:"_id"`
	UserID       *primitive.ObjectID     `json:"userId" bson:",omitempty"`
	SourceEntity TransactionSourceEntity `json:"sourceEntity"`
	Type         TransactionType         `json:"type"`
	Amount       int                     `json:"amount"`
	Accumulated  bool                    `json:"accumulated"`
	UpdatedAt    primitive.DateTime      `json:"updatedAt"`
	CreatedAt    primitive.DateTime      `json:"createdAt"`
	Remarks      string                  `json:"remarks"`
	Details      TransactionDetails      `json:"details"`
}

type PointTransactions struct {
	TotalCount int                 `json:"totalCount"`
	Items      []*PointTransaction `json:"items"`
}

func (PointTransactions) IsPointTransactionsQueryResult() {}

type PointTransactionsCommonFilter struct {
	UserID       *primitive.ObjectID      `json:"userId" bson:",omitempty"`
	SourceEntity *TransactionSourceEntity `json:"sourceEntity" bson:",omitempty"`
	Type         *TransactionType         `json:"type" bson:",omitempty"`
}

type PointTransctionsInput struct {
	PageSize     int                            `json:"pageSize"`
	PageNumber   int                            `json:"pageNumber"`
	CommonFilter *PointTransactionsCommonFilter `json:"commonFilter"`
	DatesFilter  *DatesFilterInput              `json:"datesFilter"`
}

type RankingFilter struct {
	Option int `json:"option"`
}

type RecommendationFilter struct {
	Option int `json:"option"`
}

type ReportMomentInput struct {
	MomentId       string `json:"momentId"`
	ReportedUserId string `json:"reportedUserId"`
	Reason         string `json:"reason"`
}

type RetailerNameEntries struct {
	Entries []*RetailerNameEntry `json:"entries"`
}

type RetailerNameEntriesInput struct {
	PageSize          int                `json:"pageSize"`
	PageNumber        int                `json:"pageNumber"`
	StartUserId       string             `json:"startUserId"`
	MatchingName      string             `json:"matchingName"`
	MatchingAddress   string             `json:"matchingAddress"`
	TerritoriesFilter *TerritoriesFilter `json:"territoriesFilter"`
	LandmarksFilter   *LandmarksFilter   `json:"landmarksFilter"`
}

type RetailerNameEntry struct {
	Name   string `json:"name"`
	UserId string `json:"userId"`
}

type RetailerProfile struct {
	Id                 string             `json:"id" bson:"_id"`
	UserID             primitive.ObjectID `json:"userId"`
	Account            string             `json:"account"`
	Role               int                `json:"role"`
	Level              int                `json:"level"`
	AvatarUrl          string             `json:"avatarUrl"`
	Name               string             `json:"name"`
	Phone              string             `json:"phone"`
	GeoLocation        *GeoLocation       `json:"geoLocation"`
	ShopPhotoUrls      []string           `json:"shopPhotoUrls"`
	ShopPhotos         []*Photo           `json:"shopPhotos"`
	ShopIntro          string             `json:"shopIntro"`
	City               *SelectionOption   `json:"city"`
	Region             *SelectionOption   `json:"region"`
	District           *SelectionOption   `json:"district"`
	Landmark           *SelectionOption   `json:"landmark"`
	Address            string             `json:"address"`
	Moments            []*Moment          `json:"moments"`
	PaymentMethods     []*SelectionOption `json:"paymentMethods"`
	Category           *SelectionOption   `json:"category"`
	RawData            string             `json:"rawData"`
	CategoryOptions    []*SelectionOption `json:"categoryOptions"`
	SortingOption      *SelectionOption   `json:"sortingOption"`
	DatetimeModified   string             `json:"datetimeModified"`
	CalculatedDistance float64            `json:"calculatedDistance"`
	Favorited          bool               `json:"favorited" bson:"favorited,omitempty"`
	FavoritingUserIds  []string           `json:"favoritingUserIds"`
	Promotions         string             `json:"promotions"`
	OpeningHours       string             `json:"openingHours"`
	Routes             string             `json:"routes"`
	WebsiteUrl         string             `json:"websiteUrl"`
	FacebookAccount    string             `json:"facebookAccount"`
	InstagramAccount   string             `json:"instagramAccount"`
	Recommended        bool               `json:"recommended"`
	Rating             float64            `json:"rating"`
	CreatedBy          *UserProfile       `json:"createdBy"`
	CreatedAt          primitive.DateTime `json:"createdAt"`
	BusinessLicense    string             `json:"businessLicense"`
}

type RetailerProfiles struct {
	TotalCount int                `json:"totalCount"`
	Profiles   []*RetailerProfile `json:"profiles"`
}

func (RetailerProfiles) IsRetailersQueryResult() {}

type RetailersBlocked struct {
	UserIds []string `json:"userIds"`
}

type RetailersInput struct {
	UserId               string                `json:"userId"`
	PageSize             int                   `json:"pageSize"`
	PageNumber           int                   `json:"pageNumber"`
	StartUserId          string                `json:"startUserId"`
	MatchingAddress      string                `json:"matchingAddress"`
	MatchingName         string                `json:"matchingName"`
	MatchingPhoneOrEmail string                `json:"matchingPhoneOrEmail"`
	TerritoriesFilter    *TerritoriesFilter    `json:"territoriesFilter"`
	LandmarksFilter      *LandmarksFilter      `json:"landmarksFilter"`
	CategoriesFilter     *CategoriesFilter     `json:"categoriesFilter"`
	GeoFilter            *GeoFilter            `json:"geoFilter"`
	TimeFilter           *TimeFilter           `json:"timeFilter"`
	RoleFilter           *RoleFilter           `json:"roleFilter"`
	LevelFilter          *LevelFilter          `json:"levelFilter"`
	RecommendationFilter *RecommendationFilter `json:"recommendationFilter"`
	FavoriteFilter       *FavoriteFilter       `json:"favoriteFilter"`
	RankingFilter        *RankingFilter        `json:"rankingFilter"`
}

type RoleFilter struct {
	Option int `json:"option"`
}

type Schedule struct {
	Day      int  `json:"day"`
	Hour     int  `json:"hour"`
	Minute   int  `json:"minute"`
	Repeated bool `json:"repeated"`
}

type ScheduleInput struct {
	Day      int  `json:"day"`
	Hour     int  `json:"hour"`
	Minute   int  `json:"minute"`
	Repeated bool `json:"repeated"`
}

type SelectionOption struct {
	Id      string             `json:"id"`
	Name    string             `json:"name"`
	Options []*SelectionOption `json:"options"`
}

type SelectionOptionInput struct {
	Id      string                  `json:"id"`
	Name    string                  `json:"name"`
	Options []*SelectionOptionInput `json:"options"`
}

type SendMessageInput struct {
	Message      *MessageInput      `json:"message"`
	PetsFilters  *PetsFiltersInput  `json:"petsFilters"`
	UsersFilters *UsersFiltersInput `json:"usersFilters"`
	WetRun       bool               `json:"wetRun"`
	JobID        primitive.ObjectID `json:"jobId"`
}

type ServiceError struct {
	Code int    `json:"code"`
	Msg  string `json:"msg"`
}

func (ServiceError) IsAdoptionAdQueryResult() {}

func (ServiceError) IsAdoptionAdsQueryResult() {}

func (ServiceError) IsAdoptionAgenciesQueryResult() {}

func (ServiceError) IsCheckInCounterQueryResult() {}

func (ServiceError) IsCheckInCountersQueryResult() {}

func (ServiceError) IsCheckInRecordQueryResult() {}

func (ServiceError) IsEventsQueryResult() {}

func (ServiceError) IsJobsResult() {}

func (ServiceError) IsBannersQueryResult() {}

func (ServiceError) IsPetProfilesQueryResult() {}

func (ServiceError) IsRefreshAccessTokenResult() {}

func (ServiceError) IsRetailersQueryResult() {}

func (ServiceError) IsPointTransactionsQueryResult() {}

func (ServiceError) IsLoginUserResult() {}

func (ServiceError) IsAdoptionAgencyQueryResult() {}

func (ServiceError) IsUserProfilesQueryResult() {}

func (ServiceError) IsUserProfileQueryResult() {}

func (ServiceError) IsVoucherQueryResult() {}

func (ServiceError) IsVouchersQueryResult() {}

func (ServiceError) IsVoucherOwnershipQueryResult() {}

type SexesFilter struct {
	Names []string `json:"names"`
}

type SexesFilterInput struct {
	Names []string `json:"names"`
}

type ShareContent struct {
	Text       string `json:"text"`
	ImageURL   string `json:"imageUrl"`
	WebpageURL string `json:"webpageUrl"`
}

type ShareContentInput struct {
	Text       *string `json:"text" bson:",omitempty"`
	ImageURL   *string `json:"imageUrl" bson:",omitempty"`
	WebpageURL *string `json:"webpageUrl" bson:",omitempty"`
}

type ShoplineMerchantInfo struct {
	ID            primitive.ObjectID `json:"id" bson:"_id"`
	MerchantID    string             `json:"merchantId"`
	ApplicationID string             `json:"applicationId"`
	Name          string             `json:"name"`
	Email         string             `json:"email"`
	Handle        string             `json:"handle"`
	UpdatedAt     primitive.DateTime `json:"updatedAt"`
	AccessToken   string             `json:"accessToken"`
	Connected     bool               `json:"connected"`
}

type ShoplineMerchatInfoInput struct {
	MerchantID string `json:"merchantId"`
}

type SysemTransactionDetails struct {
	TaskID              primitive.ObjectID `json:"taskId"`
	TaskParticipationID primitive.ObjectID `json:"taskParticipationId"`
}

func (SysemTransactionDetails) IsTransactionDetails() {}

type Task struct {
	ID            primitive.ObjectID  `json:"id" bson:"_id"`
	Name          string              `json:"name"`
	ImageURL      string              `json:"imageUrl"`
	DetailsURL    string              `json:"detailsUrl"`
	StartedAt     *primitive.DateTime `json:"startedAt"`
	EndedAt       *primitive.DateTime `json:"endedAt"`
	Type          TaskType            `json:"type"`
	Status        TaskStatus          `json:"status"`
	Points        int                 `json:"points"`
	ShareContent  *ShareContent       `json:"shareContent"`
	RedemptionURL string              `json:"redemptionUrl"`
	Participation *TaskParticipation  `json:"participation"`
}

type TaskFilter struct {
	Status *TaskStatus `json:"status"`
	Type   *TaskType   `json:"type"`
}

type TaskParticipation struct {
	ID                 primitive.ObjectID      `json:"id" bson:"_id"`
	UserID             primitive.ObjectID      `json:"userId"`
	TaskID             primitive.ObjectID      `json:"taskId"`
	Status             TaskParticipationStatus `json:"status"`
	CreatedAt          primitive.DateTime      `json:"createdAt"`
	UpdatedAt          primitive.DateTime      `json:"updatedAt"`
	CompletedAt        primitive.DateTime      `json:"completedAt"`
	ConfirmationUserID primitive.ObjectID      `json:"confirmationUserId"`
}

type TaskParticipationFilter struct {
	Status int `json:"status"`
}

type TaskParticipationList struct {
	List []*TaskParticipation `json:"list"`
}

type TaskParticipationListInput struct {
	PageSize                 int                      `json:"pageSize"`
	PageNumber               int                      `json:"pageNumber"`
	UserID                   string                   `json:"userId"`
	StartTaskParticipationID string                   `json:"startTaskParticipationId"`
	Filter                   *TaskParticipationFilter `json:"filter"`
}

type Tasks struct {
	Tasks []*Task `json:"tasks"`
}

type TasksInput struct {
	PageSize            int                      `json:"pageSize"`
	PageNumber          int                      `json:"pageNumber"`
	TaskFilter          *TaskFilter              `json:"taskFilter"`
	ParticipationFilter *TaskParticipationFilter `json:"participationFilter"`
}

type TerritoriesFilter struct {
	Territories []*TerritoryFilter `json:"territories"`
}

type TerritoryFilter struct {
	City     *SelectionOptionInput `json:"city"`
	Region   *SelectionOptionInput `json:"region"`
	District *SelectionOptionInput `json:"district"`
}

type ThirdPartyTransactionDetails struct {
	CustomerPhone string        `json:"customerPhone"`
	CustomerEmail string        `json:"customerEmail"`
	CustomerName  string        `json:"customerName"`
	OrderID       string        `json:"orderId"`
	MerchantID    string        `json:"merchantId"`
	OrderPayment  *OrderPayment `json:"orderPayment"`
}

func (ThirdPartyTransactionDetails) IsTransactionDetails() {}

type TimeFilter struct {
	Option int `json:"option"`
}

type UpdateAdoptionAd struct {
	AgencyID  *primitive.ObjectID   `json:"agencyId" bson:",omitempty"`
	PetName   *string               `json:"petName" bson:",omitempty"`
	Sex       *Sex                  `json:"sex" bson:",omitempty"`
	PetAge    *string               `json:"petAge" bson:",omitempty"`
	Breed     *SelectionOptionInput `json:"breed" bson:",omitempty"`
	PhotoUrls []string              `json:"photoUrls" bson:",omitempty"`
	Remarks   *string               `json:"remarks" bson:",omitempty"`
	Hidden    *bool                 `json:"hidden" bson:",omitempty"`
	Adopted   *bool                 `json:"adopted" bson:",omitempty"`
}

type UpdateAdoptionAdInput struct {
	ID primitive.ObjectID `json:"id" bson:"_id"`
	Ad *UpdateAdoptionAd  `json:"ad"`
}

type UpdateAdoptionAgency struct {
	UserID         *primitive.ObjectID    `json:"userId" bson:",omitempty"`
	Name           *string                `json:"name" bson:",omitempty"`
	AvatarURL      *string                `json:"avatarUrl" bson:",omitempty"`
	Phone          *string                `json:"phone" bson:",omitempty"`
	Address        *string                `json:"address" bson:",omitempty"`
	GeoLocation    *GeoLocationInput      `json:"geoLocation" bson:",omitempty"`
	WebsiteURL     *string                `json:"websiteUrl" bson:",omitempty"`
	PhotoUrls      []string               `json:"photoUrls" bson:",omitempty"`
	Introduction   *string                `json:"introduction" bson:",omitempty"`
	Activity       *AdoptionActivityInput `json:"activity" bson:",omitempty"`
	DonationMethod *DonationMethodInput   `json:"donationMethod" bson:",omitempty"`
	Approved       *bool                  `json:"approved" bson:",omitempty"`
}

type UpdateAdoptionAgencyInput struct {
	ID     primitive.ObjectID    `json:"id" bson:"_id"`
	Agency *UpdateAdoptionAgency `json:"agency"`
}

type UpdateBanner struct {
	Name          *string  `json:"name" bson:",omitempty"`
	ImageURL      *string  `json:"imageUrl" bson:",omitempty"`
	PopupImageURL *string  `json:"popupImageUrl" bson:",omitempty"`
	AppPage       *AppPage `json:"appPage" bson:",omitempty"`
	PageParams    *string  `json:"pageParams" bson:",omitempty"`
	Visible       *bool    `json:"visible" bson:",omitempty"`
}

type UpdateBannerInput struct {
	ID     primitive.ObjectID `json:"id"`
	Banner *UpdateBanner      `json:"banner"`
}

type UpdateCheckInCounter struct {
	Name                  *string                     `json:"name" bson:",omitempty"`
	Greetings             *string                     `json:"greetings" bson:",omitempty"`
	ProductID             *primitive.ObjectID         `json:"productId" bson:",omitempty"`
	ProductName           *string                     `json:"productName" bson:",omitempty"`
	QRCodeURL             *string                     `json:"qrCodeUrl" bson:",omitempty"`
	Points                *int                        `json:"points" bson:",omitempty"`
	ValidTo               *primitive.DateTime         `json:"validTo" bson:",omitempty"`
	ValidFrom             *primitive.DateTime         `json:"validFrom" bson:",omitempty"`
	GeoLocationConstraint *GeoLocationConstraintInput `json:"geoLocationConstraint" bson:",omitempty"`
}

type UpdateCheckInCounterInput struct {
	ID      primitive.ObjectID    `json:"id"`
	Counter *UpdateCheckInCounter `json:"counter"`
}

type UpdateCommentStatusInput struct {
	Id     string `json:"id"`
	Status int    `json:"status"`
}

type UpdateCommentatorCertificate struct {
	Status               *int                  `json:"status" bson:",omitempty"`
	Level                *int                  `json:"level" bson:",omitempty"`
	AvatarURL            *string               `json:"avatarUrl" bson:",omitempty"`
	Name                 *string               `json:"name" bson:",omitempty"`
	Phone                *string               `json:"phone" bson:",omitempty"`
	SnsPlatformName      *string               `json:"snsPlatformName" bson:",omitempty"`
	SnsPlatformSelection *SelectionOptionInput `json:"snsPlatformSelection" bson:",omitempty"`
}

type UpdateCommentatorCertificateInput struct {
	PetId       primitive.ObjectID            `json:"petId"`
	Certificate *UpdateCommentatorCertificate `json:"certificate"`
}

type UpdateContest struct {
	Id        string `json:"id"`
	Name      string `json:"name"`
	StartDate string `json:"startDate"`
	EndDate   string `json:"endDate"`
	PosterUrl string `json:"posterUrl"`
	Active    bool   `json:"active"`
}

type UpdateContestCandidate struct {
	Id          string `json:"id"`
	PetName     string `json:"petName"`
	PetPhotoUrl string `json:"petPhotoUrl"`
	PetSnsUrl   string `json:"petSnsUrl"`
	Sequence    int    `json:"sequence"`
}

type UpdateContestCandidateEnrollment struct {
	Id         string                  `json:"id"`
	Enrollment *ContestEnrollmentInput `json:"enrollment"`
}

type UpdateContestCandidateExtraNumberOfVotes struct {
	Id                 string `json:"id"`
	ExtraNumberOfVotes int    `json:"extraNumberOfVotes"`
}

type UpdateEventApprovalInput struct {
	EventID primitive.ObjectID               `json:"eventId"`
	Payload *UpdateEventApprovalInputPayload `json:"payload"`
}

type UpdateEventApprovalInputPayload struct {
	Approved bool `json:"approved"`
}

type UpdateEventInput struct {
	ID      primitive.ObjectID       `json:"id"`
	Payload *UpdateEventInputPayload `json:"payload"`
}

type UpdateEventInputPayload struct {
	UserID            primitive.ObjectID    `json:"userId"`
	Name              string                `json:"name"`
	StartedAt         primitive.DateTime    `json:"startedAt"`
	EndedAt           primitive.DateTime    `json:"endedAt"`
	OpeningHours      string                `json:"openingHours"`
	Fees              string                `json:"fees"`
	PhoneNumber       string                `json:"phoneNumber"`
	WebsiteUrl        string                `json:"websiteUrl"`
	FacebookAccount   string                `json:"facebookAccount"`
	InstagramAccount  string                `json:"instagramAccount"`
	Category          *SelectionOptionInput `json:"category"`
	Online            bool                  `json:"online"`
	Address           string                `json:"address"`
	Region            *SelectionOptionInput `json:"region"`
	District          *SelectionOptionInput `json:"district"`
	GeoLocation       *GeoLocationInput     `json:"geoLocation"`
	Photos            []*PhotoInput         `json:"photos"`
	Summary           string                `json:"summary"`
	Details           string                `json:"details"`
	Favorited         bool                  `json:"favorited"`
	FavoritingUserIds []string              `json:"favoritingUserIds"`
}

type UpdateEventRecommendationInput struct {
	EventID primitive.ObjectID                     `json:"eventId"`
	Payload *UpdateEventRecommendationInputPayload `json:"payload"`
}

type UpdateEventRecommendationInputPayload struct {
	Recommended bool `json:"recommended"`
}

type UpdateJobActivationInput struct {
	JobId   primitive.ObjectID          `json:"jobId"`
	Payload *UpdateJobActivationPayload `json:"payload"`
}

type UpdateJobActivationPayload struct {
	Activated bool `json:"activated"`
}

type UpdateJobEntryIDInput struct {
	JobId   primitive.ObjectID       `json:"jobId"`
	Payload *UpdateJobEntryIDPayload `json:"payload"`
}

type UpdateJobEntryIDPayload struct {
	EntryID int `json:"entryId"`
}

type UpdateJobInput struct {
	Id      primitive.ObjectID `json:"id"`
	Payload *UpdateJobPayload  `json:"payload"`
}

type UpdateJobPayload struct {
	Name         string             `json:"name" bson:",omitempty"`
	Type         *JobType           `json:"type" bson:",omitempty"`
	Schedule     *ScheduleInput     `json:"schedule" bson:",omitempty"`
	Message      *MessageInput      `json:"message" bson:",omitempty"`
	UsersFilters *UsersFiltersInput `json:"usersFilters"`
	PetsFilters  *PetsFiltersInput  `json:"petsFilters"`
}

type UpdateMoment struct {
	Id         string `json:"id"`
	Title      string `json:"title"`
	Link       string `json:"link"`
	MediaUrl   string `json:"mediaUrl"`
	IsTemplate bool   `json:"isTemplate"`
}

type UpdateNameTranslations struct {
	En     string `json:"en"`
	ZhHant string `json:"zhHant"`
}

type UpdateOrderPayment struct {
	PaymentMethodID  *string                 `json:"paymentMethodId" bson:",omitempty"`
	PaymentType      *string                 `json:"paymentType" bson:",omitempty"`
	NameTranslations *UpdateNameTranslations `json:"nameTranslations" bson:",omitempty"`
	PaymentStatus    *string                 `json:"paymentStatus" bson:",omitempty"`
}

type UpdatePetCertificatesInput struct {
	PetID primitive.ObjectID `json:"petId"`
	Urls  []string           `json:"urls"`
}

type UpdatePetProfileInput struct {
	ID                 string             `json:"id"`
	AvatarURL          string             `json:"avatarUrl" bson:",omitempty"`
	IDPhotoURL         string             `json:"idPhotoUrl" bson:",omitempty"`
	IDCardURL          string             `json:"idCardUrl" bson:",omitempty"`
	IDCardBgRmdURL     *string            `json:"idCardBgRmdUrl" bson:",omitempty"`
	Name               string             `json:"name"`
	NameZh             string             `json:"nameZh" bson:",omitempty"`
	NameEn             string             `json:"nameEn" bson:",omitempty"`
	Birthday           string             `json:"birthday" bson:",omitempty"`
	Birthday2          primitive.DateTime `json:"birthday2" bson:",omitempty"`
	DepartureDate      primitive.DateTime `json:"departureDate" bson:",omitempty"`
	BreedName          string             `json:"breedName" bson:",omitempty"`
	PetOwnerSnsAccount string             `json:"petOwnerSnsAccount" bson:",omitempty"`
	Sex                string             `json:"sex" bson:",omitempty"`
	HomeArrivalDate    string             `json:"homeArrivalDate" bson:",omitempty"`
}

type UpdateRetailerProfileInput struct {
	UserId  string                      `json:"userId"`
	Profile *CreateRetailerProfileInput `json:"profile"`
}

type UpdateRetailerRatingInput struct {
	UserId primitive.ObjectID `json:"userId"`
	Rating float64            `json:"rating"`
}

type UpdateRetailerRecommendationInput struct {
	UserId      primitive.ObjectID `json:"userId"`
	Recommended bool               `json:"recommended"`
}

type UpdateShoplineMerchantInfo struct {
	Name          *string `json:"name" bson:",omitempty"`
	Email         *string `json:"email" bson:",omitempty"`
	Handle        *string `json:"handle" bson:",omitempty"`
	AccessToken   *string `json:"accessToken" bson:",omitempty"`
	Connected     *bool   `json:"connected" bson:",omitempty"`
	ApplicationID *string `json:"applicationId" bson:",omitempty"`
}

type UpdateShoplineMerchantInfoInput struct {
	MerchantID string                      `json:"merchantId"`
	Info       *UpdateShoplineMerchantInfo `json:"info"`
}

type UpdateSystemTransaction struct {
	UserID                   *primitive.ObjectID             `json:"userId" bson:",omitempty"`
	SourceEntity             *TransactionSourceEntity        `json:"sourceEntity" bson:",omitempty"`
	Amount                   *int                            `json:"amount" bson:",omitempty"`
	Accumulated              *bool                           `json:"accumulated" bson:",omitempty"`
	Remarks                  *string                         `json:"remarks" bson:",omitempty"`
	SystemTransactionDetails *UpdateSystemTransactionDetails `json:"systemTransactionDetails" bson:",omitempty"`
}

type UpdateSystemTransactionDetails struct {
	TaskID              *primitive.ObjectID `json:"taskId" bson:",omitempty"`
	TaskParticipationID *primitive.ObjectID `json:"taskParticipationId" bson:",omitempty"`
}

type UpdateSystemTransactionInput struct {
	ID          primitive.ObjectID       `json:"id"`
	Transaction *UpdateSystemTransaction `json:"transaction"`
}

type UpdateTask struct {
	Name         *string             `json:"name" bson:",omitempty"`
	ImageURL     *string             `json:"imageUrl" bson:",omitempty"`
	DetailsURL   *string             `json:"detailsUrl" bson:",omitempty"`
	StartedAt    *primitive.DateTime `json:"startedAt" bson:",omitempty"`
	EndedAt      *primitive.DateTime `json:"endedAt" bson:",omitempty"`
	Type         *TaskType           `json:"type" bson:",omitempty"`
	Status       *TaskStatus         `json:"status" bson:",omitempty"`
	Points       *int                `json:"points" bson:",omitempty"`
	ShareContent *ShareContentInput  `json:"shareContent" bson:",omitempty"`
}

type UpdateTaskInput struct {
	ID   primitive.ObjectID `json:"id"`
	Task *UpdateTask        `json:"task"`
}

type UpdateTaskParticipation struct {
	TaskID *primitive.ObjectID      `json:"taskId" bson:",omitempty"`
	Status *TaskParticipationStatus `json:"status" bson:",omitempty"`
}

type UpdateTaskParticipationInput struct {
	ID            primitive.ObjectID       `json:"id"`
	Participation *UpdateTaskParticipation `json:"participation"`
}

type UpdateThirdPartyPointTransactionDetails struct {
	CustomerPhone *string             `json:"customerPhone" bson:",omitempty"`
	CustomerEmail *string             `json:"customerEmail" bson:",omitempty"`
	CustomerName  *string             `json:"customerName" bson:",omitempty"`
	MerchantID    *string             `json:"merchantId" bson:",omitempty"`
	OrderPayment  *UpdateOrderPayment `json:"orderPayment" bson:",omitempty"`
}

type UpdateThirdPartyTransaction struct {
	UserID                       *primitive.ObjectID                      `json:"userId" bson:",omitempty"`
	SourceEntity                 *TransactionSourceEntity                 `json:"sourceEntity" bson:",omitempty"`
	Amount                       *int                                     `json:"amount" bson:",omitempty"`
	Accumulated                  *bool                                    `json:"accumulated" bson:",omitempty"`
	Remarks                      *string                                  `json:"remarks" bson:",omitempty"`
	ThirdPartyTransactionDetails *UpdateThirdPartyPointTransactionDetails `json:"thirdPartyTransactionDetails" bson:",omitempty"`
}

type UpdateThirdPartyTransactionInput struct {
	OrderID     string                       `json:"orderId"`
	Transaction *UpdateThirdPartyTransaction `json:"transaction"`
}

type UpdateUserBasicsInput struct {
	Name                   *string                 `json:"name" bson:",omitempty"`
	FamilyName             *string                 `json:"familyName" bson:",omitempty"`
	GivenName              *string                 `json:"givenName" bson:",omitempty"`
	Nickname               *string                 `json:"nickname" bson:",omitempty"`
	City                   *SelectionOptionInput   `json:"city" bson:",omitempty"`
	Region                 *SelectionOptionInput   `json:"region" bson:",omitempty"`
	District               *SelectionOptionInput   `json:"district" bson:",omitempty"`
	QuestionnaireOptions   []*SelectionOptionInput `json:"questionnaireOptions" bson:",omitempty"`
	SfLockerCode           *string                 `json:"sfLockerCode" bson:",omitempty"`
	ProfileBackgroundImage *string                 `json:"profileBackgroundImage" bson:",omitempty"`
}

type UpdateUserLevel struct {
	UserID string `json:"userId"`
	Level  int    `json:"level"`
}

type UpdateUserPointsInput struct {
	UserID primitive.ObjectID `json:"userId"`
	Points int                `json:"points"`
}

type UpdateUserRoleInput struct {
	UserID string `json:"userId"`
	Role   int    `json:"role"`
}

type UpdateVoucher struct {
	RedemptionPoint   *int                `json:"redemptionPoint" bson:",omitempty"`
	Name              *string             `json:"name" bson:",omitempty"`
	Description       *string             `json:"description" bson:",omitempty"`
	Terms             *string             `json:"terms" bson:",omitempty"`
	ValidFrom         *primitive.DateTime `json:"validFrom" bson:",omitempty"`
	ValidTo           *primitive.DateTime `json:"validTo" bson:",omitempty"`
	ImageURL          *string             `json:"imageUrl" bson:",omitempty"`
	RetailerAvatarURL *string             `json:"retailerAvatarUrl" bson:",omitempty"`
}

type UpdateVoucherInput struct {
	ID      primitive.ObjectID `json:"id"`
	Voucher *UpdateVoucher     `json:"voucher"`
}

type UpdateVoucherOwnershipStatusInput struct {
	RedemptionCode string        `json:"redemptionCode"`
	Status         VoucherStatus `json:"status"`
}

type UserAuthentication struct {
	UserID       primitive.ObjectID `json:"userId"`
	AccessToken  string             `json:"accessToken"`
	RefreshToken string             `json:"refreshToken"`
	ErrCode      int                `json:"errCode"`
	Msg          string             `json:"msg"`
}

func (UserAuthentication) IsRefreshAccessTokenResult() {}

func (UserAuthentication) IsLoginUserResult() {}

type UserCountInput struct {
	MatchingText         string       `json:"matchingText"`
	MatchingPhoneOrEmail string       `json:"matchingPhoneOrEmail"`
	RoleFilter           *RoleFilter  `json:"roleFilter"`
	LevelFilter          *LevelFilter `json:"levelFilter"`
}

type UserCredentials struct {
	PhoneOrEmail string `json:"phoneOrEmail"`
	Password     string `json:"password"`
}

type UserProfile struct {
	ID                     primitive.ObjectID        `json:"id" bson:"_id"`
	Name                   string                    `json:"name"`
	Nickname               string                    `json:"nickname"`
	Phone                  string                    `json:"phone"`
	Email                  string                    `json:"email"`
	City                   *SelectionOption          `json:"city"`
	Region                 *SelectionOption          `json:"region"`
	District               *SelectionOption          `json:"district"`
	SfLockerCode           string                    `json:"sfLockerCode"`
	QuestionnaireOptions   []*SelectionOption        `json:"questionnaireOptions"`
	Role                   int                       `json:"role"`
	Level                  int                       `json:"level"`
	Points                 int                       `json:"points"`
	RetailerProfile        *RetailerProfile          `json:"retailerProfile"`
	AvatarURL              string                    `json:"avatarUrl"`
	FamilyName             string                    `json:"familyName"`
	GivenName              string                    `json:"givenName"`
	ReferralUserID         *primitive.ObjectID       `json:"referralUserId"`
	DatetimeCreated        string                    `json:"datetimeCreated"`
	FcmRegistrationToken   string                    `json:"fcmRegistrationToken"`
	FcmRegistrationTokens  []*FcmRegistrationToken   `json:"fcmRegistrationTokens"`
	AppleUserID            string                    `json:"appleUserId"`
	GoogleUserID           string                    `json:"googleUserId"`
	FacebookUserID         string                    `json:"facebookUserId"`
	Deactivated            bool                      `json:"deactivated"`
	ProfileBackgroundImage string                    `json:"profileBackgroundImage"`
	AdoptionAgency         AdoptionAgencyQueryResult `json:"adoptionAgency"`
}

func (UserProfile) IsUserProfileQueryResult() {}

type UserProfileWithPassword struct {
	ID          primitive.ObjectID `json:"id" bson:"_id"`
	Password    string             `json:"password"`
	Role        int                `json:"role"`
	Level       int                `json:"level"`
	Deactivated bool               `json:"deactivated"`
}

type UserProfiles struct {
	TotalCount int            `json:"totalCount"`
	Profiles   []*UserProfile `json:"profiles"`
}

func (UserProfiles) IsUserProfilesQueryResult() {}

type UserProfilesInput struct {
	LastID                     primitive.ObjectID          `json:"lastId"`
	PageSize                   int                         `json:"pageSize"`
	PageNumber                 int                         `json:"pageNumber"`
	RoleFilter                 *RoleFilter                 `json:"roleFilter"`
	FcmRegistrationTokenFilter *FcmRegistrationTokenFilter `json:"fcmRegistrationTokenFilter"`
	MatchingPhoneOrEmail       string                      `json:"matchingPhoneOrEmail"`
}

type UsersFilters struct {
	MatchingPhoneOrEmail string `json:"matchingPhoneOrEmail"`
}

type UsersFiltersInput struct {
	MatchingPhoneOrEmail string `json:"matchingPhoneOrEmail"`
}

type VerificationCodeGenerationResult struct {
	ErrCode int    `json:"errCode"`
	Msg     string `json:"msg"`
}

type VoteForCandidate struct {
	CandidateId string `json:"candidateId"`
}

type VotingResult struct {
	NumberOfVotes int  `json:"numberOfVotes"`
	Voted         bool `json:"voted"`
}

type Voucher struct {
	ID                primitive.ObjectID  `json:"id" bson:"_id"`
	RedemptionPoint   int                 `json:"redemptionPoint"`
	CreatedAt         *primitive.DateTime `json:"createdAt"`
	Name              string              `json:"name"`
	Terms             string              `json:"terms"`
	Description       string              `json:"description"`
	ValidFrom         *primitive.DateTime `json:"validFrom"`
	ValidTo           *primitive.DateTime `json:"validTo"`
	ImageURL          string              `json:"imageUrl"`
	RetailerAvatarURL string              `json:"retailerAvatarUrl"`
	Ownership         *VoucherOwnership   `json:"ownership"`
}

func (Voucher) IsVoucherQueryResult() {}

type VoucherOwnership struct {
	ID                           string              `json:"id" bson:"_id"`
	UserID                       primitive.ObjectID  `json:"userId"`
	VoucherID                    primitive.ObjectID  `json:"voucherId"`
	Status                       VoucherStatus       `json:"status"`
	RedemptionCode               string              `json:"redemptionCode"`
	CreatedAt                    *primitive.DateTime `json:"createdAt"`
	RedeemedAt                   *primitive.DateTime `json:"redeemedAt"`
	RedemptionConfirmationUserID *primitive.ObjectID `json:"redemptionConfirmationUserId"`
}

func (VoucherOwnership) IsVoucherOwnershipQueryResult() {}

type Vouchers struct {
	TotalCount int        `json:"totalCount"`
	Items      []*Voucher `json:"items"`
}

func (Vouchers) IsVouchersQueryResult() {}

type VouchersInput struct {
	PageNumber int `json:"pageNumber"`
	PageSize   int `json:"pageSize"`
}

type VouchersWithOwnershipInput struct {
	PageNumber    int            `json:"pageNumber"`
	PageSize      int            `json:"pageSize"`
	VoucherStatus *VoucherStatus `json:"voucherStatus"`
}

type AppPage string

const (
	AppPageEditorialPost   AppPage = "EDITORIAL_POST"
	AppPageRetailerDetails AppPage = "RETAILER_DETAILS"
	AppPageRetailerList    AppPage = "RETAILER_LIST"
	AppPageEventDetails    AppPage = "EVENT_DETAILS"
	AppPageContestDetails  AppPage = "CONTEST_DETAILS"
)

var AllAppPage = []AppPage{
	AppPageEditorialPost,
	AppPageRetailerDetails,
	AppPageRetailerList,
	AppPageEventDetails,
	AppPageContestDetails,
}

func (e AppPage) IsValid() bool {
	switch e {
	case AppPageEditorialPost, AppPageRetailerDetails, AppPageRetailerList, AppPageEventDetails, AppPageContestDetails:
		return true
	}
	return false
}

func (e AppPage) String() string {
	return string(e)
}

func (e *AppPage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppPage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppPage", str)
	}
	return nil
}

func (e AppPage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ApprovalFilter string

const (
	ApprovalFilterApproved   ApprovalFilter = "APPROVED"
	ApprovalFilterUnapproved ApprovalFilter = "UNAPPROVED"
	ApprovalFilterAny        ApprovalFilter = "ANY"
)

var AllApprovalFilter = []ApprovalFilter{
	ApprovalFilterApproved,
	ApprovalFilterUnapproved,
	ApprovalFilterAny,
}

func (e ApprovalFilter) IsValid() bool {
	switch e {
	case ApprovalFilterApproved, ApprovalFilterUnapproved, ApprovalFilterAny:
		return true
	}
	return false
}

func (e ApprovalFilter) String() string {
	return string(e)
}

func (e *ApprovalFilter) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ApprovalFilter(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApprovalFilter", str)
	}
	return nil
}

func (e ApprovalFilter) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GenerateVerificationCodePurpuse string

const (
	GenerateVerificationCodePurpuseRegistration        GenerateVerificationCodePurpuse = "REGISTRATION"
	GenerateVerificationCodePurpuseLogin               GenerateVerificationCodePurpuse = "LOGIN"
	GenerateVerificationCodePurpuseResettingPassword   GenerateVerificationCodePurpuse = "RESETTING_PASSWORD"
	GenerateVerificationCodePurpuseBindingPhoneOrEmail GenerateVerificationCodePurpuse = "BINDING_PHONE_OR_EMAIL"
)

var AllGenerateVerificationCodePurpuse = []GenerateVerificationCodePurpuse{
	GenerateVerificationCodePurpuseRegistration,
	GenerateVerificationCodePurpuseLogin,
	GenerateVerificationCodePurpuseResettingPassword,
	GenerateVerificationCodePurpuseBindingPhoneOrEmail,
}

func (e GenerateVerificationCodePurpuse) IsValid() bool {
	switch e {
	case GenerateVerificationCodePurpuseRegistration, GenerateVerificationCodePurpuseLogin, GenerateVerificationCodePurpuseResettingPassword, GenerateVerificationCodePurpuseBindingPhoneOrEmail:
		return true
	}
	return false
}

func (e GenerateVerificationCodePurpuse) String() string {
	return string(e)
}

func (e *GenerateVerificationCodePurpuse) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GenerateVerificationCodePurpuse(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GenerateVerificationCodePurpuse", str)
	}
	return nil
}

func (e GenerateVerificationCodePurpuse) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobType string

const (
	JobTypePetBirthdayWishesNotification JobType = "PET_BIRTHDAY_WISHES_NOTIFICATION"
	JobTypeCampaignNotification          JobType = "CAMPAIGN_NOTIFICATION"
)

var AllJobType = []JobType{
	JobTypePetBirthdayWishesNotification,
	JobTypeCampaignNotification,
}

func (e JobType) IsValid() bool {
	switch e {
	case JobTypePetBirthdayWishesNotification, JobTypeCampaignNotification:
		return true
	}
	return false
}

func (e JobType) String() string {
	return string(e)
}

func (e *JobType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobType", str)
	}
	return nil
}

func (e JobType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Sex string

const (
	SexF Sex = "F"
	SexM Sex = "M"
)

var AllSex = []Sex{
	SexF,
	SexM,
}

func (e Sex) IsValid() bool {
	switch e {
	case SexF, SexM:
		return true
	}
	return false
}

func (e Sex) String() string {
	return string(e)
}

func (e *Sex) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Sex(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Sex", str)
	}
	return nil
}

func (e Sex) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskParticipationStatus string

const (
	TaskParticipationStatusCompleted   TaskParticipationStatus = "COMPLETED"
	TaskParticipationStatusUncompleted TaskParticipationStatus = "UNCOMPLETED"
)

var AllTaskParticipationStatus = []TaskParticipationStatus{
	TaskParticipationStatusCompleted,
	TaskParticipationStatusUncompleted,
}

func (e TaskParticipationStatus) IsValid() bool {
	switch e {
	case TaskParticipationStatusCompleted, TaskParticipationStatusUncompleted:
		return true
	}
	return false
}

func (e TaskParticipationStatus) String() string {
	return string(e)
}

func (e *TaskParticipationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskParticipationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskParticipationStatus", str)
	}
	return nil
}

func (e TaskParticipationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskStatus string

const (
	TaskStatusNotStarted TaskStatus = "NOT_STARTED"
	TaskStatusOnGoing    TaskStatus = "ON_GOING"
	TaskStatusEnded      TaskStatus = "ENDED"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusNotStarted,
	TaskStatusOnGoing,
	TaskStatusEnded,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusNotStarted, TaskStatusOnGoing, TaskStatusEnded:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskType string

const (
	TaskTypeUserProfileCompletion TaskType = "USER_PROFILE_COMPLETION"
	TaskTypeCustom                TaskType = "CUSTOM"
)

var AllTaskType = []TaskType{
	TaskTypeUserProfileCompletion,
	TaskTypeCustom,
}

func (e TaskType) IsValid() bool {
	switch e {
	case TaskTypeUserProfileCompletion, TaskTypeCustom:
		return true
	}
	return false
}

func (e TaskType) String() string {
	return string(e)
}

func (e *TaskType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskType", str)
	}
	return nil
}

func (e TaskType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransactionSourceEntity string

const (
	TransactionSourceEntityShopline TransactionSourceEntity = "SHOPLINE"
	TransactionSourceEntitySystem   TransactionSourceEntity = "SYSTEM"
)

var AllTransactionSourceEntity = []TransactionSourceEntity{
	TransactionSourceEntityShopline,
	TransactionSourceEntitySystem,
}

func (e TransactionSourceEntity) IsValid() bool {
	switch e {
	case TransactionSourceEntityShopline, TransactionSourceEntitySystem:
		return true
	}
	return false
}

func (e TransactionSourceEntity) String() string {
	return string(e)
}

func (e *TransactionSourceEntity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionSourceEntity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionSourceEntity", str)
	}
	return nil
}

func (e TransactionSourceEntity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransactionType string

const (
	TransactionTypeIncome   TransactionType = "INCOME"
	TransactionTypeExpense  TransactionType = "EXPENSE"
	TransactionTypeTransfer TransactionType = "TRANSFER"
)

var AllTransactionType = []TransactionType{
	TransactionTypeIncome,
	TransactionTypeExpense,
	TransactionTypeTransfer,
}

func (e TransactionType) IsValid() bool {
	switch e {
	case TransactionTypeIncome, TransactionTypeExpense, TransactionTypeTransfer:
		return true
	}
	return false
}

func (e TransactionType) String() string {
	return string(e)
}

func (e *TransactionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionType", str)
	}
	return nil
}

func (e TransactionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VoucherStatus string

const (
	VoucherStatusRedeemable VoucherStatus = "REDEEMABLE"
	VoucherStatusRedeemed   VoucherStatus = "REDEEMED"
	VoucherStatusExpired    VoucherStatus = "EXPIRED"
	VoucherStatusInvalid    VoucherStatus = "INVALID"
)

var AllVoucherStatus = []VoucherStatus{
	VoucherStatusRedeemable,
	VoucherStatusRedeemed,
	VoucherStatusExpired,
	VoucherStatusInvalid,
}

func (e VoucherStatus) IsValid() bool {
	switch e {
	case VoucherStatusRedeemable, VoucherStatusRedeemed, VoucherStatusExpired, VoucherStatusInvalid:
		return true
	}
	return false
}

func (e VoucherStatus) String() string {
	return string(e)
}

func (e *VoucherStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VoucherStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VoucherStatus", str)
	}
	return nil
}

func (e VoucherStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
