// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

type AdoptionAdQueryResult interface {
	IsAdoptionAdQueryResult()
}

type AdoptionAdsQueryResult interface {
	IsAdoptionAdsQueryResult()
}

type AdoptionAgenciesQueryResult interface {
	IsAdoptionAgenciesQueryResult()
}

type AdoptionAgencyQueryResult interface {
	IsAdoptionAgencyQueryResult()
}

type AppConfigQueryResult interface {
	IsAppConfigQueryResult()
}

type AuthorizedOperationUserQueryResult interface {
	IsAuthorizedOperationUserQueryResult()
}

type AuthorizedOperationUsersQueryResult interface {
	IsAuthorizedOperationUsersQueryResult()
}

type BannersQueryResult interface {
	IsBannersQueryResult()
}

type CheckInCounterQueryResult interface {
	IsCheckInCounterQueryResult()
}

type CheckInCountersQueryResult interface {
	IsCheckInCountersQueryResult()
}

type CheckInRecordQueryResult interface {
	IsCheckInRecordQueryResult()
}

type CheckInRecordsQueryResult interface {
	IsCheckInRecordsQueryResult()
}

type CommentQueryResult interface {
	IsCommentQueryResult()
}

type CommentsByPetsQueryResult interface {
	IsCommentsByPetsQueryResult()
}

type CommentsByUsersQueryResult interface {
	IsCommentsByUsersQueryResult()
}

type CommentsQueryResult interface {
	IsCommentsQueryResult()
}

type CreateEventParticipationResult interface {
	IsCreateEventParticipationResult()
}

type CreatePaymentIntentResult interface {
	IsCreatePaymentIntentResult()
}

type CreateRetailerResult interface {
	IsCreateRetailerResult()
}

type CreateUserAltResult interface {
	IsCreateUserAltResult()
}

type CSVFileExportResult interface {
	IsCSVFileExportResult()
}

type EventInvitationQueryResult interface {
	IsEventInvitationQueryResult()
}

type EventInvitationsQueryResult interface {
	IsEventInvitationsQueryResult()
}

type EventParticipationCountQueryResult interface {
	IsEventParticipationCountQueryResult()
}

type EventParticipationQueryResult interface {
	IsEventParticipationQueryResult()
}

type EventParticipationsQueryResult interface {
	IsEventParticipationsQueryResult()
}

type EventQueryResult interface {
	IsEventQueryResult()
}

type EventsQueryResult interface {
	IsEventsQueryResult()
}

type JobsResult interface {
	IsJobsResult()
}

type LoginUserResult interface {
	IsLoginUserResult()
}

type Order interface {
	IsOrder()
	GetID() primitive.ObjectID
	GetName() string
	GetUserID() primitive.ObjectID
	GetUser() UserProfileQueryResult
	GetOperationUserID() *primitive.ObjectID
	GetStatus() OrderStatus
	GetAmount() int
	GetStripePaymentIntent() *PaymentIntent
	GetBbmslReference() *BbmslReference
	GetCreatedAt() primitive.DateTime
	GetUpdatedAt() primitive.DateTime
}

type PetProfilesQueryResult interface {
	IsPetProfilesQueryResult()
}

type PetQueryResult interface {
	IsPetQueryResult()
}

type PointTransactionQueryResult interface {
	IsPointTransactionQueryResult()
}

type PointTransactionsQueryResult interface {
	IsPointTransactionsQueryResult()
}

type ProductQueryResult interface {
	IsProductQueryResult()
}

type ProductsQueryResult interface {
	IsProductsQueryResult()
}

type ProgramOrderQueryResult interface {
	IsProgramOrderQueryResult()
}

type ProgramOrdersQueryResult interface {
	IsProgramOrdersQueryResult()
}

type ProgramQueryResult interface {
	IsProgramQueryResult()
}

type ProgramsQueryResult interface {
	IsProgramsQueryResult()
}

type RefreshAccessTokenResult interface {
	IsRefreshAccessTokenResult()
}

type ResetUserPasswordResult interface {
	IsResetUserPasswordResult()
}

type RetailersQueryResult interface {
	IsRetailersQueryResult()
}

type TasksQueryResult interface {
	IsTasksQueryResult()
}

type TransactionDetails interface {
	IsTransactionDetails()
}

type UpdateProgramOrderResult interface {
	IsUpdateProgramOrderResult()
}

type UserAuthenticationResult interface {
	IsUserAuthenticationResult()
}

type UserProfileQueryResult interface {
	IsUserProfileQueryResult()
}

type UserProfilesQueryResult interface {
	IsUserProfilesQueryResult()
}

type VoucherOwnershipQueryResult interface {
	IsVoucherOwnershipQueryResult()
}

type VoucherOwnershipsQueryResult interface {
	IsVoucherOwnershipsQueryResult()
}

type VoucherQueryResult interface {
	IsVoucherQueryResult()
}

type VouchersQueryResult interface {
	IsVouchersQueryResult()
}

type ActiveContest struct {
	Contest *Contest `json:"contest"`
}

type AdditionalParticipantPricing struct {
	MaxParticipants   int64     `json:"maxParticipants"`
	Price             int64     `json:"price"`
	PriceLabel        *string   `json:"priceLabel,omitempty"`
	Currency          *Currency `json:"currency,omitempty"`
	MaxCash           *int64    `json:"maxCash,omitempty"`
	MinCash           *int64    `json:"minCash,omitempty"`
	MaxPoints         *int64    `json:"maxPoints,omitempty"`
	PointsCashRatio   *float64  `json:"pointsCashRatio,omitempty"`
	ExtraPoints       int64     `json:"extraPoints"`
	Points            int64     `json:"points"`
	PointsRewardRatio *float64  `json:"pointsRewardRatio,omitempty"`
}

type AdditionalPetPricing struct {
	MaxPets           int64     `json:"maxPets"`
	Price             int64     `json:"price"`
	PriceLabel        *string   `json:"priceLabel,omitempty"`
	Currency          *Currency `json:"currency,omitempty"`
	MaxCash           *int64    `json:"maxCash,omitempty"`
	MinCash           *int64    `json:"minCash,omitempty"`
	MaxPoints         *int64    `json:"maxPoints,omitempty"`
	PointsCashRatio   *float64  `json:"pointsCashRatio,omitempty"`
	ExtraPoints       int64     `json:"extraPoints"`
	Points            int64     `json:"points"`
	PointsRewardRatio *float64  `json:"pointsRewardRatio,omitempty"`
}

type AdoptionActivity struct {
	Details   string   `json:"details"`
	PhotoUrls []string `json:"photoUrls"`
}

type AdoptionActivityInput struct {
	Details   string   `json:"details"`
	PhotoUrls []string `json:"photoUrls"`
}

type AdoptionAd struct {
	ID        primitive.ObjectID `json:"id" bson:"_id"`
	AgencyID  primitive.ObjectID `json:"agencyId"`
	PetName   string             `json:"petName"`
	Sex       Sex                `json:"sex"`
	PetAge    string             `json:"petAge"`
	Breed     *SelectionOption   `json:"breed,omitempty"`
	PhotoUrls []string           `json:"photoUrls"`
	Remarks   string             `json:"remarks"`
	CreatedAt primitive.DateTime `json:"createdAt"`
	UpdatedAt primitive.DateTime `json:"updatedAt"`
	Hidden    bool               `json:"hidden"`
	Adopted   bool               `json:"adopted"`
}

func (AdoptionAd) IsAdoptionAdQueryResult() {}

type AdoptionAds struct {
	TotalCount int           `json:"totalCount"`
	Items      []*AdoptionAd `json:"items"`
}

func (AdoptionAds) IsAdoptionAdsQueryResult() {}

type AdoptionAdsInput struct {
	AgencyID primitive.ObjectID    `json:"agencyId"`
	Breed    *SelectionOptionInput `json:"breed,omitempty"`
}

type AdoptionAgencies struct {
	TotalCount int               `json:"totalCount"`
	Items      []*AdoptionAgency `json:"items"`
}

func (AdoptionAgencies) IsAdoptionAgenciesQueryResult() {}

type AdoptionAgenciesInput struct {
	PageNumber        int                `json:"pageNumber"`
	PageSize          int                `json:"pageSize"`
	DatetimeFilter    *DatetimeFilter    `json:"datetimeFilter,omitempty"`
	TerritoriesFilter *TerritoriesFilter `json:"territoriesFilter,omitempty"`
	Recommended       *bool              `json:"recommended,omitempty"`
	Approved          *bool              `json:"approved,omitempty"`
	ApprovalFilter    *AppvalStatus      `json:"approvalFilter,omitempty"`
	UserID            primitive.ObjectID `json:"userId"`
}

type AdoptionAgency struct {
	ID             primitive.ObjectID     `json:"id" bson:"_id"`
	UserID         primitive.ObjectID     `json:"userId"`
	Name           string                 `json:"name"`
	AvatarURL      string                 `json:"avatarUrl"`
	Phone          string                 `json:"phone"`
	Address        string                 `json:"address"`
	GeoLocation    *GeoLocation           `json:"geoLocation,omitempty"`
	WebsiteURL     string                 `json:"websiteUrl"`
	PhotoUrls      []string               `json:"photoUrls"`
	Introduction   string                 `json:"introduction"`
	Activity       *AdoptionActivity      `json:"activity,omitempty"`
	DonationMethod *DonationMethod        `json:"donationMethod,omitempty"`
	CreatedAt      primitive.DateTime     `json:"createdAt"`
	UpdatedAt      primitive.DateTime     `json:"updatedAt"`
	Ads            AdoptionAdsQueryResult `json:"ads"`
	Approved       bool                   `json:"approved"`
}

func (AdoptionAgency) IsAdoptionAgencyQueryResult() {}

type AppConfig struct {
	Version    string             `json:"version"`
	Language   Language           `json:"language"`
	Categories []*SelectOption    `json:"categories,omitempty"`
	Scores     []*SelectionOption `json:"scores,omitempty"`
	Breeds     []*SelectOption    `json:"breeds,omitempty"`
}

func (AppConfig) IsAppConfigQueryResult() {}

type AppConfigInput struct {
	Version  string   `json:"version"`
	Language Language `json:"language"`
}

type AppVersionInfo struct {
	Name                   string `json:"name"`
	LatestReleasedVersion  string `json:"latestReleasedVersion"`
	LowestSupportedVersion string `json:"lowestSupportedVersion"`
	Details                string `json:"details"`
	DetailsURL             string `json:"detailsUrl"`
}

type AuthorizedOperationUser struct {
	UserID    primitive.ObjectID `json:"userId"`
	User      *UserProfile       `json:"user"`
	CreatedAt primitive.DateTime `json:"createdAt"`
	UpdatedAt primitive.DateTime `json:"updatedAt"`
}

func (AuthorizedOperationUser) IsAuthorizedOperationUserQueryResult() {}

type AuthorizedOperationUserInput struct {
	ID     *primitive.ObjectID `json:"id,omitempty"`
	UserID *primitive.ObjectID `json:"userId,omitempty"`
}

type AuthorizedOperationUsers struct {
	TotalCount int64                      `json:"totalCount"`
	Items      []*AuthorizedOperationUser `json:"items"`
}

func (AuthorizedOperationUsers) IsAuthorizedOperationUsersQueryResult() {}

type AuthorizedOperationUsersInput struct {
	PageSize   int `json:"pageSize"`
	PageNumber int `json:"pageNumber"`
}

type Banner struct {
	ID            primitive.ObjectID `json:"id" bson:"_id"`
	Name          string             `json:"name"`
	ImageURL      string             `json:"imageUrl"`
	PopupImageURL string             `json:"popupImageUrl"`
	AppPage       AppPage            `json:"appPage"`
	PageParams    string             `json:"pageParams"`
	DisplayPage   BannerDisplayPage  `json:"displayPage"`
	Visible       bool               `json:"visible"`
	CreatedAt     primitive.DateTime `json:"createdAt"`
	UpdatedAt     primitive.DateTime `json:"updatedAt"`
}

type Banners struct {
	TotalCount int       `json:"totalCount"`
	Items      []*Banner `json:"items"`
}

func (Banners) IsBannersQueryResult() {}

type BannersInput struct {
	Visible     *bool              `json:"visible,omitempty" bson:",omitempty"`
	DisplayPage *BannerDisplayPage `json:"displayPage,omitempty" bson:",omitempty"`
}

type BbmslOrder struct {
	ID                int    `json:"id"`
	MerchantID        int    `json:"merchantId"`
	MerchantReference string `json:"merchantReference"`
	Currency          string `json:"currency"`
	Amount            int    `json:"amount"`
	NetAmount         int    `json:"netAmount"`
	CreateTime        string `json:"createTime"`
	UpdateTime        string `json:"updateTime"`
	Status            string `json:"status"`
	Recurring         bool   `json:"recurring"`
}

type BbmslReference struct {
	CheckoutURL string      `json:"checkoutUrl"`
	Order       *BbmslOrder `json:"order"`
}

type BindPhoneOrEmailInput struct {
	PhoneOrEmail     string `json:"phoneOrEmail"`
	VerificationCode string `json:"verificationCode"`
}

type BlockMomentInput struct {
	BlockedUserId string `json:"blockedUserId"`
	Period        int    `json:"period"`
}

type BreedsFilter struct {
	Names []string `json:"names"`
}

type CandidateFilter struct {
	EnrollmentStatus int    `json:"enrollment_status"`
	MatchingText     string `json:"matchingText"`
}

type CategoriesFilter struct {
	Categories []*CategoryFilter `json:"categories"`
}

type CategoryFilter struct {
	Option     *SelectionOptionInput   `json:"option"`
	SubOptions []*SelectionOptionInput `json:"subOptions,omitempty"`
}

type CheckInCounter struct {
	ID                    primitive.ObjectID        `json:"id" bson:"_id"`
	ProductID             primitive.ObjectID        `json:"productId"`
	ProductName           string                    `json:"productName"`
	Name                  string                    `json:"name"`
	Greetings             string                    `json:"greetings"`
	QRCodeURL             string                    `json:"qrCodeUrl"`
	Points                int64                     `json:"points"`
	CreatedAt             *primitive.DateTime       `json:"createdAt,omitempty"`
	ValidTo               *primitive.DateTime       `json:"validTo,omitempty"`
	ValidFrom             *primitive.DateTime       `json:"validFrom,omitempty"`
	GeoLocationConstraint *GeoLocationConstraint    `json:"geoLocationConstraint,omitempty"`
	Record                *CheckInRecord            `json:"record,omitempty"`
	Records               CheckInRecordsQueryResult `json:"records,omitempty"`
}

func (CheckInCounter) IsCheckInCounterQueryResult() {}

type CheckInCounters struct {
	TotalCount int               `json:"totalCount"`
	Items      []*CheckInCounter `json:"items"`
}

func (CheckInCounters) IsCheckInCountersQueryResult() {}

type CheckInCountersInput struct {
	PageNumber       int                  `json:"pageNumber"`
	PageSize         int                  `json:"pageSize"`
	GeoFilter        *GeoFilter           `json:"geoFilter,omitempty"`
	CounterIdsFilter []primitive.ObjectID `json:"counterIdsFilter,omitempty"`
}

type CheckInInput struct {
	CounterID   primitive.ObjectID `json:"counterId"`
	GeoLocation *GeoLocationInput  `json:"geoLocation,omitempty"`
}

type CheckInRecord struct {
	ID          primitive.ObjectID  `json:"id" bson:"_id"`
	UserID      primitive.ObjectID  `json:"userId"`
	ProductID   primitive.ObjectID  `json:"productId"`
	CounterID   primitive.ObjectID  `json:"counterId"`
	GeoLocation *GeoLocation        `json:"geoLocation,omitempty"`
	CreatedAt   *primitive.DateTime `json:"createdAt,omitempty"`
}

func (CheckInRecord) IsCheckInRecordQueryResult() {}

type CheckInRecords struct {
	TotalCount int              `json:"totalCount"`
	Items      []*CheckInRecord `json:"items"`
}

func (CheckInRecords) IsCheckInRecordsQueryResult() {}

type CheckInRecordsCommonFilter struct {
	UserID    *primitive.ObjectID `json:"userId,omitempty" bson:",omitempty"`
	ProductID *primitive.ObjectID `json:"productId,omitempty" bson:",omitempty"`
	CounterID *primitive.ObjectID `json:"counterId,omitempty" bson:",omitempty"`
}

type CheckInRecordsInput struct {
	PageNumber   int                         `json:"pageNumber"`
	PageSize     int                         `json:"pageSize"`
	CommonFilter *CheckInRecordsCommonFilter `json:"commonFilter"`
}

type Comment struct {
	ID                     string                  `json:"id" bson:"_id"`
	PetID                  primitive.ObjectID      `json:"petId"`
	Pet                    PetQueryResult          `json:"pet"`
	UserID                 primitive.ObjectID      `json:"userId"`
	RetailerUserID         *primitive.ObjectID     `json:"retailerUserId,omitempty"`
	ProductID              *primitive.ObjectID     `json:"productId,omitempty"`
	Title                  string                  `json:"title"`
	CoverURL               string                  `json:"coverUrl"`
	Details                string                  `json:"details"`
	PictureUrls            []string                `json:"pictureUrls"`
	Photos                 []*Photo                `json:"photos,omitempty"`
	Score                  int                     `json:"score"`
	AverageScore           float64                 `json:"averageScore"`
	Scores                 []*ReviewScoreOption    `json:"scores,omitempty"`
	Approved               bool                    `json:"approved"`
	Recommended            bool                    `json:"recommended"`
	CreatedAt              primitive.DateTime      `json:"createdAt"`
	CommentatorCertificate *CommentatorCertificate `json:"commentatorCertificate,omitempty"`
	RetailerProfile        *RetailerProfile        `json:"retailerProfile,omitempty"`
	User                   UserProfileQueryResult  `json:"user"`
}

func (Comment) IsCommentQueryResult() {}

type CommentatorCertificate struct {
	Phone                string             `json:"phone"`
	Name                 string             `json:"name"`
	SnsPlatformName      string             `json:"snsPlatformName"`
	SnsPlatformSelection *SelectionOption   `json:"snsPlatformSelection,omitempty"`
	AvatarURL            string             `json:"avatarUrl"`
	Level                int                `json:"level"`
	Status               int                `json:"status"`
	DatetimeCreated      primitive.DateTime `json:"datetimeCreated"`
}

type CommentatorCertificateCommonFilter struct {
	Approved *bool   `json:"approved,omitempty" bson:",omitempty"`
	Name     *string `json:"name,omitempty" bson:",omitempty"`
}

type CommentatorCertificateStatusFilter struct {
	Option int `json:"option"`
}

type CommentatorCertificates struct {
	Certificates []*CommentatorCertificate `json:"certificates"`
	TotalCount   int                       `json:"totalCount"`
}

type CommentatorCertificatesInput struct {
	PageNumber   int                                 `json:"pageNumber"`
	PageSize     int                                 `json:"pageSize"`
	StatusFilter *CommentatorCertificateStatusFilter `json:"statusFilter,omitempty"`
}

type Comments struct {
	Items      []*Comment `json:"items"`
	TotalCount int        `json:"totalCount"`
}

func (Comments) IsCommentsQueryResult() {}

type CommentsByPet struct {
	PetID primitive.ObjectID `json:"petId" bson:"_id"`
	Pet   PetQueryResult     `json:"pet"`
	Count int64              `json:"count"`
}

type CommentsByPets struct {
	TotalCount int              `json:"totalCount"`
	Items      []*CommentsByPet `json:"items,omitempty"`
}

func (CommentsByPets) IsCommentsByPetsQueryResult() {}

type CommentsByPetsInput struct {
	PageNumber                         int64                               `json:"pageNumber"`
	PageSize                           int64                               `json:"pageSize"`
	DatesFilter                        *DatesFilterInput                   `json:"datesFilter,omitempty"`
	CommentatorCertificateCommonFilter *CommentatorCertificateCommonFilter `json:"commentatorCertificateCommonFilter"`
}

type CommentsByUser struct {
	UserID primitive.ObjectID     `json:"userId" bson:"_id"`
	User   UserProfileQueryResult `json:"user"`
	Count  int64                  `json:"count"`
}

type CommentsByUsers struct {
	TotalCount int               `json:"totalCount"`
	Items      []*CommentsByUser `json:"items,omitempty"`
}

func (CommentsByUsers) IsCommentsByUsersQueryResult() {}

type CommentsByUsersInput struct {
	PageNumber  int64             `json:"pageNumber"`
	PageSize    int64             `json:"pageSize"`
	DatesFilter *DatesFilterInput `json:"datesFilter,omitempty"`
}

type CommentsCommonFilter struct {
	Approved       *bool               `json:"approved,omitempty" bson:",omitempty"`
	Recommended    *bool               `json:"recommended,omitempty" bson:",omitempty"`
	UserID         *primitive.ObjectID `json:"userId,omitempty" bson:",omitempty"`
	PetID          *primitive.ObjectID `json:"petId,omitempty" bson:",omitempty"`
	RetailerUserID *primitive.ObjectID `json:"retailerUserId,omitempty" bson:",omitempty"`
	ProductID      *primitive.ObjectID `json:"productId,omitempty" bson:",omitempty"`
}

type CommentsInput struct {
	PageNumber              int64                 `json:"pageNumber"`
	PageSize                int64                 `json:"pageSize"`
	MatchingRetailerName    string                `json:"matchingRetailerName"`
	MatchingCommentatorName string                `json:"matchingCommentatorName"`
	DatesFilter             *DatesFilterInput     `json:"datesFilter,omitempty"`
	CommonFilter            *CommentsCommonFilter `json:"commonFilter"`
}

type CommonEventFilter struct {
	UserID            *primitive.ObjectID `json:"userId,omitempty" bson:",omitempty"`
	Recommended       *bool               `json:"recommended,omitempty" bson:",omitempty"`
	Approved          *bool               `json:"approved,omitempty" bson:",omitempty"`
	Published         *bool               `json:"published,omitempty" bson:",omitempty"`
	ParticipationOpen *bool               `json:"participationOpen,omitempty" bson:",omitempty"`
	Online            *bool               `json:"online,omitempty" bson:",omitempty"`
	Status            *EventStatus        `json:"status,omitempty" bson:",omitempty"`
	Type              *EventType          `json:"type,omitempty" bson:",omitempty"`
}

type CommonProductFilter struct {
	UserID      *primitive.ObjectID `json:"userId,omitempty" bson:",omitempty"`
	Recommended *bool               `json:"recommended,omitempty" bson:",omitempty"`
	Available   *bool               `json:"available,omitempty" bson:",omitempty"`
	Online      *bool               `json:"online,omitempty" bson:",omitempty"`
	Type        *ProductType        `json:"type,omitempty" bson:",omitempty"`
}

type ContactInfo struct {
	Name       string `json:"name"`
	Email      string `json:"email"`
	Phone      string `json:"phone"`
	Address    string `json:"address"`
	SnsAccount string `json:"snsAccount"`
	Remarks    string `json:"remarks"`
}

type Contest struct {
	Id        string `json:"id"`
	Name      string `json:"name"`
	StartDate string `json:"startDate"`
	EndDate   string `json:"endDate"`
	PosterUrl string `json:"posterUrl"`
	Active    bool   `json:"active"`
}

type ContestCandidate struct {
	Id                 string             `json:"id"`
	UserId             string             `json:"userId"`
	ContestId          string             `json:"contestId"`
	PetId              string             `json:"petId"`
	PetName            string             `json:"petName"`
	PetOwnerName       string             `json:"petOwnerName"`
	PetOwnerPhone      string             `json:"petOwnerPhone"`
	PetPhotoUrl        string             `json:"petPhotoUrl"`
	PetSnsUrl          string             `json:"petSnsUrl"`
	VotingResult       *VotingResult      `json:"votingResult,omitempty"`
	Enrollment         *ContestEnrollment `json:"enrollment,omitempty"`
	Sequence           int                `json:"sequence"`
	ExtraNumberOfVotes int                `json:"extraNumberOfVotes"`
	Position           int                `json:"position"`
}

type ContestCandidates struct {
	Candidates []*ContestCandidate `json:"candidates"`
}

type ContestEnrollment struct {
	Status int    `json:"status"`
	Msg    string `json:"msg"`
}

type ContestEnrollmentInput struct {
	Status int    `json:"status"`
	Msg    string `json:"msg"`
}

type Contests struct {
	Contests []*Contest `json:"contests"`
}

type CreateAuthorizedOperationUserInput struct {
	UserID primitive.ObjectID `json:"userId"`
}

type CreateCommentInput struct {
	PetID          *primitive.ObjectID        `json:"petId,omitempty" bson:",omitempty"`
	RetailerUserID *primitive.ObjectID        `json:"retailerUserId,omitempty" bson:",omitempty"`
	ProductID      *primitive.ObjectID        `json:"productId,omitempty" bson:",omitempty"`
	Title          string                     `json:"title"`
	CoverURL       *string                    `json:"coverUrl,omitempty" bson:",omitempty"`
	Details        string                     `json:"details"`
	PictureUrls    []string                   `json:"pictureUrls,omitempty" bson:",omitempty"`
	Photos         []*UpdatePhoto             `json:"photos,omitempty" bson:",omitempty"`
	AverageScore   *float64                   `json:"averageScore,omitempty" bson:",omitempty"`
	Scores         []*UpdateReviewScoreOption `json:"scores,omitempty" bson:",omitempty"`
}

type CreateCommentatorCertificateInput struct {
	PetID                primitive.ObjectID    `json:"petId"`
	Phone                string                `json:"phone"`
	Name                 string                `json:"name"`
	SnsPlatformName      string                `json:"snsPlatformName"`
	SnsPlatformSelection *SelectionOptionInput `json:"snsPlatformSelection"`
	AvatarURL            string                `json:"avatarUrl"`
}

type CreateEventInvitationInput struct {
	EventID   *primitive.ObjectID `json:"eventId,omitempty" bson:",omitempty"`
	StartedAt *primitive.DateTime `json:"startedAt,omitempty" bson:",omitempty"`
	EndedAt   *primitive.DateTime `json:"endedAt,omitempty" bson:",omitempty"`
}

type CreateEventInvitationsInput struct {
	Invitation *CreateEventInvitationInput `json:"invitation"`
	Count      int                         `json:"count"`
}

type CreateEventParticipationInput struct {
	EventID                     primitive.ObjectID        `json:"eventId"`
	StartedAt                   primitive.DateTime        `json:"startedAt"`
	EndedAt                     primitive.DateTime        `json:"endedAt"`
	PackagesCount               int64                     `json:"packagesCount"`
	AdditionalParticipantsCount int64                     `json:"additionalParticipantsCount"`
	AdditionalPetsCount         int64                     `json:"additionalPetsCount"`
	PackageParticipants         []*UpdateEventParticipant `json:"packageParticipants,omitempty" bson:",omitempty"`
	PackagePets                 []*UpdateEventPet         `json:"packagePets,omitempty" bson:",omitempty"`
	AdditionalParticipants      []*UpdateEventParticipant `json:"additionalParticipants,omitempty" bson:",omitempty"`
	AdditionalPets              []*UpdateEventPet         `json:"additionalPets,omitempty" bson:",omitempty"`
}

type CreateEventTicket struct {
	EventID         primitive.ObjectID `json:"eventId"`
	StartedAt       primitive.DateTime `json:"startedAt"`
	EndedAt         primitive.DateTime `json:"endedAt"`
	Type            EventTicketType    `json:"type"`
	ParticipationID primitive.ObjectID `json:"participationId"`
	UserID          primitive.ObjectID `json:"userId"`
}

type CreateEventTicketsInput struct {
	Count  int64              `json:"count"`
	Ticket *CreateEventTicket `json:"ticket"`
}

type CreateOrderInput struct {
	ProductID    primitive.ObjectID `json:"productId"`
	ProductCount int64              `json:"productCount"`
	Products     []*UpdateProduct   `json:"products,omitempty" bson:",omitempty"`
}

type CreatePaymentIntentInput struct {
	OrderID         primitive.ObjectID `json:"orderId"`
	OrderType       OrderType          `json:"orderType"`
	Currency        Currency           `json:"currency"`
	DeductingPoints int64              `json:"deductingPoints"`
	Remarks         string             `json:"remarks"`
	Channel         PaymentChannel     `json:"channel"`
}

type CreatePetBodyMeasurementsInput struct {
	PetID  primitive.ObjectID `json:"petId"`
	Weight float64            `json:"weight"`
	Back   float64            `json:"back"`
	Chest  float64            `json:"chest"`
	Neck   float64            `json:"neck"`
	Waist  *float64           `json:"waist,omitempty" bson:",omitempty"`
}

type CreatePetInsuranceInput struct {
	PetID              primitive.ObjectID `json:"petId"`
	CompanyName        string             `json:"companyName"`
	AdvisorPhoneNumber string             `json:"advisorPhoneNumber"`
	EffectiveFrom      primitive.DateTime `json:"effectiveFrom"`
	ValidTo            primitive.DateTime `json:"validTo"`
	NotifiedDaysAhead  int                `json:"notifiedDaysAhead"`
	NotificationOn     bool               `json:"notificationOn"`
}

type CreatePetPawMeasurementsInput struct {
	PetID          primitive.ObjectID `json:"petId"`
	Width          float64            `json:"width"`
	Length         float64            `json:"length"`
	ShoulderHeight *float64           `json:"shoulderHeight,omitempty" bson:",omitempty"`
	BackLegHeight  *float64           `json:"backLegHeight,omitempty" bson:",omitempty"`
}

type CreatePetProfileInput struct {
	AvatarURL          *string               `json:"avatarUrl,omitempty" bson:",omitempty"`
	IDPhotoURL         *string               `json:"idPhotoUrl,omitempty" bson:",omitempty"`
	IDCardURL          *string               `json:"idCardUrl,omitempty" bson:",omitempty"`
	IDCardBgRmdURL     *string               `json:"idCardBgRmdUrl,omitempty" bson:",omitempty"`
	Name               *string               `json:"name,omitempty" bson:",omitempty"`
	NameZh             *string               `json:"nameZh,omitempty" bson:",omitempty"`
	NameEn             *string               `json:"nameEn,omitempty" bson:",omitempty"`
	Birthday           *primitive.DateTime   `json:"birthday,omitempty" bson:",omitempty"`
	DepartureDate      *primitive.DateTime   `json:"departureDate,omitempty"`
	BreedName          *string               `json:"breedName,omitempty" bson:",omitempty"`
	Breed              *SelectionOptionInput `json:"breed,omitempty" bson:",omitempty"`
	PetOwnerSnsAccount *string               `json:"petOwnerSnsAccount,omitempty" bson:",omitempty"`
	Sex                *Sex                  `json:"sex,omitempty" bson:",omitempty"`
	HomeArrivalDate    *string               `json:"homeArrivalDate,omitempty" bson:",omitempty"`
}

type CreatePetVaxInput struct {
	PetID               primitive.ObjectID `json:"petId"`
	VaxName             string             `json:"vaxName"`
	Clinic              string             `json:"clinic"`
	VaxxedDate          primitive.DateTime `json:"vaxxedDate"`
	ImmunityLastingUtil primitive.DateTime `json:"immunityLastingUtil"`
	NotifiedDaysAhead   int                `json:"notifiedDaysAhead"`
	NotificationOn      bool               `json:"notificationOn"`
}

type CreateProgramOrderInput struct {
	ProgramID primitive.ObjectID `json:"programId"`
}

type CreateRetailerInput struct {
	User            *CreateUserInput       `json:"user"`
	RetailerProfile *UpdateRetailerProfile `json:"retailerProfile"`
}

type CreateTaskParticipationInput struct {
	TaskID primitive.ObjectID `json:"taskId"`
}

type CreateUserInput struct {
	PhoneOrEmail     string              `json:"phoneOrEmail"`
	Password         string              `json:"password"`
	VerificationCode string              `json:"verificationCode"`
	Name             *string             `json:"name,omitempty" bson:",omitempty"`
	ReferralCode     *string             `json:"referralCode,omitempty" bson:",omitempty"`
	ReferralUserID   *primitive.ObjectID `json:"referralUserId,omitempty" bson:",omitempty"`
}

type CreateUserWithPhoneAndEmailInput struct {
	Email                 string              `json:"email"`
	Phone                 string              `json:"phone"`
	Password              string              `json:"password"`
	EmailVerificationCode string              `json:"emailVerificationCode"`
	PhoneVerificationCode string              `json:"phoneVerificationCode"`
	Name                  *string             `json:"name,omitempty" bson:",omitempty"`
	ReferralCode          *string             `json:"referralCode,omitempty" bson:",omitempty"`
	ReferralUserID        *primitive.ObjectID `json:"referralUserId,omitempty" bson:",omitempty"`
}

type CreateUsersBatchInput struct {
	Emails   []string `json:"emails"`
	Password string   `json:"password"`
}

type CreateVoucherOwnershipInput struct {
	VoucherID   primitive.ObjectID `json:"voucherId"`
	ContactInfo *UpdateContactInfo `json:"contactInfo,omitempty"`
}

type CreateVoucherOwnershipsInput struct {
	VoucherID primitive.ObjectID   `json:"voucherId"`
	Status    VoucherStatus        `json:"status"`
	UserIds   []primitive.ObjectID `json:"userIds"`
}

type CSVFileExport struct {
	Filename    string `json:"filename"`
	Content     string `json:"content"`
	DownloadURL string `json:"downloadUrl"`
}

func (CSVFileExport) IsCSVFileExportResult() {}

type CSVFileExportInput struct {
	Filename      string   `json:"filename"`
	Query         string   `json:"query"`
	Variables     string   `json:"variables"`
	FieldBasePath string   `json:"fieldBasePath"`
	Fields        []*Field `json:"fields"`
}

type DatesFilter struct {
	Before primitive.DateTime `json:"before"`
	After  primitive.DateTime `json:"after"`
}

type DatesFilterInput struct {
	Before *primitive.DateTime `json:"before,omitempty"`
	After  *primitive.DateTime `json:"after,omitempty"`
}

type DatetimeFilter struct {
	StartedAt primitive.DateTime `json:"startedAt"`
	EndedAt   primitive.DateTime `json:"endedAt"`
}

type DatetimeRangeFilter struct {
	StartedBefore *primitive.DateTime `json:"startedBefore,omitempty"`
	StartedAfter  *primitive.DateTime `json:"startedAfter,omitempty"`
	EndedBefore   *primitive.DateTime `json:"endedBefore,omitempty"`
	EndedAfter    *primitive.DateTime `json:"endedAfter,omitempty"`
}

type DeleteFcmRegistrationTokenInput struct {
	UserID primitive.ObjectID `json:"userId"`
	UUID   string             `json:"uuid"`
	Token  string             `json:"token"`
}

type DeletePetBodyMeasurementsInput struct {
	ID    primitive.ObjectID `json:"id"`
	PetID primitive.ObjectID `json:"petId"`
}

type DeletePetInsuranceInput struct {
	ID    primitive.ObjectID `json:"id"`
	PetID primitive.ObjectID `json:"petId"`
}

type DeletePetPawMeasurementsInput struct {
	ID    primitive.ObjectID `json:"id"`
	PetID primitive.ObjectID `json:"petId"`
}

type DeletePetVaxInput struct {
	ID    primitive.ObjectID `json:"id"`
	PetID primitive.ObjectID `json:"petId"`
}

type DonationMethod struct {
	Details   string   `json:"details"`
	PhotoUrls []string `json:"photoUrls"`
}

type DonationMethodInput struct {
	Details   string   `json:"details"`
	PhotoUrls []string `json:"photoUrls"`
}

type EditorialPost struct {
	Title        string `json:"title"`
	ThumbnailUrl string `json:"thumbnailUrl"`
	Categories   []int  `json:"categories"`
	Link         string `json:"link"`
	Id           string `json:"id"`
	Guid         string `json:"guid"`
}

type EditorialPosts struct {
	Posts []*EditorialPost `json:"posts"`
}

type Event struct {
	ID                           primitive.ObjectID             `json:"id" bson:"_id"`
	UserID                       primitive.ObjectID             `json:"userId"`
	AuthorizedOperationUserIds   []primitive.ObjectID           `json:"authorizedOperationUserIds,omitempty"`
	Name                         string                         `json:"name"`
	Type                         *EventType                     `json:"type,omitempty"`
	RetailerAvatarURL            string                         `json:"retailerAvatarUrl"`
	Status                       EventStatus                    `json:"status"`
	Online                       bool                           `json:"online"`
	Introduction                 string                         `json:"introduction"`
	Details                      string                         `json:"details"`
	Notice                       string                         `json:"notice"`
	Terms                        string                         `json:"terms"`
	AdditionalTermsZh            string                         `json:"additionalTermsZh"`
	AdditionalTermsEn            string                         `json:"additionalTermsEn"`
	PhoneNumber                  string                         `json:"phoneNumber"`
	WebsiteURL                   string                         `json:"websiteUrl"`
	FacebookAccount              string                         `json:"facebookAccount"`
	InstagramAccount             string                         `json:"instagramAccount"`
	Photos                       []*Photo                       `json:"photos"`
	ActivityURL                  string                         `json:"activityUrl"`
	TimeSlots                    []*EventTimeSlot               `json:"timeSlots"`
	TimezoneOffset               float64                        `json:"timezoneOffset"`
	StartedAt                    primitive.DateTime             `json:"startedAt"`
	EndedAt                      primitive.DateTime             `json:"endedAt"`
	CreatedAt                    primitive.DateTime             `json:"createdAt"`
	UpdatedAt                    primitive.DateTime             `json:"updatedAt"`
	PackagePricing               *EventPackagePricing           `json:"packagePricing,omitempty"`
	AdditionalParticipantPricing *AdditionalParticipantPricing  `json:"additionalParticipantPricing,omitempty"`
	AdditionalPetPricing         *AdditionalPetPricing          `json:"additionalPetPricing,omitempty"`
	MaxParticipationsPerUser     int64                          `json:"maxParticipationsPerUser"`
	Category                     *SelectionOption               `json:"category,omitempty"`
	Address                      string                         `json:"address"`
	Region                       *SelectionOption               `json:"region,omitempty"`
	District                     *SelectionOption               `json:"district,omitempty"`
	GeoLocation                  *GeoLocation                   `json:"geoLocation,omitempty"`
	Recommended                  bool                           `json:"recommended"`
	Approved                     bool                           `json:"approved"`
	Published                    bool                           `json:"published"`
	ParticipationOpen            bool                           `json:"participationOpen"`
	PetPhotoRequired             bool                           `json:"petPhotoRequired"`
	ShareContent                 *ShareContent                  `json:"shareContent,omitempty"`
	Participations               EventParticipationsQueryResult `json:"participations"`
}

func (Event) IsEventQueryResult() {}

type EventFilterInput struct {
	EventID *primitive.ObjectID `json:"eventId,omitempty"`
}

type EventInvitation struct {
	ID            primitive.ObjectID     `json:"id" bson:"_id"`
	EventID       primitive.ObjectID     `json:"eventId"`
	Event         *Event                 `json:"event,omitempty"`
	InviteeUserID *primitive.ObjectID    `json:"inviteeUserId,omitempty"`
	Invitee       UserProfileQueryResult `json:"invitee"`
	InviterUserID primitive.ObjectID     `json:"inviterUserId"`
	Code          string                 `json:"code"`
	StartedAt     primitive.DateTime     `json:"startedAt"`
	EndedAt       primitive.DateTime     `json:"endedAt"`
	CreatedAt     primitive.DateTime     `json:"createdAt"`
	UpdatedAt     primitive.DateTime     `json:"updatedAt"`
	ConfirmedAt   *primitive.DateTime    `json:"confirmedAt,omitempty"`
	Confirmed     bool                   `json:"confirmed"`
}

func (EventInvitation) IsEventInvitationQueryResult() {}

type EventInvitationCommonFilter struct {
	UserID    *primitive.ObjectID `json:"userId,omitempty" bson:",omitempty"`
	EventID   *primitive.ObjectID `json:"eventId,omitempty" bson:",omitempty"`
	StartedAt *primitive.DateTime `json:"startedAt,omitempty" bson:",omitempty"`
	EndedAt   *primitive.DateTime `json:"endedAt,omitempty" bson:",omitempty"`
	Confirmed *bool               `json:"confirmed,omitempty" bson:",omitempty"`
}

type EventInvitations struct {
	TotalCount int64              `json:"totalCount"`
	Items      []*EventInvitation `json:"items"`
}

func (EventInvitations) IsEventInvitationsQueryResult() {}

type EventInvitationsInput struct {
	PageNumber   int64                        `json:"pageNumber"`
	PageSize     int64                        `json:"pageSize"`
	CommonFilter *EventInvitationCommonFilter `json:"commonFilter"`
}

type EventPackagePricing struct {
	MaxParticipants   int64     `json:"maxParticipants"`
	MaxPets           int64     `json:"maxPets"`
	Price             int64     `json:"price"`
	PriceLabel        *string   `json:"priceLabel,omitempty"`
	Currency          *Currency `json:"currency,omitempty"`
	MaxCash           *int64    `json:"maxCash,omitempty"`
	MinCash           *int64    `json:"minCash,omitempty"`
	MaxPoints         *int64    `json:"maxPoints,omitempty"`
	PointsCashRatio   *float64  `json:"pointsCashRatio,omitempty"`
	ExtraPoints       int64     `json:"extraPoints"`
	Points            int64     `json:"points"`
	PointsRewardRatio *float64  `json:"pointsRewardRatio,omitempty"`
	Remarks           *string   `json:"remarks,omitempty"`
}

type EventParticipant struct {
	Name        *string             `json:"name,omitempty"`
	PhoneNumber *string             `json:"phoneNumber,omitempty"`
	UserID      *primitive.ObjectID `json:"userId,omitempty"`
}

type EventParticipation struct {
	ID                          primitive.ObjectID       `json:"id" bson:"_id"`
	UserID                      primitive.ObjectID       `json:"userId"`
	User                        *UserProfile             `json:"user"`
	EventID                     primitive.ObjectID       `json:"eventId"`
	Event                       *Event                   `json:"event"`
	Points                      int64                    `json:"points"`
	RedemptionCode              string                   `json:"redemptionCode"`
	OperationUserID             *primitive.ObjectID      `json:"operationUserId,omitempty"`
	Status                      EventParticipationStatus `json:"status"`
	PaymentIntent               *PaymentIntent           `json:"paymentIntent,omitempty"`
	PackagesCount               int64                    `json:"packagesCount"`
	AdditionalParticipantsCount int64                    `json:"additionalParticipantsCount"`
	AdditionalPetsCount         int64                    `json:"additionalPetsCount"`
	PackageParticipants         []*EventParticipant      `json:"packageParticipants"`
	PackagePets                 []*EventPet              `json:"packagePets"`
	AdditionalParticipants      []*EventParticipant      `json:"additionalParticipants"`
	AdditionalPets              []*EventPet              `json:"additionalPets"`
	StartedAt                   primitive.DateTime       `json:"startedAt"`
	EndedAt                     primitive.DateTime       `json:"endedAt"`
	CreatedAt                   primitive.DateTime       `json:"createdAt"`
	UpdatedAt                   primitive.DateTime       `json:"updatedAt"`
}

func (EventParticipation) IsEventParticipationQueryResult() {}

func (EventParticipation) IsCreateEventParticipationResult() {}

type EventParticipationCommonFilter struct {
	UserID  *primitive.ObjectID       `json:"userId,omitempty" bson:",omitempty"`
	EventID *primitive.ObjectID       `json:"eventId,omitempty" bson:",omitempty"`
	Status  *EventParticipationStatus `json:"status,omitempty" bson:",omitempty"`
}

type EventParticipationCount struct {
	Count int64 `json:"count"`
}

func (EventParticipationCount) IsEventParticipationCountQueryResult() {}

type EventParticipationCountCommonFilter struct {
	UserID  *primitive.ObjectID `json:"userId,omitempty" bson:",omitempty"`
	EventID *primitive.ObjectID `json:"eventId,omitempty" bson:",omitempty"`
}

type EventParticipationCountInput struct {
	CommonFilter *EventParticipationCountCommonFilter `json:"commonFilter"`
	Statuses     []EventParticipationStatus           `json:"statuses,omitempty"`
}

type EventParticipationInput struct {
	ID                     *primitive.ObjectID `json:"id,omitempty"`
	RedemptionCode         *string             `json:"redemptionCode,omitempty"`
	ChannelPaymentIntentID *string             `json:"channelPaymentIntentId,omitempty"`
}

type EventParticipations struct {
	TotalCount int64                 `json:"totalCount"`
	Items      []*EventParticipation `json:"items"`
}

func (EventParticipations) IsEventParticipationsQueryResult() {}

type EventParticipationsInput struct {
	PageNumber          int64                           `json:"pageNumber"`
	PageSize            int64                           `json:"pageSize"`
	CommonFilter        *EventParticipationCommonFilter `json:"commonFilter"`
	DatetimeRangeFilter *DatetimeRangeFilter            `json:"datetimeRangeFilter,omitempty"`
	EventFilter         *CommonEventFilter              `json:"eventFilter,omitempty"`
	StatusesFilter      []EventParticipationStatus      `json:"statusesFilter,omitempty"`
}

type EventPet struct {
	Name     *string             `json:"name,omitempty"`
	PhotoURL *string             `json:"photoUrl,omitempty"`
	PetID    *primitive.ObjectID `json:"petId,omitempty"`
	Pet      PetQueryResult      `json:"pet,omitempty"`
}

type EventTicket struct {
	ID                           primitive.ObjectID  `json:"id" bson:"_id"`
	EventID                      primitive.ObjectID  `json:"eventId"`
	UserID                       *primitive.ObjectID `json:"userId,omitempty"`
	ParticipationID              *primitive.ObjectID `json:"participationId,omitempty"`
	StartedAt                    primitive.DateTime  `json:"startedAt"`
	EndedAt                      primitive.DateTime  `json:"endedAt"`
	Status                       EventTicketStatus   `json:"status"`
	Type                         EventTicketType     `json:"type"`
	RedemptionCode               string              `json:"redemptionCode"`
	RedeemedAt                   *primitive.DateTime `json:"redeemedAt,omitempty"`
	RedemptionConfirmationUserID *primitive.ObjectID `json:"redemptionConfirmationUserId,omitempty"`
	CreatedAt                    primitive.DateTime  `json:"createdAt"`
	UpdatedAt                    primitive.DateTime  `json:"updatedAt"`
}

type EventTickets struct {
	TotalCount int64          `json:"totalCount"`
	Items      []*EventTicket `json:"items"`
}

type EventTicketsCommonFilter struct {
	EventID   *primitive.ObjectID `json:"eventId,omitempty" bson:",omitempty"`
	Type      *EventTicketType    `json:"type,omitempty" bson:",omitempty"`
	StartedAt *primitive.DateTime `json:"startedAt,omitempty" bson:",omitempty"`
	EndedAt   *primitive.DateTime `json:"endedAt,omitempty" bson:",omitempty"`
}

type EventTicketsCountInput struct {
	CommonFilter *EventTicketsCommonFilter `json:"commonFilter"`
	Available    *bool                     `json:"available,omitempty" bson:",omitempty"`
}

type EventTicketsInput struct {
	PageNumber   int64                     `json:"pageNumber"`
	PageSize     int64                     `json:"pageSize"`
	CommonFilter *EventTicketsCommonFilter `json:"commonFilter"`
	Available    *bool                     `json:"available,omitempty" bson:",omitempty"`
}

type EventTimeSlot struct {
	StartedAt                            primitive.DateTime `json:"startedAt"`
	EndedAt                              primitive.DateTime `json:"endedAt"`
	DisplayStartedAt                     string             `json:"displayStartedAt"`
	DisplayEndedAt                       string             `json:"displayEndedAt"`
	MaxPackages                          int64              `json:"maxPackages"`
	MaxAdditionalParticipants            int64              `json:"maxAdditionalParticipants"`
	MaxAdditionalPets                    int64              `json:"maxAdditionalPets"`
	AvailablePackagesCount               int64              `json:"availablePackagesCount"`
	AvailableAdditionalParticipantsCount int64              `json:"availableAdditionalParticipantsCount"`
	AvailableAdditionalPetsCount         int64              `json:"availableAdditionalPetsCount"`
	SubSlots                             []*EventTimeSlot   `json:"subSlots,omitempty"`
}

type Events struct {
	TotalCount int64    `json:"totalCount"`
	Items      []*Event `json:"items"`
}

func (Events) IsEventsQueryResult() {}

type EventsInput struct {
	PageNumber          int64                `json:"pageNumber"`
	PageSize            int64                `json:"pageSize"`
	CommonFilter        *CommonEventFilter   `json:"commonFilter"`
	CategoriesFilter    *CategoriesFilter    `json:"categoriesFilter,omitempty"`
	DatetimeRangeFilter *DatetimeRangeFilter `json:"datetimeRangeFilter,omitempty"`
	GeographicFilters   []*GeographicFilter  `json:"geographicFilters,omitempty"`
}

type FavoriteProductInput struct {
	ProductID    primitive.ObjectID `json:"productId"`
	Unfavoriting bool               `json:"unfavoriting"`
}

type FavoriteRetailerInput struct {
	UserID         string `json:"userId"`
	RetailerUserID string `json:"retailerUserId"`
	Action         int    `json:"action"`
}

type FcmRegistrationToken struct {
	Token     string             `json:"token"`
	UUID      string             `json:"uuid"`
	UpdatedAt primitive.DateTime `json:"updatedAt"`
}

type FcmRegistrationTokenFilter struct {
	Present bool `json:"present"`
}

type Field struct {
	Name string     `json:"name"`
	Type *FieldType `json:"type,omitempty"`
	Path string     `json:"path"`
}

type FileOperation struct {
	UploadUrl   string `json:"uploadUrl"`
	DownloadUrl string `json:"downloadUrl"`
}

type FileOperationInput struct {
	Filename   string `json:"filename"`
	PublicRead bool   `json:"publicRead"`
}

type GenerateVerificationCodeInput struct {
	PhoneOrEmail string                          `json:"phoneOrEmail"`
	Purpose      GenerateVerificationCodePurpuse `json:"purpose"`
}

type GeoFilter struct {
	Distance    int               `json:"distance"`
	GeoLocation *GeoLocationInput `json:"geoLocation"`
}

type GeoJSONPoint struct {
	Type        string    `json:"type"`
	Coordinates []float64 `json:"coordinates,omitempty"`
}

type GeoLocation struct {
	Long float64 `json:"long"`
	Lat  float64 `json:"lat"`
}

type GeoLocationConstraint struct {
	Location    *GeoJSONPoint `json:"location,omitempty"`
	Enabled     bool          `json:"enabled"`
	GeoLocation *GeoLocation  `json:"geoLocation,omitempty"`
}

type GeoLocationInput struct {
	Long float64 `json:"long"`
	Lat  float64 `json:"lat"`
}

type GeographicFilter struct {
	City     *SelectionOptionInput `json:"city,omitempty"`
	Region   *SelectionOptionInput `json:"region,omitempty"`
	District *SelectionOptionInput `json:"district,omitempty"`
}

type HomepagePosts struct {
	ChannelPosts       []*EditorialPost `json:"channelPosts"`
	InformationalPosts []*EditorialPost `json:"informationalPosts"`
	RetailerAdPosts    []*EditorialPost `json:"retailerAdPosts"`
	SlidingAdPosts     []*EditorialPost `json:"slidingAdPosts"`
	ActivityPosts      []*EditorialPost `json:"activityPosts"`
}

type Job struct {
	Id           primitive.ObjectID `json:"id" bson:"_id"`
	Name         string             `json:"name"`
	Type         JobType            `json:"type"`
	Schedule     *Schedule          `json:"schedule,omitempty"`
	Message      *Message           `json:"message"`
	Activated    bool               `json:"activated"`
	EntryID      int                `json:"entryId"`
	CreatedAt    primitive.DateTime `json:"createdAt"`
	UpdatedAt    primitive.DateTime `json:"updatedAt"`
	ExecutedAt   primitive.DateTime `json:"executedAt"`
	UsersFilters *UsersFilters      `json:"usersFilters,omitempty"`
	PetsFilters  *PetsFilters       `json:"petsFilters,omitempty"`
	Logs         string             `json:"logs"`
}

type JobActivationFilter struct {
	Option bool `json:"option"`
}

type JobTypeFilter struct {
	Option JobType `json:"option"`
}

type Jobs struct {
	TotalCount int    `json:"totalCount"`
	Jobs       []*Job `json:"jobs"`
}

func (Jobs) IsJobsResult() {}

type JobsInput struct {
	PageNumber          int                  `json:"pageNumber"`
	PageSize            int                  `json:"pageSize"`
	JobTypeFilter       *JobTypeFilter       `json:"jobTypeFilter,omitempty"`
	JobActivationFilter *JobActivationFilter `json:"jobActivationFilter,omitempty"`
}

type LandmarkFilter struct {
	Option *SelectionOptionInput `json:"option,omitempty"`
}

type LandmarksFilter struct {
	Landmarks []*LandmarkFilter `json:"landmarks"`
}

type LevelFilter struct {
	Options []int `json:"options"`
}

type LoginUserInput struct {
	PhoneOrEmail string `json:"phoneOrEmail"`
	Password     string `json:"password"`
}

type Message struct {
	Title      string   `json:"title"`
	Body       string   `json:"body"`
	AppPage    *AppPage `json:"appPage,omitempty"`
	PageParams string   `json:"pageParams"`
}

type MessageInput struct {
	Title      string   `json:"title"`
	Body       string   `json:"body"`
	ImageURL   string   `json:"imageUrl"`
	AppPage    *AppPage `json:"appPage,omitempty"`
	PageParams string   `json:"pageParams"`
}

type MigrateCommentsInput struct {
	SrcPetID   primitive.ObjectID   `json:"srcPetId"`
	DstPetID   primitive.ObjectID   `json:"dstPetId"`
	CommentIds []primitive.ObjectID `json:"commentIds,omitempty"`
}

type Moment struct {
	Id                string           `json:"id" bson:"_id"`
	UserId            string           `json:"userId"`
	Title             string           `json:"title"`
	Link              string           `json:"link"`
	MediaUrl          string           `json:"mediaUrl"`
	MediaThumbnailUrl string           `json:"mediaThumbnailUrl"`
	IsTemplate        bool             `json:"isTemplate"`
	IsVideo           bool             `json:"isVideo"`
	DatetimeCreated   string           `json:"datetimeCreated"`
	RetailerProfile   *RetailerProfile `json:"retailerProfile"`
}

type Moments struct {
	Moments []*Moment `json:"moments"`
}

type MomentsReported struct {
	MomentIds []string `json:"momentIds"`
}

type Mutation struct {
}

type NameTranslations struct {
	En     string `json:"en"`
	ZhHant string `json:"zhHant"`
}

type NewContest struct {
	Name      string `json:"name"`
	StartDate string `json:"startDate"`
	EndDate   string `json:"endDate"`
	PosterUrl string `json:"posterUrl"`
	Active    bool   `json:"active"`
}

type NewContestCandidate struct {
	ContestId     string `json:"contestId"`
	PetId         string `json:"petId"`
	PetName       string `json:"petName"`
	PetOwnerName  string `json:"petOwnerName"`
	PetOwnerPhone string `json:"petOwnerPhone"`
	PetPhotoUrl   string `json:"petPhotoUrl"`
	PetSnsUrl     string `json:"petSnsUrl"`
}

type NewMoment struct {
	Title      string `json:"title"`
	Link       string `json:"link"`
	MediaUrl   string `json:"mediaUrl"`
	IsTemplate bool   `json:"isTemplate"`
	IsVideo    bool   `json:"isVideo"`
}

type NewUser struct {
	PhoneOrEmail     string             `json:"phoneOrEmail"`
	Password         string             `json:"password"`
	VerificationCode string             `json:"verificationCode"`
	Name             string             `json:"name"`
	ReferralCode     string             `json:"referralCode"`
	ReferralUserID   primitive.ObjectID `json:"referralUserId"`
}

type NewUserWithAppleBinding struct {
	PhoneOrEmail     string `json:"phoneOrEmail"`
	Password         string `json:"password"`
	VerificationCode string `json:"verificationCode"`
	Name             string `json:"name"`
	AuthCode         string `json:"authCode"`
}

type OrderPayment struct {
	PaymentMethodID  string            `json:"paymentMethodId"`
	PaymentType      string            `json:"paymentType"`
	NameTranslations *NameTranslations `json:"nameTranslations"`
	PaymentStatus    string            `json:"paymentStatus"`
	Total            float64           `json:"total"`
	TotalLabel       string            `json:"totalLabel"`
}

type OtherFilter struct {
	Option int `json:"option"`
}

type PaymentIntent struct {
	Status                 *PaymentIntentStatus `json:"status,omitempty"`
	Amount                 int64                `json:"amount"`
	Currency               Currency             `json:"currency"`
	DeductedPoints         int64                `json:"deductedPoints"`
	RewardedPoints         int64                `json:"rewardedPoints"`
	Remarks                string               `json:"remarks"`
	ChannelPaymentIntentID string               `json:"channelPaymentIntentId"`
	Channel                PaymentChannel       `json:"channel"`
	ChannelClientSecret    string               `json:"channelClientSecret"`
	CreatedAt              primitive.DateTime   `json:"createdAt"`
	UpdatedAt              primitive.DateTime   `json:"updatedAt"`
}

func (PaymentIntent) IsCreatePaymentIntentResult() {}

type PetBodyMeasurements struct {
	ID              primitive.ObjectID `json:"id"`
	DatetimeCreated primitive.DateTime `json:"datetimeCreated"`
	Weight          float64            `json:"weight"`
	Back            float64            `json:"back"`
	Chest           float64            `json:"chest"`
	Neck            float64            `json:"neck"`
	Waist           float64            `json:"waist"`
}

type PetInsurance struct {
	ID                 primitive.ObjectID `json:"id"`
	CompanyName        string             `json:"companyName"`
	AdvisorPhoneNumber string             `json:"advisorPhoneNumber"`
	EffectiveFrom      primitive.DateTime `json:"effectiveFrom"`
	ValidTo            primitive.DateTime `json:"validTo"`
	NotifiedDaysAhead  int                `json:"notifiedDaysAhead"`
	NotificationOn     bool               `json:"notificationOn"`
}

type PetPawMeasurements struct {
	ID              primitive.ObjectID `json:"id"`
	DatetimeCreated primitive.DateTime `json:"datetimeCreated"`
	Width           float64            `json:"width"`
	Length          float64            `json:"length"`
	ShoulderHeight  float64            `json:"shoulderHeight"`
	BackLegHeight   float64            `json:"backLegHeight"`
}

type PetProfile struct {
	ID                     primitive.ObjectID      `json:"id" bson:"_id"`
	AvatarURL              string                  `json:"avatarUrl"`
	IDPhotoURL             string                  `json:"idPhotoUrl"`
	IDCardURL              string                  `json:"idCardUrl"`
	IDCardBgRmdURL         string                  `json:"idCardBgRmdUrl"`
	IDCardNumber           int                     `json:"idCardNumber"`
	Name                   string                  `json:"name"`
	NameZh                 string                  `json:"nameZh"`
	NameEn                 string                  `json:"nameEn"`
	Birthday               primitive.DateTime      `json:"birthday"`
	DepartureDate          *primitive.DateTime     `json:"departureDate,omitempty"`
	BreedName              string                  `json:"breedName"`
	Breed                  *SelectionOption        `json:"breed,omitempty"`
	PetOwnerSnsAccount     string                  `json:"petOwnerSnsAccount"`
	UserID                 primitive.ObjectID      `json:"userId"`
	User                   UserProfileQueryResult  `json:"user"`
	Sex                    *Sex                    `json:"sex,omitempty"`
	HomeArrivalDate        string                  `json:"homeArrivalDate"`
	CommentatorCertificate *CommentatorCertificate `json:"commentatorCertificate,omitempty"`
	CertificateUrls        []string                `json:"certificateUrls"`
	BodyMeasurementsList   []*PetBodyMeasurements  `json:"bodyMeasurementsList"`
	PawMeasurementsList    []*PetPawMeasurements   `json:"pawMeasurementsList"`
	Insurances             []*PetInsurance         `json:"insurances"`
	Vaxes                  []*PetVax               `json:"vaxes"`
	Comments               []*Comment              `json:"comments"`
}

func (PetProfile) IsPetQueryResult() {}

type PetProfiles struct {
	Items      []*PetProfile `json:"items"`
	TotalCount int           `json:"totalCount"`
}

func (PetProfiles) IsPetProfilesQueryResult() {}

type PetVax struct {
	ID                  primitive.ObjectID `json:"id"`
	VaxName             string             `json:"vaxName"`
	Clinic              string             `json:"clinic"`
	VaxxedDate          primitive.DateTime `json:"vaxxedDate"`
	ImmunityLastingUtil primitive.DateTime `json:"immunityLastingUtil"`
	NotifiedDaysAhead   int                `json:"notifiedDaysAhead"`
	NotificationOn      bool               `json:"notificationOn"`
}

type PetsFilters struct {
	IdCardNumber   int           `json:"idCardNumber"`
	BirthdayFilter *DatesFilter  `json:"birthdayFilter,omitempty"`
	BreedsFilter   *BreedsFilter `json:"breedsFilter,omitempty"`
	SexesFilter    *SexesFilter  `json:"sexesFilter,omitempty"`
}

type PetsFiltersInput struct {
	IdCardNumber   int                   `json:"idCardNumber"`
	BirthdayFilter *DatesFilterInput     `json:"birthdayFilter,omitempty"`
	Breeds         []*SelectOptionFilter `json:"breeds,omitempty"`
	Sexes          []*SelectOptionFilter `json:"sexes,omitempty"`
}

type PetsInput struct {
	UserID                             *primitive.ObjectID                 `json:"userId,omitempty"`
	PageNumber                         int                                 `json:"pageNumber"`
	PageSize                           int                                 `json:"pageSize"`
	MatchingText                       string                              `json:"matchingText"`
	CommentatorCertificateStatusFilter *CommentatorCertificateStatusFilter `json:"commentatorCertificateStatusFilter,omitempty"`
	IDCardNumber                       int                                 `json:"idCardNumber"`
	BirthdayFilter                     *DatesFilterInput                   `json:"birthdayFilter,omitempty"`
	Breeds                             []*SelectOptionFilter               `json:"breeds,omitempty"`
	Sexes                              []*SelectOptionFilter               `json:"sexes,omitempty"`
}

type PetsWithCommentsInput struct {
	PageNumber                   int               `json:"pageNumber"`
	PageSize                     int               `json:"pageSize"`
	CommentPageNumber            int               `json:"commentPageNumber"`
	CommentPageSize              int               `json:"commentPageSize"`
	CommentDatesFilter           *DatesFilterInput `json:"commentDatesFilter,omitempty"`
	CommentRecommended           *bool             `json:"commentRecommended,omitempty"`
	CommentatorCertificateLevels []int             `json:"commentatorCertificateLevels,omitempty"`
}

type Photo struct {
	ID          primitive.ObjectID `json:"id"`
	URL         string             `json:"url"`
	Description string             `json:"description"`
}

type PhotoInput struct {
	URL         string `json:"url"`
	Description string `json:"description"`
}

type PointTransaction struct {
	ID           primitive.ObjectID      `json:"id" bson:"_id"`
	UserID       *primitive.ObjectID     `json:"userId,omitempty" bson:",omitempty"`
	SourceEntity TransactionSourceEntity `json:"sourceEntity"`
	Type         TransactionType         `json:"type"`
	Amount       int64                   `json:"amount"`
	Accumulated  bool                    `json:"accumulated"`
	UpdatedAt    primitive.DateTime      `json:"updatedAt"`
	CreatedAt    primitive.DateTime      `json:"createdAt"`
	Remarks      string                  `json:"remarks"`
	Details      TransactionDetails      `json:"details,omitempty"`
}

func (PointTransaction) IsPointTransactionQueryResult() {}

type PointTransactions struct {
	TotalCount int                 `json:"totalCount"`
	Items      []*PointTransaction `json:"items"`
}

func (PointTransactions) IsPointTransactionsQueryResult() {}

type PointTransactionsCommonFilter struct {
	UserID       *primitive.ObjectID      `json:"userId,omitempty" bson:",omitempty"`
	SourceEntity *TransactionSourceEntity `json:"sourceEntity,omitempty" bson:",omitempty"`
	Type         *TransactionType         `json:"type,omitempty" bson:",omitempty"`
	Accumulated  *bool                    `json:"accumulated,omitempty" bson:",omitempty"`
}

type PointTransctionsInput struct {
	PageSize     int                            `json:"pageSize"`
	PageNumber   int                            `json:"pageNumber"`
	CommonFilter *PointTransactionsCommonFilter `json:"commonFilter"`
	DatesFilter  *DatesFilterInput              `json:"datesFilter,omitempty"`
}

type Product struct {
	ID                         primitive.ObjectID     `json:"id" bson:"_id"`
	UserID                     primitive.ObjectID     `json:"userId"`
	User                       UserProfileQueryResult `json:"user"`
	AuthorizedOperationUserIds []primitive.ObjectID   `json:"authorizedOperationUserIds"`
	Name                       string                 `json:"name"`
	Type                       *ProductType           `json:"type,omitempty"`
	FavoritingUserIds          []primitive.ObjectID   `json:"favoritingUserIds"`
	Favorited                  bool                   `json:"favorited"`
	FavoriteCount              int64                  `json:"favoriteCount"`
	Rating                     *float64               `json:"rating,omitempty"`
	Online                     bool                   `json:"online"`
	Introduction               string                 `json:"introduction"`
	Details                    string                 `json:"details"`
	Notice                     string                 `json:"notice"`
	Terms                      string                 `json:"terms"`
	ServiceLocation            string                 `json:"serviceLocation"`
	CategoryOptions            []*SelectionOption     `json:"categoryOptions,omitempty"`
	Photos                     []*Photo               `json:"photos"`
	CreatedAt                  primitive.DateTime     `json:"createdAt"`
	UpdatedAt                  primitive.DateTime     `json:"updatedAt"`
	Pricing                    *ProductPricing        `json:"pricing,omitempty"`
	MaxPurchasesPerUser        int64                  `json:"maxPurchasesPerUser"`
	Recommended                bool                   `json:"recommended"`
	Available                  bool                   `json:"available"`
	ShareContent               *ShareContent          `json:"shareContent,omitempty"`
}

func (Product) IsProductQueryResult() {}

type ProductPricing struct {
	MaxParchases      int64     `json:"maxParchases"`
	Price             int64     `json:"price"`
	PriceLabel        *string   `json:"priceLabel,omitempty"`
	Currency          *Currency `json:"currency,omitempty"`
	MaxCash           *int64    `json:"maxCash,omitempty"`
	MinCash           *int64    `json:"minCash,omitempty"`
	MaxPoints         *int64    `json:"maxPoints,omitempty"`
	PointsCashRatio   *float64  `json:"pointsCashRatio,omitempty"`
	ExtraPoints       int64     `json:"extraPoints"`
	Points            int64     `json:"points"`
	PointsRewardRatio *float64  `json:"pointsRewardRatio,omitempty"`
	Remarks           *string   `json:"remarks,omitempty"`
}

type Products struct {
	TotalCount int64      `json:"totalCount"`
	Items      []*Product `json:"items"`
}

func (Products) IsProductsQueryResult() {}

type ProductsInput struct {
	PageNumber      int64                   `json:"pageNumber"`
	PageSize        int64                   `json:"pageSize"`
	CommonFilter    *CommonProductFilter    `json:"commonFilter"`
	Favorited       *bool                   `json:"favorited,omitempty"`
	MatchingText    string                  `json:"matchingText"`
	CategoryOptions []*SelectionOptionInput `json:"categoryOptions,omitempty"`
}

type Program struct {
	ID             primitive.ObjectID `json:"id" bson:"_id"`
	Name           string             `json:"name"`
	Type           ProgramType        `json:"type"`
	Price          int                `json:"price"`
	DaysOfValidity int                `json:"daysOfValidity"`
	Available      bool               `json:"available"`
	CreatedAt      primitive.DateTime `json:"createdAt"`
	UpdatedAt      primitive.DateTime `json:"updatedAt"`
}

func (Program) IsProgramQueryResult() {}

type ProgramEnrollment struct {
	ProgramID primitive.ObjectID `json:"programId"`
	Program   ProgramQueryResult `json:"program"`
	CreatedAt primitive.DateTime `json:"createdAt"`
	UpdatedAt primitive.DateTime `json:"updatedAt"`
	ValidTo   primitive.DateTime `json:"validTo"`
}

type ProgramOrder struct {
	ID                  primitive.ObjectID     `json:"id" bson:"_id"`
	Name                string                 `json:"name"`
	UserID              primitive.ObjectID     `json:"userId"`
	User                UserProfileQueryResult `json:"user"`
	ProgramID           primitive.ObjectID     `json:"programId"`
	Program             ProgramQueryResult     `json:"program"`
	OperationUserID     *primitive.ObjectID    `json:"operationUserId,omitempty"`
	Status              OrderStatus            `json:"status"`
	Amount              int                    `json:"amount"`
	StripePaymentIntent *PaymentIntent         `json:"stripePaymentIntent,omitempty"`
	BbmslReference      *BbmslReference        `json:"bbmslReference,omitempty"`
	CreatedAt           primitive.DateTime     `json:"createdAt"`
	UpdatedAt           primitive.DateTime     `json:"updatedAt"`
}

func (ProgramOrder) IsOrder()                                     {}
func (this ProgramOrder) GetID() primitive.ObjectID               { return this.ID }
func (this ProgramOrder) GetName() string                         { return this.Name }
func (this ProgramOrder) GetUserID() primitive.ObjectID           { return this.UserID }
func (this ProgramOrder) GetUser() UserProfileQueryResult         { return this.User }
func (this ProgramOrder) GetOperationUserID() *primitive.ObjectID { return this.OperationUserID }
func (this ProgramOrder) GetStatus() OrderStatus                  { return this.Status }
func (this ProgramOrder) GetAmount() int                          { return this.Amount }
func (this ProgramOrder) GetStripePaymentIntent() *PaymentIntent  { return this.StripePaymentIntent }
func (this ProgramOrder) GetBbmslReference() *BbmslReference      { return this.BbmslReference }
func (this ProgramOrder) GetCreatedAt() primitive.DateTime        { return this.CreatedAt }
func (this ProgramOrder) GetUpdatedAt() primitive.DateTime        { return this.UpdatedAt }

func (ProgramOrder) IsUpdateProgramOrderResult() {}

func (ProgramOrder) IsProgramOrderQueryResult() {}

type ProgramOrderCommonFilter struct {
	ProgramID *primitive.ObjectID `json:"programId,omitempty" bson:",omitempty"`
	Status    *OrderStatus        `json:"status,omitempty" bson:",omitempty"`
}

type ProgramOrders struct {
	TotalCount int64           `json:"totalCount"`
	Items      []*ProgramOrder `json:"items,omitempty"`
}

func (ProgramOrders) IsProgramOrdersQueryResult() {}

type ProgramOrdersInput struct {
	PageNumber   int64                     `json:"pageNumber"`
	PageSize     int64                     `json:"pageSize"`
	CommonFilter *ProgramOrderCommonFilter `json:"commonFilter"`
}

type Programs struct {
	Items      []*Program `json:"items,omitempty"`
	TotalCount int64      `json:"totalCount"`
}

func (Programs) IsProgramsQueryResult() {}

type ProgramsCommonFilter struct {
	Available *bool        `json:"available,omitempty" bson:",omitempty"`
	Type      *ProgramType `json:"type,omitempty" bson:",omitempty"`
}

type ProgramsInput struct {
	PageSize     int64                 `json:"pageSize"`
	PageNumber   int64                 `json:"pageNumber"`
	CommonFilter *ProgramsCommonFilter `json:"commonFilter"`
}

type Query struct {
}

type RankingFilter struct {
	Option int `json:"option"`
}

type ReportMomentInput struct {
	MomentId       string `json:"momentId"`
	ReportedUserId string `json:"reportedUserId"`
	Reason         string `json:"reason"`
}

type RetailerNameEntries struct {
	Entries []*RetailerNameEntry `json:"entries"`
}

type RetailerNameEntriesInput struct {
	PageSize          int                `json:"pageSize"`
	PageNumber        int                `json:"pageNumber"`
	StartUserID       string             `json:"startUserId"`
	MatchingName      string             `json:"matchingName"`
	MatchingAddress   string             `json:"matchingAddress"`
	TerritoriesFilter *TerritoriesFilter `json:"territoriesFilter,omitempty"`
	LandmarksFilter   *LandmarksFilter   `json:"landmarksFilter,omitempty"`
}

type RetailerNameEntry struct {
	Name   string `json:"name"`
	UserID string `json:"userId"`
}

type RetailerProfile struct {
	ID                   string             `json:"id" bson:"_id"`
	UserID               primitive.ObjectID `json:"userId"`
	Account              string             `json:"account"`
	Role                 int                `json:"role"`
	Level                int                `json:"level"`
	AvatarURL            string             `json:"avatarUrl"`
	Name                 string             `json:"name"`
	Phone                string             `json:"phone"`
	Email                string             `json:"email"`
	GeoLocation          *GeoLocation       `json:"geoLocation,omitempty"`
	ShopPhotoUrls        []string           `json:"shopPhotoUrls"`
	ShopPhotos           []*Photo           `json:"shopPhotos"`
	ShopIntro            string             `json:"shopIntro"`
	City                 *SelectionOption   `json:"city,omitempty"`
	Region               *SelectionOption   `json:"region,omitempty"`
	District             *SelectionOption   `json:"district,omitempty"`
	Landmark             *SelectionOption   `json:"landmark,omitempty"`
	Address              string             `json:"address"`
	Moments              []*Moment          `json:"moments,omitempty"`
	PaymentMethods       []*SelectionOption `json:"paymentMethods"`
	Category             *SelectionOption   `json:"category,omitempty"`
	RawData              string             `json:"rawData"`
	CategoryOptions      []*SelectionOption `json:"categoryOptions,omitempty"`
	SortingOption        *SelectionOption   `json:"sortingOption,omitempty"`
	CalculatedDistance   float64            `json:"calculatedDistance"`
	Favorited            bool               `json:"favorited"`
	FavoritingUserIds    []string           `json:"favoritingUserIds,omitempty"`
	FavoritingUsersCount int                `json:"favoritingUsersCount"`
	Promotions           string             `json:"promotions"`
	OpeningHours         string             `json:"openingHours"`
	Routes               string             `json:"routes"`
	WebsiteURL           string             `json:"websiteUrl"`
	FacebookAccount      string             `json:"facebookAccount"`
	InstagramAccount     string             `json:"instagramAccount"`
	WhatsappAccount      string             `json:"whatsappAccount"`
	RedbookAccount       string             `json:"redbookAccount"`
	ShareContent         *ShareContent      `json:"shareContent,omitempty"`
	Recommended          bool               `json:"recommended"`
	Rating               *float64           `json:"rating,omitempty"`
	Sequence             *int               `json:"sequence,omitempty"`
	BusinessLicense      string             `json:"businessLicense"`
	CreatedAt            primitive.DateTime `json:"createdAt"`
	UpdatedAt            primitive.DateTime `json:"updatedAt"`
	CreatedBy            *UserProfile       `json:"createdBy,omitempty"`
	ProgramEnrollment    *ProgramEnrollment `json:"programEnrollment,omitempty"`
}

type RetailerProfiles struct {
	TotalCount int                `json:"totalCount"`
	Profiles   []*RetailerProfile `json:"profiles"`
}

func (RetailerProfiles) IsRetailersQueryResult() {}

type RetailersBlocked struct {
	UserIds []string `json:"userIds"`
}

type RetailersInput struct {
	PageSize             int                     `json:"pageSize"`
	PageNumber           int                     `json:"pageNumber"`
	MatchingAddress      string                  `json:"matchingAddress"`
	MatchingName         string                  `json:"matchingName"`
	MatchingText         string                  `json:"matchingText"`
	MatchingPhoneOrEmail string                  `json:"matchingPhoneOrEmail"`
	MatchingUserIds      []primitive.ObjectID    `json:"matchingUserIds,omitempty"`
	TerritoriesFilter    *TerritoriesFilter      `json:"territoriesFilter,omitempty"`
	LandmarksFilter      *LandmarksFilter        `json:"landmarksFilter,omitempty"`
	CategoriesFilter     *CategoriesFilter       `json:"categoriesFilter,omitempty"`
	CategoryOptions      []*SelectionOptionInput `json:"categoryOptions,omitempty"`
	GeoFilter            *GeoFilter              `json:"geoFilter,omitempty"`
	TimeFilter           *TimeFilter             `json:"timeFilter,omitempty"`
	RoleFilter           *RoleFilter             `json:"roleFilter,omitempty"`
	LevelFilter          *LevelFilter            `json:"levelFilter,omitempty"`
	Recommended          *bool                   `json:"recommended,omitempty"`
	Favorited            *bool                   `json:"favorited,omitempty"`
	Approved             *bool                   `json:"approved,omitempty"`
	SortBy               *SortBy                 `json:"sortBy,omitempty"`
}

type ReviewScoreOption struct {
	ID      string               `json:"id"`
	Name    string               `json:"name"`
	IconURL string               `json:"iconUrl"`
	Score   float64              `json:"score"`
	Options []*ReviewScoreOption `json:"options,omitempty"`
}

type RoleFilter struct {
	Option int `json:"option"`
}

type Schedule struct {
	Day      int  `json:"day"`
	Hour     int  `json:"hour"`
	Minute   int  `json:"minute"`
	Repeated bool `json:"repeated"`
}

type ScheduleInput struct {
	Day      int  `json:"day"`
	Hour     int  `json:"hour"`
	Minute   int  `json:"minute"`
	Repeated bool `json:"repeated"`
}

type SelectOption struct {
	ID      string          `json:"id"`
	Name    string          `json:"name"`
	IconURL string          `json:"iconUrl"`
	Options []*SelectOption `json:"options,omitempty"`
}

type SelectOptionFilter struct {
	ID      string                `json:"id"`
	Name    string                `json:"name"`
	Options []*SelectOptionFilter `json:"options,omitempty"`
}

type SelectionOption struct {
	ID      string             `json:"id"`
	Name    string             `json:"name"`
	Options []*SelectionOption `json:"options,omitempty"`
}

type SelectionOptionInput struct {
	ID      string                  `json:"id"`
	Name    string                  `json:"name"`
	Options []*SelectionOptionInput `json:"options,omitempty"`
}

type SendMessageInput struct {
	Message      *MessageInput      `json:"message"`
	PetsFilters  *PetsFiltersInput  `json:"petsFilters,omitempty"`
	UsersFilters *UsersFiltersInput `json:"usersFilters,omitempty"`
	EventFilter  *EventFilterInput  `json:"eventFilter,omitempty"`
	WetRun       bool               `json:"wetRun"`
	JobID        primitive.ObjectID `json:"jobId"`
}

type ServiceError struct {
	Code int    `json:"code"`
	Msg  string `json:"msg"`
}

func (ServiceError) IsAdoptionAdQueryResult() {}

func (ServiceError) IsAdoptionAdsQueryResult() {}

func (ServiceError) IsAdoptionAgenciesQueryResult() {}

func (ServiceError) IsAppConfigQueryResult() {}

func (ServiceError) IsBannersQueryResult() {}

func (ServiceError) IsCheckInCounterQueryResult() {}

func (ServiceError) IsCheckInCountersQueryResult() {}

func (ServiceError) IsCheckInRecordQueryResult() {}

func (ServiceError) IsCheckInRecordsQueryResult() {}

func (ServiceError) IsCommentQueryResult() {}

func (ServiceError) IsCommentsQueryResult() {}

func (ServiceError) IsCommentsByUsersQueryResult() {}

func (ServiceError) IsCommentsByPetsQueryResult() {}

func (ServiceError) IsCSVFileExportResult() {}

func (ServiceError) IsEventsQueryResult() {}

func (ServiceError) IsEventQueryResult() {}

func (ServiceError) IsEventInvitationQueryResult() {}

func (ServiceError) IsEventInvitationsQueryResult() {}

func (ServiceError) IsEventParticipationQueryResult() {}

func (ServiceError) IsEventParticipationsQueryResult() {}

func (ServiceError) IsCreateEventParticipationResult() {}

func (ServiceError) IsEventParticipationCountQueryResult() {}

func (ServiceError) IsJobsResult() {}

func (ServiceError) IsUpdateProgramOrderResult() {}

func (ServiceError) IsProgramOrderQueryResult() {}

func (ServiceError) IsProgramOrdersQueryResult() {}

func (ServiceError) IsCreatePaymentIntentResult() {}

func (ServiceError) IsPetProfilesQueryResult() {}

func (ServiceError) IsPetQueryResult() {}

func (ServiceError) IsProductsQueryResult() {}

func (ServiceError) IsProductQueryResult() {}

func (ServiceError) IsProgramQueryResult() {}

func (ServiceError) IsProgramsQueryResult() {}

func (ServiceError) IsRefreshAccessTokenResult() {}

func (ServiceError) IsRetailersQueryResult() {}

func (ServiceError) IsCreateRetailerResult() {}

func (ServiceError) IsTasksQueryResult() {}

func (ServiceError) IsPointTransactionQueryResult() {}

func (ServiceError) IsPointTransactionsQueryResult() {}

func (ServiceError) IsLoginUserResult() {}

func (ServiceError) IsAdoptionAgencyQueryResult() {}

func (ServiceError) IsUserProfilesQueryResult() {}

func (ServiceError) IsUserProfileQueryResult() {}

func (ServiceError) IsUserAuthenticationResult() {}

func (ServiceError) IsAuthorizedOperationUsersQueryResult() {}

func (ServiceError) IsAuthorizedOperationUserQueryResult() {}

func (ServiceError) IsResetUserPasswordResult() {}

func (ServiceError) IsCreateUserAltResult() {}

func (ServiceError) IsVoucherQueryResult() {}

func (ServiceError) IsVouchersQueryResult() {}

func (ServiceError) IsVoucherOwnershipQueryResult() {}

func (ServiceError) IsVoucherOwnershipsQueryResult() {}

type SexesFilter struct {
	Names []string `json:"names"`
}

type ShareContent struct {
	Text       string `json:"text"`
	ImageURL   string `json:"imageUrl"`
	WebpageURL string `json:"webpageUrl"`
}

type ShoplineMerchantInfo struct {
	ID            primitive.ObjectID `json:"id" bson:"_id"`
	MerchantID    string             `json:"merchantId"`
	ApplicationID string             `json:"applicationId"`
	Name          string             `json:"name"`
	Email         string             `json:"email"`
	Handle        string             `json:"handle"`
	UpdatedAt     primitive.DateTime `json:"updatedAt"`
	AccessToken   string             `json:"accessToken"`
	Connected     bool               `json:"connected"`
}

type ShoplineMerchatInfoInput struct {
	MerchantID string `json:"merchantId"`
}

type SortBy struct {
	Field string `json:"field"`
	Order int    `json:"order"`
}

type SystemTransactionDetails struct {
	ReferenceID primitive.ObjectID          `json:"referenceId"`
	Type        SystemTransactionDetailType `json:"type"`
}

func (SystemTransactionDetails) IsTransactionDetails() {}

type Task struct {
	ID            primitive.ObjectID  `json:"id" bson:"_id"`
	Name          string              `json:"name"`
	Introduction  string              `json:"introduction"`
	IconURL       string              `json:"iconUrl"`
	DetailsURL    string              `json:"detailsUrl"`
	StartedAt     *primitive.DateTime `json:"startedAt,omitempty"`
	EndedAt       *primitive.DateTime `json:"endedAt,omitempty"`
	Type          TaskType            `json:"type"`
	Status        TaskStatus          `json:"status"`
	Points        *int64              `json:"points,omitempty"`
	VoucherID     *primitive.ObjectID `json:"voucherId,omitempty"`
	ShareContent  *ShareContent       `json:"shareContent,omitempty"`
	Participation *TaskParticipation  `json:"participation,omitempty"`
	Conditional   bool                `json:"conditional"`
	AppPage       *AppPage            `json:"appPage,omitempty"`
	PageParams    string              `json:"pageParams"`
}

type TaskFilter struct {
	Status *TaskStatus `json:"status,omitempty"`
	Type   *TaskType   `json:"type,omitempty"`
}

type TaskParticipation struct {
	ID                 primitive.ObjectID      `json:"id" bson:"_id"`
	UserID             primitive.ObjectID      `json:"userId"`
	TaskID             primitive.ObjectID      `json:"taskId"`
	Status             TaskParticipationStatus `json:"status"`
	CreatedAt          primitive.DateTime      `json:"createdAt"`
	UpdatedAt          primitive.DateTime      `json:"updatedAt"`
	CompletedAt        primitive.DateTime      `json:"completedAt"`
	ConfirmationUserID primitive.ObjectID      `json:"confirmationUserId"`
}

type TaskParticipationFilter struct {
	Status *TaskParticipationStatus `json:"status,omitempty"`
}

type TaskParticipationList struct {
	List []*TaskParticipation `json:"list"`
}

type TaskParticipationListInput struct {
	PageSize                 int                      `json:"pageSize"`
	PageNumber               int                      `json:"pageNumber"`
	UserID                   string                   `json:"userId"`
	StartTaskParticipationID string                   `json:"startTaskParticipationId"`
	Filter                   *TaskParticipationFilter `json:"filter,omitempty"`
}

type Tasks struct {
	TotalCount int64   `json:"totalCount"`
	Items      []*Task `json:"items"`
}

func (Tasks) IsTasksQueryResult() {}

type TasksInput struct {
	PageSize            int                      `json:"pageSize"`
	PageNumber          int                      `json:"pageNumber"`
	TaskFilter          *TaskFilter              `json:"taskFilter,omitempty"`
	ParticipationFilter *TaskParticipationFilter `json:"participationFilter,omitempty"`
}

type TerritoriesFilter struct {
	Territories []*TerritoryFilter `json:"territories"`
}

type TerritoryFilter struct {
	City     *SelectionOptionInput `json:"city,omitempty"`
	Region   *SelectionOptionInput `json:"region,omitempty"`
	District *SelectionOptionInput `json:"district,omitempty"`
}

type ThirdPartyTransactionDetails struct {
	CustomerPhone string        `json:"customerPhone"`
	CustomerEmail string        `json:"customerEmail"`
	CustomerName  string        `json:"customerName"`
	OrderID       string        `json:"orderId"`
	OrderNumber   string        `json:"orderNumber"`
	MerchantID    string        `json:"merchantId"`
	MerchantName  string        `json:"merchantName"`
	OrderPayment  *OrderPayment `json:"orderPayment,omitempty"`
}

func (ThirdPartyTransactionDetails) IsTransactionDetails() {}

type TimeFilter struct {
	Option int `json:"option"`
}

type TransferPointsInput struct {
	ToUserPhoneOrEmail string `json:"toUserPhoneOrEmail"`
	Amount             int64  `json:"amount"`
	Remarks            string `json:"remarks"`
}

type UnbindPhoneOrEmailInput struct {
	PhoneOrEmail     string `json:"phoneOrEmail"`
	VerificationCode string `json:"verificationCode"`
}

type UpdateAddionalPetPricing struct {
	MaxPets           *int64    `json:"maxPets,omitempty" bson:",omitempty"`
	Price             *int64    `json:"price,omitempty" bson:",omitempty"`
	PriceLabel        *string   `json:"priceLabel,omitempty" bson:",omitempty"`
	Currency          *Currency `json:"currency,omitempty" bson:",omitempty"`
	MaxCash           *int64    `json:"maxCash,omitempty" bson:",omitempty"`
	MinCash           *int64    `json:"minCash,omitempty" bson:",omitempty"`
	MaxPoints         *int64    `json:"maxPoints,omitempty" bson:",omitempty"`
	PointsCashRatio   *float64  `json:"pointsCashRatio,omitempty" bson:",omitempty"`
	ExtraPoints       *int64    `json:"extraPoints,omitempty" bson:",omitempty"`
	PointsRewardRatio *float64  `json:"pointsRewardRatio,omitempty" bson:",omitempty"`
}

type UpdateAdditionalParticipantPricing struct {
	MaxParticipants   *int64    `json:"maxParticipants,omitempty" bson:",omitempty"`
	Price             *int64    `json:"price,omitempty" bson:",omitempty"`
	PriceLabel        *string   `json:"priceLabel,omitempty" bson:",omitempty"`
	Currency          *Currency `json:"currency,omitempty" bson:",omitempty"`
	MaxCash           *int64    `json:"maxCash,omitempty" bson:",omitempty"`
	MinCash           *int64    `json:"minCash,omitempty" bson:",omitempty"`
	MaxPoints         *int64    `json:"maxPoints,omitempty" bson:",omitempty"`
	PointsCashRatio   *float64  `json:"pointsCashRatio,omitempty" bson:",omitempty"`
	ExtraPoints       *int64    `json:"extraPoints,omitempty" bson:",omitempty"`
	PointsRewardRatio *float64  `json:"pointsRewardRatio,omitempty" bson:",omitempty"`
}

type UpdateAdoptionAd struct {
	AgencyID  *primitive.ObjectID   `json:"agencyId,omitempty" bson:",omitempty"`
	PetName   *string               `json:"petName,omitempty" bson:",omitempty"`
	Sex       *Sex                  `json:"sex,omitempty" bson:",omitempty"`
	PetAge    *string               `json:"petAge,omitempty" bson:",omitempty"`
	Breed     *SelectionOptionInput `json:"breed,omitempty" bson:",omitempty"`
	PhotoUrls []string              `json:"photoUrls,omitempty" bson:",omitempty"`
	Remarks   *string               `json:"remarks,omitempty" bson:",omitempty"`
	Hidden    *bool                 `json:"hidden,omitempty" bson:",omitempty"`
	Adopted   *bool                 `json:"adopted,omitempty" bson:",omitempty"`
}

type UpdateAdoptionAdInput struct {
	ID primitive.ObjectID `json:"id" bson:"_id"`
	Ad *UpdateAdoptionAd  `json:"ad"`
}

type UpdateAdoptionAgency struct {
	UserID         *primitive.ObjectID    `json:"userId,omitempty" bson:",omitempty"`
	Name           *string                `json:"name,omitempty" bson:",omitempty"`
	AvatarURL      *string                `json:"avatarUrl,omitempty" bson:",omitempty"`
	Phone          *string                `json:"phone,omitempty" bson:",omitempty"`
	Address        *string                `json:"address,omitempty" bson:",omitempty"`
	GeoLocation    *GeoLocationInput      `json:"geoLocation,omitempty" bson:",omitempty"`
	WebsiteURL     *string                `json:"websiteUrl,omitempty" bson:",omitempty"`
	PhotoUrls      []string               `json:"photoUrls,omitempty" bson:",omitempty"`
	Introduction   *string                `json:"introduction,omitempty" bson:",omitempty"`
	Activity       *AdoptionActivityInput `json:"activity,omitempty" bson:",omitempty"`
	DonationMethod *DonationMethodInput   `json:"donationMethod,omitempty" bson:",omitempty"`
	Approved       *bool                  `json:"approved,omitempty" bson:",omitempty"`
}

type UpdateAdoptionAgencyInput struct {
	ID     primitive.ObjectID    `json:"id" bson:"_id"`
	Agency *UpdateAdoptionAgency `json:"agency"`
}

type UpdateAppConfig struct {
	Categories []*UpdateSelectOption `json:"categories,omitempty" bson:",omitempty"`
	Scores     []*UpdateSelectOption `json:"scores,omitempty" bson:",omitempty"`
	Breeds     []*UpdateSelectOption `json:"breeds,omitempty" bson:",omitempty"`
}

type UpdateAppConfigInput struct {
	Version  string           `json:"version"`
	Language Language         `json:"language"`
	Config   *UpdateAppConfig `json:"config"`
}

type UpdateAppVersionInfo struct {
	LatestReleasedVersion  *string `json:"latestReleasedVersion,omitempty" bson:",omitempty"`
	LowestSupportedVersion *string `json:"lowestSupportedVersion,omitempty" bson:",omitempty"`
	Details                *string `json:"details,omitempty" bson:",omitempty"`
	DetailsURL             *string `json:"detailsUrl,omitempty" bson:",omitempty"`
}

type UpdateAppVersionInfoInput struct {
	Name string                `json:"name"`
	Info *UpdateAppVersionInfo `json:"info"`
}

type UpdateBanner struct {
	Name          *string            `json:"name,omitempty" bson:",omitempty"`
	ImageURL      *string            `json:"imageUrl,omitempty" bson:",omitempty"`
	PopupImageURL *string            `json:"popupImageUrl,omitempty" bson:",omitempty"`
	AppPage       *AppPage           `json:"appPage,omitempty" bson:",omitempty"`
	PageParams    *string            `json:"pageParams,omitempty" bson:",omitempty"`
	DisplayPage   *BannerDisplayPage `json:"displayPage,omitempty" bson:",omitempty"`
	Visible       *bool              `json:"visible,omitempty" bson:",omitempty"`
}

type UpdateBannerInput struct {
	ID     primitive.ObjectID `json:"id"`
	Banner *UpdateBanner      `json:"banner"`
}

type UpdateBbmslOrder struct {
	ID                *int    `json:"id,omitempty" bson:",omitempty"`
	MerchantID        *int    `json:"merchantId,omitempty" bson:",omitempty"`
	MerchantReference *string `json:"merchantReference,omitempty" bson:",omitempty"`
	Currency          *string `json:"currency,omitempty" bson:",omitempty"`
	Amount            *int    `json:"amount,omitempty" bson:",omitempty"`
	NetAmount         *int    `json:"netAmount,omitempty" bson:",omitempty"`
	CreateTime        *string `json:"createTime,omitempty" bson:",omitempty"`
	UpdateTime        *string `json:"updateTime,omitempty" bson:",omitempty"`
	Status            *string `json:"status,omitempty" bson:",omitempty"`
	Recurring         *bool   `json:"recurring,omitempty" bson:",omitempty"`
}

type UpdateBbmslReference struct {
	CheckoutURL *string           `json:"checkoutUrl,omitempty" bson:",omitempty"`
	Order       *UpdateBbmslOrder `json:"order,omitempty" bson:",omitempty"`
}

type UpdateCheckInCounter struct {
	Name                  *string                      `json:"name,omitempty" bson:",omitempty"`
	Greetings             *string                      `json:"greetings,omitempty" bson:",omitempty"`
	ProductID             *primitive.ObjectID          `json:"productId,omitempty" bson:",omitempty"`
	ProductName           *string                      `json:"productName,omitempty" bson:",omitempty"`
	QRCodeURL             *string                      `json:"qrCodeUrl,omitempty" bson:",omitempty"`
	Points                *int64                       `json:"points,omitempty" bson:",omitempty"`
	ValidTo               *primitive.DateTime          `json:"validTo,omitempty" bson:",omitempty"`
	ValidFrom             *primitive.DateTime          `json:"validFrom,omitempty" bson:",omitempty"`
	GeoLocationConstraint *UpdateGeoLocationConstraint `json:"geoLocationConstraint,omitempty" bson:",omitempty"`
}

type UpdateCheckInCounterInput struct {
	ID      primitive.ObjectID    `json:"id"`
	Counter *UpdateCheckInCounter `json:"counter"`
}

type UpdateComment struct {
	PetID          *primitive.ObjectID        `json:"petId,omitempty" bson:",omitempty"`
	RetailerUserID *primitive.ObjectID        `json:"retailerUserId,omitempty" bson:",omitempty"`
	ProductID      *primitive.ObjectID        `json:"productId,omitempty" bson:",omitempty"`
	Title          *string                    `json:"title,omitempty" bson:",omitempty"`
	CoverURL       *string                    `json:"coverUrl,omitempty" bson:",omitempty"`
	Details        *string                    `json:"details,omitempty" bson:",omitempty"`
	PictureUrls    []string                   `json:"pictureUrls,omitempty" bson:",omitempty"`
	Photos         []*UpdatePhoto             `json:"photos,omitempty" bson:",omitempty"`
	AverageScore   *float64                   `json:"averageScore,omitempty" bson:",omitempty"`
	Scores         []*UpdateReviewScoreOption `json:"scores,omitempty" bson:",omitempty"`
	Recommended    *bool                      `json:"recommended,omitempty" bson:",omitempty"`
	Approved       *bool                      `json:"approved,omitempty" bson:",omitempty"`
}

type UpdateCommentInput struct {
	ID      *primitive.ObjectID `json:"id,omitempty"`
	Comment *UpdateComment      `json:"comment"`
}

type UpdateCommentatorCertificate struct {
	Status               *int                  `json:"status,omitempty" bson:",omitempty"`
	Level                *int                  `json:"level,omitempty" bson:",omitempty"`
	AvatarURL            *string               `json:"avatarUrl,omitempty" bson:",omitempty"`
	Name                 *string               `json:"name,omitempty" bson:",omitempty"`
	Phone                *string               `json:"phone,omitempty" bson:",omitempty"`
	SnsPlatformName      *string               `json:"snsPlatformName,omitempty" bson:",omitempty"`
	SnsPlatformSelection *SelectionOptionInput `json:"snsPlatformSelection,omitempty" bson:",omitempty"`
}

type UpdateCommentatorCertificateInput struct {
	PetID       primitive.ObjectID            `json:"petId"`
	Certificate *UpdateCommentatorCertificate `json:"certificate"`
}

type UpdateContactInfo struct {
	Name       *string `json:"name,omitempty" bson:",omitempty"`
	Email      *string `json:"email,omitempty" bson:",omitempty"`
	Phone      *string `json:"phone,omitempty" bson:",omitempty"`
	Address    *string `json:"address,omitempty" bson:",omitempty"`
	SnsAccount *string `json:"snsAccount,omitempty" bson:",omitempty"`
	Remarks    *string `json:"remarks,omitempty" bson:",omitempty"`
}

type UpdateContest struct {
	Id        string `json:"id"`
	Name      string `json:"name"`
	StartDate string `json:"startDate"`
	EndDate   string `json:"endDate"`
	PosterUrl string `json:"posterUrl"`
	Active    bool   `json:"active"`
}

type UpdateContestCandidate struct {
	Id          string `json:"id"`
	PetName     string `json:"petName"`
	PetPhotoUrl string `json:"petPhotoUrl"`
	PetSnsUrl   string `json:"petSnsUrl"`
	Sequence    int    `json:"sequence"`
}

type UpdateContestCandidateEnrollment struct {
	Id         string                  `json:"id"`
	Enrollment *ContestEnrollmentInput `json:"enrollment"`
}

type UpdateContestCandidateExtraNumberOfVotes struct {
	Id                 string `json:"id"`
	ExtraNumberOfVotes int    `json:"extraNumberOfVotes"`
}

type UpdateEvent struct {
	UserID                       *primitive.ObjectID                 `json:"userId,omitempty" bson:",omitempty"`
	AuthorizedOperationUserIds   []primitive.ObjectID                `json:"authorizedOperationUserIds,omitempty" bson:",omitempty"`
	Name                         *string                             `json:"name,omitempty" bson:",omitempty"`
	Type                         *EventType                          `json:"type,omitempty" bson:",omitempty"`
	RetailerAvatarURL            *string                             `json:"retailerAvatarUrl,omitempty" bson:",omitempty"`
	Status                       *EventStatus                        `json:"status,omitempty" bson:",omitempty"`
	Online                       *bool                               `json:"online,omitempty" bson:",omitempty"`
	Introduction                 *string                             `json:"introduction,omitempty" bson:",omitempty"`
	Details                      *string                             `json:"details,omitempty" bson:",omitempty"`
	Notice                       *string                             `json:"notice,omitempty" bson:",omitempty"`
	Terms                        *string                             `json:"terms,omitempty" bson:",omitempty"`
	AdditionalTermsZh            *string                             `json:"additionalTermsZh,omitempty" bson:",omitempty"`
	AdditionalTermsEn            *string                             `json:"additionalTermsEn,omitempty" bson:",omitempty"`
	PhoneNumber                  *string                             `json:"phoneNumber,omitempty" bson:",omitempty"`
	WebsiteURL                   *string                             `json:"websiteUrl,omitempty" bson:",omitempty"`
	FacebookAccount              *string                             `json:"facebookAccount,omitempty" bson:",omitempty"`
	InstagramAccount             *string                             `json:"instagramAccount,omitempty" bson:",omitempty"`
	Photos                       []*UpdatePhoto                      `json:"photos,omitempty" bson:",omitempty"`
	ActivityURL                  *string                             `json:"activityUrl,omitempty" bson:",omitempty"`
	TimeSlots                    []*UpdateEventTimeSlot              `json:"timeSlots,omitempty" bson:",omitempty"`
	TimezoneOffset               *float64                            `json:"timezoneOffset,omitempty" bson:",omitempty"`
	StartedAt                    *primitive.DateTime                 `json:"startedAt,omitempty" bson:",omitempty"`
	EndedAt                      *primitive.DateTime                 `json:"endedAt,omitempty" bson:",omitempty"`
	PackagePricing               *UpdateEventPackagePricing          `json:"packagePricing,omitempty" bson:",omitempty"`
	AdditionalParticipantPricing *UpdateAdditionalParticipantPricing `json:"additionalParticipantPricing,omitempty" bson:",omitempty"`
	AdditionalPetPricing         *UpdateAddionalPetPricing           `json:"additionalPetPricing,omitempty" bson:",omitempty"`
	MaxParticipationsPerUser     *int64                              `json:"maxParticipationsPerUser,omitempty" bson:",omitempty"`
	Category                     *UpdateSelectionOption              `json:"category,omitempty" bson:",omitempty"`
	Address                      *string                             `json:"address,omitempty" bson:",omitempty"`
	Region                       *UpdateSelectionOption              `json:"region,omitempty" bson:",omitempty"`
	District                     *UpdateSelectionOption              `json:"district,omitempty" bson:",omitempty"`
	GeoLocation                  *UpdateGeoLocation                  `json:"geoLocation,omitempty" bson:",omitempty"`
	Recommended                  *bool                               `json:"recommended,omitempty" bson:",omitempty"`
	Approved                     *bool                               `json:"approved,omitempty" bson:",omitempty"`
	Published                    *bool                               `json:"published,omitempty" bson:",omitempty"`
	ParticipationOpen            *bool                               `json:"participationOpen,omitempty" bson:",omitempty"`
	PetPhotoRequired             *bool                               `json:"petPhotoRequired,omitempty" bson:",omitempty"`
	ShareContent                 *UpdateShareContent                 `json:"shareContent,omitempty" bson:",omitempty"`
}

type UpdateEventInput struct {
	ID    primitive.ObjectID `json:"id"`
	Event *UpdateEvent       `json:"event"`
}

type UpdateEventInvitation struct {
	EventID   *primitive.ObjectID `json:"eventId,omitempty" bson:",omitempty"`
	StartedAt *primitive.DateTime `json:"startedAt,omitempty" bson:",omitempty"`
	EndedAt   *primitive.DateTime `json:"endedAt,omitempty" bson:",omitempty"`
}

type UpdateEventInvitationInput struct {
	ID         primitive.ObjectID     `json:"id"`
	Invitation *UpdateEventInvitation `json:"invitation"`
}

type UpdateEventPackagePricing struct {
	MaxParticipants   *int64    `json:"maxParticipants,omitempty" bson:",omitempty"`
	MaxPets           *int64    `json:"maxPets,omitempty" bson:",omitempty"`
	Price             *int64    `json:"price,omitempty" bson:",omitempty"`
	PriceLabel        *string   `json:"priceLabel,omitempty" bson:",omitempty"`
	Currency          *Currency `json:"currency,omitempty" bson:",omitempty"`
	MaxCash           *int64    `json:"maxCash,omitempty" bson:",omitempty"`
	MinCash           *int64    `json:"minCash,omitempty" bson:",omitempty"`
	MaxPoints         *int64    `json:"maxPoints,omitempty" bson:",omitempty"`
	PointsCashRatio   *float64  `json:"pointsCashRatio,omitempty" bson:",omitempty"`
	ExtraPoints       *int64    `json:"extraPoints,omitempty" bson:",omitempty"`
	PointsRewardRatio *float64  `json:"pointsRewardRatio,omitempty" bson:",omitempty"`
	Remarks           *string   `json:"remarks,omitempty" bson:",omitempty"`
}

type UpdateEventParticipant struct {
	Name        *string             `json:"name,omitempty" bson:",omitempty"`
	PhoneNumber *string             `json:"phoneNumber,omitempty" bson:",omitempty"`
	UserID      *primitive.ObjectID `json:"userId,omitempty" bson:",omitempty"`
}

type UpdateEventParticipation struct {
	PackageParticipants    []*UpdateEventParticipant `json:"packageParticipants,omitempty" bson:",omitempty"`
	PackagePets            []*UpdateEventPet         `json:"packagePets,omitempty" bson:",omitempty"`
	AdditionalParticipants []*UpdateEventParticipant `json:"additionalParticipants,omitempty" bson:",omitempty"`
	AdditionalPets         []*UpdateEventPet         `json:"additionalPets,omitempty" bson:",omitempty"`
	Status                 *EventParticipationStatus `json:"status,omitempty" bson:",omitempty"`
	PaymentIntent          *UpdatePaymentIntent      `json:"paymentIntent,omitempty" bson:",omitempty"`
}

type UpdateEventParticipationInput struct {
	ID                     *primitive.ObjectID       `json:"id,omitempty"`
	RedemptionCode         *string                   `json:"redemptionCode,omitempty"`
	ChannelPaymentIntentID *string                   `json:"channelPaymentIntentId,omitempty"`
	Participation          *UpdateEventParticipation `json:"participation"`
}

type UpdateEventParticipationStatusInput struct {
	EventParticipationID                     *primitive.ObjectID      `json:"eventParticipationId,omitempty"`
	EventParticipationRedemptionCode         *string                  `json:"eventParticipationRedemptionCode,omitempty"`
	EventParticipationChannelPaymentIntentID *string                  `json:"eventParticipationChannelPaymentIntentId,omitempty"`
	Status                                   EventParticipationStatus `json:"status"`
}

type UpdateEventPet struct {
	Name     *string             `json:"name,omitempty" bson:",omitempty"`
	PhotoURL *string             `json:"photoUrl,omitempty" bson:",omitempty"`
	PetID    *primitive.ObjectID `json:"petId,omitempty" bson:",omitempty"`
}

type UpdateEventTicket struct {
	EventID         *primitive.ObjectID `json:"eventId,omitempty" bson:",omitempty"`
	Status          *EventTicketStatus  `json:"status,omitempty" bson:",omitempty"`
	ParticipationID *primitive.ObjectID `json:"participationId,omitempty"`
}

type UpdateEventTicketInput struct {
	ID     primitive.ObjectID `json:"id"`
	Ticket *UpdateEventTicket `json:"ticket"`
}

type UpdateEventTicketsInput struct {
	Ids             []primitive.ObjectID `json:"Ids,omitempty"`
	ParticipationID *primitive.ObjectID  `json:"participationId,omitempty"`
	Ticket          *UpdateEventTicket   `json:"ticket"`
}

type UpdateEventTimeSlot struct {
	StartedAt                 *primitive.DateTime    `json:"startedAt,omitempty" bson:",omitempty"`
	EndedAt                   *primitive.DateTime    `json:"endedAt,omitempty" bson:",omitempty"`
	DisplayStartedAt          *string                `json:"displayStartedAt,omitempty" bson:",omitempty"`
	DisplayEndedAt            *string                `json:"displayEndedAt,omitempty" bson:",omitempty"`
	MaxPackages               *int64                 `json:"maxPackages,omitempty" bson:",omitempty"`
	MaxAdditionalParticipants *int                   `json:"maxAdditionalParticipants,omitempty" bson:",omitempty"`
	MaxAdditionalPets         *int                   `json:"maxAdditionalPets,omitempty" bson:",omitempty"`
	SubSlots                  []*UpdateEventTimeSlot `json:"subSlots,omitempty" bson:",omitempty"`
}

type UpdateGeoJSONPoint struct {
	Type        string    `json:"type"`
	Coordinates []float64 `json:"coordinates"`
}

type UpdateGeoLocation struct {
	Long *float64 `json:"long,omitempty" bson:",omitempty"`
	Lat  *float64 `json:"lat,omitempty" bson:",omitempty"`
}

type UpdateGeoLocationConstraint struct {
	Location    *UpdateGeoJSONPoint `json:"location,omitempty"`
	Enabled     bool                `json:"enabled"`
	GeoLocation *GeoLocationInput   `json:"geoLocation,omitempty"`
}

type UpdateJobActivationInput struct {
	JobId   primitive.ObjectID          `json:"jobId"`
	Payload *UpdateJobActivationPayload `json:"payload"`
}

type UpdateJobActivationPayload struct {
	Activated bool `json:"activated"`
}

type UpdateJobEntryIDInput struct {
	JobId   primitive.ObjectID       `json:"jobId"`
	Payload *UpdateJobEntryIDPayload `json:"payload"`
}

type UpdateJobEntryIDPayload struct {
	EntryID int `json:"entryId"`
}

type UpdateJobInput struct {
	Id      primitive.ObjectID `json:"id"`
	Payload *UpdateJobPayload  `json:"payload"`
}

type UpdateJobPayload struct {
	Name         string             `json:"name" bson:",omitempty"`
	Type         *JobType           `json:"type,omitempty" bson:",omitempty"`
	Schedule     *ScheduleInput     `json:"schedule,omitempty" bson:",omitempty"`
	Message      *MessageInput      `json:"message,omitempty" bson:",omitempty"`
	UsersFilters *UsersFiltersInput `json:"usersFilters,omitempty"`
	PetsFilters  *PetsFiltersInput  `json:"petsFilters,omitempty"`
}

type UpdateMoment struct {
	Id         string `json:"id"`
	Title      string `json:"title"`
	Link       string `json:"link"`
	MediaUrl   string `json:"mediaUrl"`
	IsTemplate bool   `json:"isTemplate"`
}

type UpdateNameTranslations struct {
	En     string `json:"en"`
	ZhHant string `json:"zhHant"`
}

type UpdateOrderPayment struct {
	PaymentMethodID  *string                 `json:"paymentMethodId,omitempty" bson:",omitempty"`
	PaymentType      *string                 `json:"paymentType,omitempty" bson:",omitempty"`
	NameTranslations *UpdateNameTranslations `json:"nameTranslations,omitempty" bson:",omitempty"`
	PaymentStatus    *string                 `json:"paymentStatus,omitempty" bson:",omitempty"`
	Total            *float64                `json:"total,omitempty" bson:",omitempty"`
	TotalLabel       *string                 `json:"totalLabel,omitempty" bson:",omitempty"`
}

type UpdatePaymentIntent struct {
	Status                 *PaymentIntentStatus `json:"status,omitempty" bson:",omitempty"`
	Amount                 *int64               `json:"amount,omitempty" bson:",omitempty"`
	Currency               *Currency            `json:"currency,omitempty" bson:",omitempty"`
	DeductedPoints         *int64               `json:"deductedPoints,omitempty" bson:",omitempty"`
	RewardedPoints         *int64               `json:"rewardedPoints,omitempty" bson:",omitempty"`
	ChannelPaymentIntentID *string              `json:"channelPaymentIntentId,omitempty" bson:",omitempty"`
	Channel                *PaymentChannel      `json:"channel,omitempty" bson:",omitempty"`
	ChannelClientSecret    *string              `json:"channelClientSecret,omitempty" bson:",omitempty"`
}

type UpdatePetCertificatesInput struct {
	PetID primitive.ObjectID `json:"petId"`
	Urls  []string           `json:"urls"`
}

type UpdatePetProfileInput struct {
	ID                 primitive.ObjectID    `json:"id"`
	AvatarURL          *string               `json:"avatarUrl,omitempty" bson:",omitempty"`
	IDPhotoURL         *string               `json:"idPhotoUrl,omitempty" bson:",omitempty"`
	IDCardURL          *string               `json:"idCardUrl,omitempty" bson:",omitempty"`
	IDCardBgRmdURL     *string               `json:"idCardBgRmdUrl,omitempty" bson:",omitempty"`
	Name               *string               `json:"name,omitempty" bson:",omitempty"`
	NameZh             *string               `json:"nameZh,omitempty" bson:",omitempty"`
	NameEn             *string               `json:"nameEn,omitempty" bson:",omitempty"`
	Birthday           *primitive.DateTime   `json:"birthday,omitempty" bson:",omitempty"`
	DepartureDate      *primitive.DateTime   `json:"departureDate,omitempty"`
	BreedName          *string               `json:"breedName,omitempty" bson:",omitempty"`
	Breed              *SelectionOptionInput `json:"breed,omitempty" bson:",omitempty"`
	PetOwnerSnsAccount *string               `json:"petOwnerSnsAccount,omitempty" bson:",omitempty"`
	Sex                *Sex                  `json:"sex,omitempty" bson:",omitempty"`
	HomeArrivalDate    *string               `json:"homeArrivalDate,omitempty" bson:",omitempty"`
}

type UpdatePhoto struct {
	URL         *string `json:"url,omitempty" bson:",omitempty"`
	Description *string `json:"description,omitempty" bson:",omitempty"`
}

type UpdateProduct struct {
	UserID                     *primitive.ObjectID      `json:"userId,omitempty" bson:",omitempty"`
	AuthorizedOperationUserIds []primitive.ObjectID     `json:"authorizedOperationUserIds,omitempty" bson:",omitempty"`
	Name                       *string                  `json:"name,omitempty" bson:",omitempty"`
	Type                       *ProductType             `json:"type,omitempty" bson:",omitempty"`
	Online                     *bool                    `json:"online,omitempty" bson:",omitempty"`
	Introduction               *string                  `json:"introduction,omitempty" bson:",omitempty"`
	Details                    *string                  `json:"details,omitempty" bson:",omitempty"`
	ServiceLocation            *string                  `json:"serviceLocation,omitempty" bson:",omitempty"`
	Notice                     *string                  `json:"notice,omitempty" bson:",omitempty"`
	Terms                      *string                  `json:"terms,omitempty" bson:",omitempty"`
	CategoryOptions            []*UpdateSelectionOption `json:"categoryOptions,omitempty" bson:",omitempty"`
	Photos                     []*UpdatePhoto           `json:"photos,omitempty" bson:",omitempty"`
	Pricing                    *UpdateProductPricing    `json:"pricing,omitempty" bson:",omitempty"`
	Recommended                *bool                    `json:"recommended,omitempty" bson:",omitempty"`
	Rating                     *float64                 `json:"rating,omitempty" bson:",omitempty"`
	Available                  *bool                    `json:"available,omitempty" bson:",omitempty"`
	ShareContent               *UpdateShareContent      `json:"shareContent,omitempty" bson:",omitempty"`
}

type UpdateProductInput struct {
	ID      primitive.ObjectID `json:"id"`
	Product *UpdateProduct     `json:"product"`
}

type UpdateProductPricing struct {
	MaxParticipants   *int64    `json:"maxParticipants,omitempty" bson:",omitempty"`
	MaxPets           *int64    `json:"maxPets,omitempty" bson:",omitempty"`
	Price             *int64    `json:"price,omitempty" bson:",omitempty"`
	PriceLabel        *string   `json:"priceLabel,omitempty" bson:",omitempty"`
	Currency          *Currency `json:"currency,omitempty" bson:",omitempty"`
	MaxCash           *int64    `json:"maxCash,omitempty" bson:",omitempty"`
	MinCash           *int64    `json:"minCash,omitempty" bson:",omitempty"`
	MaxPoints         *int64    `json:"maxPoints,omitempty" bson:",omitempty"`
	PointsCashRatio   *float64  `json:"pointsCashRatio,omitempty" bson:",omitempty"`
	ExtraPoints       *int64    `json:"extraPoints,omitempty" bson:",omitempty"`
	PointsRewardRatio *float64  `json:"pointsRewardRatio,omitempty" bson:",omitempty"`
	Remarks           *string   `json:"remarks,omitempty" bson:",omitempty"`
}

type UpdateProgram struct {
	Name           *string `json:"name,omitempty" bson:",omitempty"`
	Price          *int    `json:"price,omitempty" bson:",omitempty"`
	DaysOfValidity *int    `json:"daysOfValidity,omitempty" bson:",omitempty"`
	Available      *bool   `json:"available,omitempty" bson:",omitempty"`
}

type UpdateProgramEnrollmentInput struct {
	UserID         primitive.ObjectID `json:"userId"`
	ProgramID      primitive.ObjectID `json:"programId"`
	DaysOfValidity int                `json:"daysOfValidity"`
}

type UpdateProgramInput struct {
	ID      primitive.ObjectID `json:"id"`
	Program *UpdateProgram     `json:"program"`
}

type UpdateProgramOrder struct {
	Name           *string               `json:"name,omitempty" bson:",omitempty"`
	ProgramID      *primitive.ObjectID   `json:"programId,omitempty" bson:",omitempty"`
	Status         *OrderStatus          `json:"status,omitempty" bson:",omitempty"`
	Amount         *int                  `json:"amount,omitempty" bson:",omitempty"`
	PaymentIntent  *UpdatePaymentIntent  `json:"paymentIntent,omitempty" bson:",omitempty"`
	BbmslReference *UpdateBbmslReference `json:"bbmslReference,omitempty" bson:",omitempty"`
}

type UpdateProgramOrderInput struct {
	ID    *primitive.ObjectID `json:"id,omitempty"`
	Order *UpdateProgramOrder `json:"order,omitempty"`
}

type UpdateRetailerProfile struct {
	AvatarURL        string                  `json:"avatarUrl" bson:",omitempty"`
	Name             string                  `json:"name" bson:",omitempty"`
	Phone            string                  `json:"phone" bson:",omitempty"`
	Email            string                  `json:"email" bson:",omitempty"`
	GeoLocation      *GeoLocationInput       `json:"geoLocation,omitempty" bson:",omitempty"`
	ShopPhotoUrls    []string                `json:"shopPhotoUrls,omitempty" bson:",omitempty"`
	ShopPhotos       []*PhotoInput           `json:"shopPhotos,omitempty" bson:",omitempty"`
	ShopIntro        string                  `json:"shopIntro" bson:",omitempty"`
	City             *SelectionOptionInput   `json:"city,omitempty" bson:",omitempty"`
	Region           *SelectionOptionInput   `json:"region,omitempty" bson:",omitempty"`
	District         *SelectionOptionInput   `json:"district,omitempty" bson:",omitempty"`
	Landmark         *SelectionOptionInput   `json:"landmark,omitempty" bson:",omitempty"`
	Address          string                  `json:"address" bson:",omitempty"`
	PaymentMethods   []*SelectionOptionInput `json:"paymentMethods,omitempty" bson:",omitempty"`
	Category         *SelectionOptionInput   `json:"category,omitempty" bson:",omitempty"`
	CategoryOptions  []*SelectionOptionInput `json:"categoryOptions,omitempty" bson:",omitempty"`
	SortingOption    *SelectionOptionInput   `json:"sortingOption,omitempty" bson:",omitempty"`
	Promotions       *string                 `json:"promotions,omitempty" bson:",omitempty"`
	OpeningHours     *string                 `json:"openingHours,omitempty" bson:",omitempty"`
	Routes           string                  `json:"routes" bson:",omitempty"`
	WebsiteURL       string                  `json:"websiteUrl" bson:",omitempty"`
	FacebookAccount  string                  `json:"facebookAccount" bson:",omitempty"`
	InstagramAccount string                  `json:"instagramAccount" bson:",omitempty"`
	WhatsappAccount  string                  `json:"whatsappAccount" bson:",omitempty"`
	RedbookAccount   string                  `json:"redbookAccount" bson:",omitempty"`
	ShareContent     *UpdateShareContent     `json:"shareContent,omitempty" bson:",omitempty"`
	BusinessLicense  *string                 `json:"businessLicense,omitempty" bson:",omitempty"`
	Rating           *float64                `json:"rating,omitempty" bson:",omitempty"`
	Sequence         *int                    `json:"sequence,omitempty" bson:",omitempty"`
}

type UpdateRetailerProfileInput struct {
	UserID  *primitive.ObjectID    `json:"userId,omitempty"`
	Profile *UpdateRetailerProfile `json:"profile,omitempty"`
}

type UpdateRetailerRatingInput struct {
	UserID primitive.ObjectID `json:"userId"`
	Rating float64            `json:"rating"`
}

type UpdateRetailerRecommendationInput struct {
	UserID      primitive.ObjectID `json:"userId"`
	Recommended bool               `json:"recommended"`
}

type UpdateReviewScoreOption struct {
	ID      string                     `json:"id"`
	Name    *string                    `json:"name,omitempty" bson:",omitempty"`
	IconURL *string                    `json:"iconUrl,omitempty" bson:",omitempty"`
	Score   *float64                   `json:"score,omitempty" bson:",omitempty"`
	Options []*UpdateReviewScoreOption `json:"options,omitempty" bson:",omitempty"`
}

type UpdateSelectOption struct {
	ID      string                `json:"id"`
	Name    *string               `json:"name,omitempty" bson:",omitempty"`
	IconURL *string               `json:"iconUrl,omitempty" bson:",omitempty"`
	Options []*UpdateSelectOption `json:"options,omitempty" bson:",omitempty"`
}

type UpdateSelectionOption struct {
	ID      *string                  `json:"id,omitempty" bson:",omitempty"`
	Name    *string                  `json:"name,omitempty" bson:",omitempty"`
	Options []*UpdateSelectionOption `json:"options,omitempty" bson:",omitempty"`
}

type UpdateShareContent struct {
	Text       *string `json:"text,omitempty" bson:",omitempty"`
	ImageURL   *string `json:"imageUrl,omitempty" bson:",omitempty"`
	WebpageURL *string `json:"webpageUrl,omitempty" bson:",omitempty"`
}

type UpdateShoplineMerchantInfo struct {
	Name          *string `json:"name,omitempty" bson:",omitempty"`
	Email         *string `json:"email,omitempty" bson:",omitempty"`
	Handle        *string `json:"handle,omitempty" bson:",omitempty"`
	AccessToken   *string `json:"accessToken,omitempty" bson:",omitempty"`
	Connected     *bool   `json:"connected,omitempty" bson:",omitempty"`
	ApplicationID *string `json:"applicationId,omitempty" bson:",omitempty"`
}

type UpdateShoplineMerchantInfoInput struct {
	MerchantID string                      `json:"merchantId"`
	Info       *UpdateShoplineMerchantInfo `json:"info"`
}

type UpdateSystemTransactionDetails struct {
	ReferenceID *primitive.ObjectID          `json:"referenceId,omitempty" bson:",omitempty"`
	Type        *SystemTransactionDetailType `json:"type,omitempty" bson:",omitempty"`
}

type UpdateTask struct {
	Name         *string             `json:"name,omitempty" bson:",omitempty"`
	Introduction *string             `json:"introduction,omitempty" bson:",omitempty"`
	IconURL      *string             `json:"iconUrl,omitempty" bson:",omitempty"`
	DetailsURL   *string             `json:"detailsUrl,omitempty" bson:",omitempty"`
	StartedAt    *primitive.DateTime `json:"startedAt,omitempty" bson:",omitempty"`
	EndedAt      *primitive.DateTime `json:"endedAt,omitempty" bson:",omitempty"`
	Type         *TaskType           `json:"type,omitempty" bson:",omitempty"`
	Status       *TaskStatus         `json:"status,omitempty" bson:",omitempty"`
	Points       *int64              `json:"points,omitempty" bson:",omitempty"`
	VoucherID    *primitive.ObjectID `json:"voucherId,omitempty" bson:",omitempty"`
	ShareContent *UpdateShareContent `json:"shareContent,omitempty" bson:",omitempty"`
	Conditional  *bool               `json:"conditional,omitempty" bson:",omitempty"`
	AppPage      *AppPage            `json:"appPage,omitempty" bson:",omitempty"`
	PageParams   *string             `json:"pageParams,omitempty" bson:",omitempty"`
}

type UpdateTaskInput struct {
	ID   primitive.ObjectID `json:"id"`
	Task *UpdateTask        `json:"task"`
}

type UpdateTaskParticipation struct {
	TaskID *primitive.ObjectID      `json:"taskId,omitempty" bson:",omitempty"`
	Status *TaskParticipationStatus `json:"status,omitempty" bson:",omitempty"`
}

type UpdateTaskParticipationInput struct {
	ID            primitive.ObjectID       `json:"id"`
	Participation *UpdateTaskParticipation `json:"participation"`
}

type UpdateThirdPartyPointTransactionDetails struct {
	OrderID       *string             `json:"orderId,omitempty" bson:",omitempty"`
	CustomerPhone *string             `json:"customerPhone,omitempty" bson:",omitempty"`
	CustomerEmail *string             `json:"customerEmail,omitempty" bson:",omitempty"`
	CustomerName  *string             `json:"customerName,omitempty" bson:",omitempty"`
	OrderNumber   *string             `json:"orderNumber,omitempty" bson:",omitempty"`
	MerchantID    *string             `json:"merchantId,omitempty" bson:",omitempty"`
	MerchantName  *string             `json:"merchantName,omitempty" bson:",omitempty"`
	OrderPayment  *UpdateOrderPayment `json:"orderPayment,omitempty" bson:",omitempty"`
}

type UpdateTransaction struct {
	UserID                       *primitive.ObjectID                      `json:"userId,omitempty" bson:",omitempty"`
	SourceEntity                 *TransactionSourceEntity                 `json:"sourceEntity,omitempty" bson:",omitempty"`
	Amount                       *int64                                   `json:"amount,omitempty" bson:",omitempty"`
	Accumulated                  *bool                                    `json:"accumulated,omitempty" bson:",omitempty"`
	Type                         *TransactionType                         `json:"type,omitempty" bson:",omitempty"`
	Remarks                      *string                                  `json:"remarks,omitempty" bson:",omitempty"`
	SystemTransactionDetails     *UpdateSystemTransactionDetails          `json:"systemTransactionDetails,omitempty" bson:",omitempty"`
	ThirdPartyTransactionDetails *UpdateThirdPartyPointTransactionDetails `json:"thirdPartyTransactionDetails,omitempty" bson:",omitempty"`
}

type UpdateTransactionInput struct {
	ID          primitive.ObjectID `json:"id"`
	Transaction *UpdateTransaction `json:"transaction"`
}

type UpdateUserBasicsInput struct {
	Sequence               *int                    `json:"sequence,omitempty" bson:",omitempty"`
	Name                   *string                 `json:"name,omitempty" bson:",omitempty"`
	FamilyName             *string                 `json:"familyName,omitempty" bson:",omitempty"`
	GivenName              *string                 `json:"givenName,omitempty" bson:",omitempty"`
	Nickname               *string                 `json:"nickname,omitempty" bson:",omitempty"`
	City                   *SelectionOptionInput   `json:"city,omitempty" bson:",omitempty"`
	Region                 *SelectionOptionInput   `json:"region,omitempty" bson:",omitempty"`
	District               *SelectionOptionInput   `json:"district,omitempty" bson:",omitempty"`
	QuestionnaireOptions   []*SelectionOptionInput `json:"questionnaireOptions,omitempty" bson:",omitempty"`
	InterestedCategories   []*SelectionOptionInput `json:"interestedCategories,omitempty"`
	SfLockerCode           *string                 `json:"sfLockerCode,omitempty" bson:",omitempty"`
	ProfileBackgroundImage *string                 `json:"profileBackgroundImage,omitempty" bson:",omitempty"`
	AvatarURL              *string                 `json:"avatarUrl,omitempty" bson:",omitempty"`
	Sex                    *SelectionOptionInput   `json:"sex,omitempty" bson:",omitempty"`
	AgeGroup               *SelectionOptionInput   `json:"ageGroup,omitempty" bson:",omitempty"`
	Phone                  *string                 `json:"phone,omitempty" bson:",omitempty"`
}

type UpdateUserPhoneOrEmail struct {
	Phone *string `json:"phone,omitempty" bson:",omitempty"`
	Email *string `json:"email,omitempty" bson:",omitempty"`
}

type UpdateUserPointsInput struct {
	UserID          primitive.ObjectID `json:"userId"`
	Points          int64              `json:"points"`
	Remarks         string             `json:"remarks"`
	TransactionType TransactionType    `json:"transactionType"`
}

type UpdateUserPrivileges struct {
	Role                          *int  `json:"role,omitempty" bson:",omitempty"`
	Level                         *int  `json:"level,omitempty" bson:",omitempty"`
	RedemptionOperationAuthorized *bool `json:"redemptionOperationAuthorized,omitempty" bson:",omitempty"`
}

type UpdateUserPrivilegesInput struct {
	UserID     primitive.ObjectID    `json:"userId"`
	Privileges *UpdateUserPrivileges `json:"privileges"`
}

type UpdateVoucher struct {
	RedemptionPoint            *int64               `json:"redemptionPoint,omitempty" bson:",omitempty"`
	Name                       *string              `json:"name,omitempty" bson:",omitempty"`
	Description                *string              `json:"description,omitempty" bson:",omitempty"`
	Terms                      *string              `json:"terms,omitempty" bson:",omitempty"`
	ValidFrom                  *primitive.DateTime  `json:"validFrom,omitempty" bson:",omitempty"`
	ValidTo                    *primitive.DateTime  `json:"validTo,omitempty" bson:",omitempty"`
	ImageURL                   *string              `json:"imageUrl,omitempty" bson:",omitempty"`
	RetailerAvatarURL          *string              `json:"retailerAvatarUrl,omitempty" bson:",omitempty"`
	AuthorizedOperationUserIds []primitive.ObjectID `json:"authorizedOperationUserIds,omitempty" bson:",omitempty"`
	Published                  *bool                `json:"published,omitempty" bson:",omitempty"`
	Exclusive                  *bool                `json:"exclusive,omitempty" bson:",omitempty"`
	Virtual                    *bool                `json:"virtual,omitempty" bson:",omitempty"`
	MaxOwnershipsPerUser       *int64               `json:"maxOwnershipsPerUser,omitempty" bson:",omitempty"`
}

type UpdateVoucherInput struct {
	ID      primitive.ObjectID `json:"id"`
	Voucher *UpdateVoucher     `json:"voucher"`
}

type UpdateVoucherOwnershipStatusInput struct {
	RedemptionCode string        `json:"redemptionCode"`
	Status         VoucherStatus `json:"status"`
}

type UserAuthentication struct {
	UserID       primitive.ObjectID `json:"userId"`
	AccessToken  string             `json:"accessToken"`
	RefreshToken string             `json:"refreshToken"`
	ErrCode      int                `json:"errCode"`
	Msg          string             `json:"msg"`
}

func (UserAuthentication) IsRefreshAccessTokenResult() {}

func (UserAuthentication) IsLoginUserResult() {}

func (UserAuthentication) IsUserAuthenticationResult() {}

type UserCountInput struct {
	MatchingText         string       `json:"matchingText"`
	MatchingPhoneOrEmail string       `json:"matchingPhoneOrEmail"`
	RoleFilter           *RoleFilter  `json:"roleFilter,omitempty"`
	LevelFilter          *LevelFilter `json:"levelFilter,omitempty"`
}

type UserCredentials struct {
	PhoneOrEmail string `json:"phoneOrEmail"`
	Password     string `json:"password"`
}

type UserProfile struct {
	ID                            primitive.ObjectID        `json:"id" bson:"_id"`
	Sequence                      int                       `json:"sequence"`
	Name                          string                    `json:"name"`
	Nickname                      string                    `json:"nickname"`
	Phone                         string                    `json:"phone"`
	Email                         string                    `json:"email"`
	City                          *SelectionOption          `json:"city,omitempty"`
	Region                        *SelectionOption          `json:"region,omitempty"`
	District                      *SelectionOption          `json:"district,omitempty"`
	SfLockerCode                  string                    `json:"sfLockerCode"`
	QuestionnaireOptions          []*SelectionOption        `json:"questionnaireOptions,omitempty"`
	InterestedCategories          []*SelectionOption        `json:"interestedCategories,omitempty"`
	Role                          int                       `json:"role"`
	Level                         int                       `json:"level"`
	Points                        int64                     `json:"points"`
	AvatarURL                     string                    `json:"avatarUrl"`
	FamilyName                    string                    `json:"familyName"`
	GivenName                     string                    `json:"givenName"`
	Sex                           *SelectionOption          `json:"sex,omitempty"`
	AgeGroup                      *SelectionOption          `json:"ageGroup,omitempty"`
	RedemptionOperationAuthorized bool                      `json:"redemptionOperationAuthorized"`
	ReferralUserID                *primitive.ObjectID       `json:"referralUserId,omitempty"`
	ReferralUser                  UserProfileQueryResult    `json:"referralUser"`
	FcmRegistrationTokens         []*FcmRegistrationToken   `json:"fcmRegistrationTokens"`
	AppleUserID                   string                    `json:"appleUserId"`
	GoogleUserID                  string                    `json:"googleUserId"`
	FacebookUserID                string                    `json:"facebookUserId"`
	Deactivated                   bool                      `json:"deactivated"`
	ProfileBackgroundImage        string                    `json:"profileBackgroundImage"`
	CreatedAt                     primitive.DateTime        `json:"createdAt"`
	UpdatedAt                     primitive.DateTime        `json:"updatedAt"`
	LastAccessAt                  primitive.DateTime        `json:"lastAccessAt"`
	LastAccessIP                  string                    `json:"lastAccessIp"`
	AdoptionAgency                AdoptionAgencyQueryResult `json:"adoptionAgency,omitempty"`
	RetailerProfile               *RetailerProfile          `json:"retailerProfile,omitempty"`
}

func (UserProfile) IsUserProfileQueryResult() {}

type UserProfileWithPassword struct {
	ID          primitive.ObjectID `json:"id" bson:"_id"`
	Password    string             `json:"password"`
	Role        int                `json:"role"`
	Level       int                `json:"level"`
	Email       string             `json:"email"`
	Phone       string             `json:"phone"`
	Deactivated bool               `json:"deactivated"`
}

type UserProfiles struct {
	TotalCount int            `json:"totalCount"`
	Profiles   []*UserProfile `json:"profiles"`
}

func (UserProfiles) IsUserProfilesQueryResult() {}

type UserProfilesInput struct {
	LastID                     primitive.ObjectID          `json:"lastId"`
	PageSize                   int                         `json:"pageSize"`
	PageNumber                 int                         `json:"pageNumber"`
	RoleFilter                 *RoleFilter                 `json:"roleFilter,omitempty"`
	FcmRegistrationTokenFilter *FcmRegistrationTokenFilter `json:"fcmRegistrationTokenFilter,omitempty"`
	MatchingPhonesOrEmails     []string                    `json:"matchingPhonesOrEmails,omitempty"`
	MatchingUserIds            []primitive.ObjectID        `json:"matchingUserIds,omitempty"`
	MatchingName               string                      `json:"matchingName"`
	Deactivated                bool                        `json:"deactivated"`
}

type UserWithPassword struct {
	ID       primitive.ObjectID `json:"id"`
	Password string             `json:"password"`
}

func (UserWithPassword) IsCreateRetailerResult() {}

func (UserWithPassword) IsResetUserPasswordResult() {}

func (UserWithPassword) IsCreateUserAltResult() {}

type UsersFilters struct {
	MatchingPhoneOrEmail string `json:"matchingPhoneOrEmail"`
}

type UsersFiltersInput struct {
	MatchingPhoneOrEmail string               `json:"matchingPhoneOrEmail"`
	UserIds              []primitive.ObjectID `json:"userIds,omitempty"`
}

type VerificationCodeGenerationResult struct {
	ErrCode int    `json:"errCode"`
	Msg     string `json:"msg"`
}

type VoteForCandidate struct {
	CandidateId string `json:"candidateId"`
}

type VotingResult struct {
	NumberOfVotes int  `json:"numberOfVotes"`
	Voted         bool `json:"voted"`
}

type Voucher struct {
	ID                         primitive.ObjectID   `json:"id" bson:"_id"`
	RedemptionPoint            int64                `json:"redemptionPoint"`
	CreatedAt                  *primitive.DateTime  `json:"createdAt,omitempty"`
	Name                       string               `json:"name"`
	Terms                      string               `json:"terms"`
	Description                string               `json:"description"`
	ValidFrom                  *primitive.DateTime  `json:"validFrom,omitempty"`
	ValidTo                    *primitive.DateTime  `json:"validTo,omitempty"`
	ImageURL                   string               `json:"imageUrl"`
	RetailerAvatarURL          string               `json:"retailerAvatarUrl"`
	AuthorizedOperationUserIds []primitive.ObjectID `json:"authorizedOperationUserIds"`
	MaxOwnershipsPerUser       int64                `json:"maxOwnershipsPerUser"`
	Published                  bool                 `json:"published"`
	Exclusive                  bool                 `json:"exclusive"`
	Virtual                    bool                 `json:"virtual"`
}

func (Voucher) IsVoucherQueryResult() {}

type VoucherOwnership struct {
	ID                           primitive.ObjectID     `json:"id" bson:"_id"`
	UserID                       primitive.ObjectID     `json:"userId"`
	User                         UserProfileQueryResult `json:"user"`
	VoucherID                    primitive.ObjectID     `json:"voucherId"`
	Voucher                      VoucherQueryResult     `json:"voucher"`
	Status                       VoucherStatus          `json:"status"`
	RedemptionCode               string                 `json:"redemptionCode"`
	CreatedAt                    *primitive.DateTime    `json:"createdAt,omitempty"`
	RedeemedAt                   *primitive.DateTime    `json:"redeemedAt,omitempty"`
	RedemptionConfirmationUserID *primitive.ObjectID    `json:"redemptionConfirmationUserId,omitempty"`
	ContactInfo                  *ContactInfo           `json:"contactInfo,omitempty"`
}

func (VoucherOwnership) IsVoucherOwnershipQueryResult() {}

type VoucherOwnershipCommonFilter struct {
	UserID *primitive.ObjectID `json:"userId,omitempty" bson:",omitempty"`
	Status *VoucherStatus      `json:"status,omitempty" bson:",omitempty"`
}

type VoucherOwnerships struct {
	TotalCount int64               `json:"totalCount"`
	Items      []*VoucherOwnership `json:"items"`
}

func (VoucherOwnerships) IsVoucherOwnershipsQueryResult() {}

type VoucherOwnershipsInput struct {
	PageNumber   int64                         `json:"pageNumber"`
	PageSize     int64                         `json:"pageSize"`
	CommonFilter *VoucherOwnershipCommonFilter `json:"commonFilter"`
	VoucherIds   []primitive.ObjectID          `json:"voucherIds,omitempty"`
}

type Vouchers struct {
	TotalCount int        `json:"totalCount"`
	Items      []*Voucher `json:"items"`
}

func (Vouchers) IsVouchersQueryResult() {}

type VouchersCommonFilter struct {
	Published *bool `json:"published,omitempty" bson:",omitempty"`
	Exclusive *bool `json:"exclusive,omitempty" bson:",omitempty"`
	Virtual   *bool `json:"virtual,omitempty" bson:",omitempty"`
}

type VouchersInput struct {
	PageNumber                 int64                 `json:"pageNumber"`
	PageSize                   int64                 `json:"pageSize"`
	CommonFilter               *VouchersCommonFilter `json:"commonFilter"`
	AuthorizedOperationUserIds []primitive.ObjectID  `json:"authorizedOperationUserIds,omitempty"`
	SortBy                     *SortBy               `json:"sortBy"`
}

type VouchersWithOwnershipsInput struct {
	PageNumber    int            `json:"pageNumber"`
	PageSize      int            `json:"pageSize"`
	VoucherStatus *VoucherStatus `json:"voucherStatus,omitempty"`
	SortBy        *SortBy        `json:"sortBy"`
}

type AppPage string

const (
	AppPageEditorialPost   AppPage = "EDITORIAL_POST"
	AppPageRetailerDetails AppPage = "RETAILER_DETAILS"
	AppPageRetailerList    AppPage = "RETAILER_LIST"
	AppPageEventDetails    AppPage = "EVENT_DETAILS"
	AppPageContestDetails  AppPage = "CONTEST_DETAILS"
	AppPageVoucherDetails  AppPage = "VOUCHER_DETAILS"
	AppPageUserProfile     AppPage = "USER_PROFILE"
	AppPageProductDetails  AppPage = "PRODUCT_DETAILS"
)

var AllAppPage = []AppPage{
	AppPageEditorialPost,
	AppPageRetailerDetails,
	AppPageRetailerList,
	AppPageEventDetails,
	AppPageContestDetails,
	AppPageVoucherDetails,
	AppPageUserProfile,
	AppPageProductDetails,
}

func (e AppPage) IsValid() bool {
	switch e {
	case AppPageEditorialPost, AppPageRetailerDetails, AppPageRetailerList, AppPageEventDetails, AppPageContestDetails, AppPageVoucherDetails, AppPageUserProfile, AppPageProductDetails:
		return true
	}
	return false
}

func (e AppPage) String() string {
	return string(e)
}

func (e *AppPage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppPage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppPage", str)
	}
	return nil
}

func (e AppPage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AppvalStatus string

const (
	AppvalStatusPending  AppvalStatus = "PENDING"
	AppvalStatusApproved AppvalStatus = "APPROVED"
	AppvalStatusRejected AppvalStatus = "REJECTED"
)

var AllAppvalStatus = []AppvalStatus{
	AppvalStatusPending,
	AppvalStatusApproved,
	AppvalStatusRejected,
}

func (e AppvalStatus) IsValid() bool {
	switch e {
	case AppvalStatusPending, AppvalStatusApproved, AppvalStatusRejected:
		return true
	}
	return false
}

func (e AppvalStatus) String() string {
	return string(e)
}

func (e *AppvalStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppvalStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppvalStatus", str)
	}
	return nil
}

func (e AppvalStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BannerDisplayPage string

const (
	BannerDisplayPageHome        BannerDisplayPage = "HOME"
	BannerDisplayPageHomeEvent   BannerDisplayPage = "HOME_EVENT"
	BannerDisplayPageHomeAd      BannerDisplayPage = "HOME_AD"
	BannerDisplayPageVoucherHome BannerDisplayPage = "VOUCHER_HOME"
)

var AllBannerDisplayPage = []BannerDisplayPage{
	BannerDisplayPageHome,
	BannerDisplayPageHomeEvent,
	BannerDisplayPageHomeAd,
	BannerDisplayPageVoucherHome,
}

func (e BannerDisplayPage) IsValid() bool {
	switch e {
	case BannerDisplayPageHome, BannerDisplayPageHomeEvent, BannerDisplayPageHomeAd, BannerDisplayPageVoucherHome:
		return true
	}
	return false
}

func (e BannerDisplayPage) String() string {
	return string(e)
}

func (e *BannerDisplayPage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BannerDisplayPage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BannerDisplayPage", str)
	}
	return nil
}

func (e BannerDisplayPage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Currency string

const (
	CurrencyHkd Currency = "HKD"
	CurrencyUsd Currency = "USD"
	CurrencyCny Currency = "CNY"
	CurrencyJpy Currency = "JPY"
)

var AllCurrency = []Currency{
	CurrencyHkd,
	CurrencyUsd,
	CurrencyCny,
	CurrencyJpy,
}

func (e Currency) IsValid() bool {
	switch e {
	case CurrencyHkd, CurrencyUsd, CurrencyCny, CurrencyJpy:
		return true
	}
	return false
}

func (e Currency) String() string {
	return string(e)
}

func (e *Currency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Currency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Currency", str)
	}
	return nil
}

func (e Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventParticipationStatus string

const (
	EventParticipationStatusRedeemable EventParticipationStatus = "REDEEMABLE"
	EventParticipationStatusRedeemed   EventParticipationStatus = "REDEEMED"
	EventParticipationStatusExpired    EventParticipationStatus = "EXPIRED"
	EventParticipationStatusCanceled   EventParticipationStatus = "CANCELED"
	EventParticipationStatusPending    EventParticipationStatus = "PENDING"
	EventParticipationStatusInvalid    EventParticipationStatus = "INVALID"
)

var AllEventParticipationStatus = []EventParticipationStatus{
	EventParticipationStatusRedeemable,
	EventParticipationStatusRedeemed,
	EventParticipationStatusExpired,
	EventParticipationStatusCanceled,
	EventParticipationStatusPending,
	EventParticipationStatusInvalid,
}

func (e EventParticipationStatus) IsValid() bool {
	switch e {
	case EventParticipationStatusRedeemable, EventParticipationStatusRedeemed, EventParticipationStatusExpired, EventParticipationStatusCanceled, EventParticipationStatusPending, EventParticipationStatusInvalid:
		return true
	}
	return false
}

func (e EventParticipationStatus) String() string {
	return string(e)
}

func (e *EventParticipationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventParticipationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventParticipationStatus", str)
	}
	return nil
}

func (e EventParticipationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventStatus string

const (
	EventStatusNotStarted EventStatus = "NOT_STARTED"
	EventStatusOngoing    EventStatus = "ONGOING"
	EventStatusEnded      EventStatus = "ENDED"
)

var AllEventStatus = []EventStatus{
	EventStatusNotStarted,
	EventStatusOngoing,
	EventStatusEnded,
}

func (e EventStatus) IsValid() bool {
	switch e {
	case EventStatusNotStarted, EventStatusOngoing, EventStatusEnded:
		return true
	}
	return false
}

func (e EventStatus) String() string {
	return string(e)
}

func (e *EventStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventStatus", str)
	}
	return nil
}

func (e EventStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventTicketStatus string

const (
	EventTicketStatusRedeemable EventTicketStatus = "REDEEMABLE"
	EventTicketStatusRedeemed   EventTicketStatus = "REDEEMED"
	EventTicketStatusExpired    EventTicketStatus = "EXPIRED"
	EventTicketStatusInvalid    EventTicketStatus = "INVALID"
)

var AllEventTicketStatus = []EventTicketStatus{
	EventTicketStatusRedeemable,
	EventTicketStatusRedeemed,
	EventTicketStatusExpired,
	EventTicketStatusInvalid,
}

func (e EventTicketStatus) IsValid() bool {
	switch e {
	case EventTicketStatusRedeemable, EventTicketStatusRedeemed, EventTicketStatusExpired, EventTicketStatusInvalid:
		return true
	}
	return false
}

func (e EventTicketStatus) String() string {
	return string(e)
}

func (e *EventTicketStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventTicketStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventTicketStatus", str)
	}
	return nil
}

func (e EventTicketStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventTicketType string

const (
	EventTicketTypePackage               EventTicketType = "PACKAGE"
	EventTicketTypeAdditionalParticipant EventTicketType = "ADDITIONAL_PARTICIPANT"
	EventTicketTypeAdditionalPet         EventTicketType = "ADDITIONAL_PET"
)

var AllEventTicketType = []EventTicketType{
	EventTicketTypePackage,
	EventTicketTypeAdditionalParticipant,
	EventTicketTypeAdditionalPet,
}

func (e EventTicketType) IsValid() bool {
	switch e {
	case EventTicketTypePackage, EventTicketTypeAdditionalParticipant, EventTicketTypeAdditionalPet:
		return true
	}
	return false
}

func (e EventTicketType) String() string {
	return string(e)
}

func (e *EventTicketType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventTicketType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventTicketType", str)
	}
	return nil
}

func (e EventTicketType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EventType string

const (
	EventTypeEvent  EventType = "EVENT"
	EventTypeCourse EventType = "COURSE"
)

var AllEventType = []EventType{
	EventTypeEvent,
	EventTypeCourse,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypeEvent, EventTypeCourse:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FieldType string

const (
	FieldTypeString   FieldType = "STRING"
	FieldTypeNumber   FieldType = "NUMBER"
	FieldTypeBoolean  FieldType = "BOOLEAN"
	FieldTypeDate     FieldType = "DATE"
	FieldTypeDatetime FieldType = "DATETIME"
)

var AllFieldType = []FieldType{
	FieldTypeString,
	FieldTypeNumber,
	FieldTypeBoolean,
	FieldTypeDate,
	FieldTypeDatetime,
}

func (e FieldType) IsValid() bool {
	switch e {
	case FieldTypeString, FieldTypeNumber, FieldTypeBoolean, FieldTypeDate, FieldTypeDatetime:
		return true
	}
	return false
}

func (e FieldType) String() string {
	return string(e)
}

func (e *FieldType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FieldType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FieldType", str)
	}
	return nil
}

func (e FieldType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GenerateVerificationCodePurpuse string

const (
	GenerateVerificationCodePurpuseRegistration        GenerateVerificationCodePurpuse = "REGISTRATION"
	GenerateVerificationCodePurpuseLogin               GenerateVerificationCodePurpuse = "LOGIN"
	GenerateVerificationCodePurpuseResettingPassword   GenerateVerificationCodePurpuse = "RESETTING_PASSWORD"
	GenerateVerificationCodePurpuseBindingPhoneOrEmail GenerateVerificationCodePurpuse = "BINDING_PHONE_OR_EMAIL"
)

var AllGenerateVerificationCodePurpuse = []GenerateVerificationCodePurpuse{
	GenerateVerificationCodePurpuseRegistration,
	GenerateVerificationCodePurpuseLogin,
	GenerateVerificationCodePurpuseResettingPassword,
	GenerateVerificationCodePurpuseBindingPhoneOrEmail,
}

func (e GenerateVerificationCodePurpuse) IsValid() bool {
	switch e {
	case GenerateVerificationCodePurpuseRegistration, GenerateVerificationCodePurpuseLogin, GenerateVerificationCodePurpuseResettingPassword, GenerateVerificationCodePurpuseBindingPhoneOrEmail:
		return true
	}
	return false
}

func (e GenerateVerificationCodePurpuse) String() string {
	return string(e)
}

func (e *GenerateVerificationCodePurpuse) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GenerateVerificationCodePurpuse(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GenerateVerificationCodePurpuse", str)
	}
	return nil
}

func (e GenerateVerificationCodePurpuse) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobType string

const (
	JobTypePetBirthdayWishesNotification JobType = "PET_BIRTHDAY_WISHES_NOTIFICATION"
	JobTypeCampaignNotification          JobType = "CAMPAIGN_NOTIFICATION"
)

var AllJobType = []JobType{
	JobTypePetBirthdayWishesNotification,
	JobTypeCampaignNotification,
}

func (e JobType) IsValid() bool {
	switch e {
	case JobTypePetBirthdayWishesNotification, JobTypeCampaignNotification:
		return true
	}
	return false
}

func (e JobType) String() string {
	return string(e)
}

func (e *JobType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobType", str)
	}
	return nil
}

func (e JobType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Language string

const (
	LanguageEnglish   Language = "ENGLISH"
	LanguageJapanese  Language = "JAPANESE"
	LanguageKorean    Language = "KOREAN"
	LanguageChineseHk Language = "CHINESE_HK"
)

var AllLanguage = []Language{
	LanguageEnglish,
	LanguageJapanese,
	LanguageKorean,
	LanguageChineseHk,
}

func (e Language) IsValid() bool {
	switch e {
	case LanguageEnglish, LanguageJapanese, LanguageKorean, LanguageChineseHk:
		return true
	}
	return false
}

func (e Language) String() string {
	return string(e)
}

func (e *Language) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Language(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Language", str)
	}
	return nil
}

func (e Language) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderStatus string

const (
	OrderStatusProcessing OrderStatus = "PROCESSING"
	OrderStatusCompleted  OrderStatus = "COMPLETED"
	OrderStatusExpired    OrderStatus = "EXPIRED"
	OrderStatusCanceled   OrderStatus = "CANCELED"
	OrderStatusPending    OrderStatus = "PENDING"
	OrderStatusInvalid    OrderStatus = "INVALID"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusProcessing,
	OrderStatusCompleted,
	OrderStatusExpired,
	OrderStatusCanceled,
	OrderStatusPending,
	OrderStatusInvalid,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusProcessing, OrderStatusCompleted, OrderStatusExpired, OrderStatusCanceled, OrderStatusPending, OrderStatusInvalid:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderType string

const (
	OrderTypeEventParticipation OrderType = "EVENT_PARTICIPATION"
)

var AllOrderType = []OrderType{
	OrderTypeEventParticipation,
}

func (e OrderType) IsValid() bool {
	switch e {
	case OrderTypeEventParticipation:
		return true
	}
	return false
}

func (e OrderType) String() string {
	return string(e)
}

func (e *OrderType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderType", str)
	}
	return nil
}

func (e OrderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentChannel string

const (
	PaymentChannelStripe PaymentChannel = "STRIPE"
	PaymentChannelPaypal PaymentChannel = "PAYPAL"
)

var AllPaymentChannel = []PaymentChannel{
	PaymentChannelStripe,
	PaymentChannelPaypal,
}

func (e PaymentChannel) IsValid() bool {
	switch e {
	case PaymentChannelStripe, PaymentChannelPaypal:
		return true
	}
	return false
}

func (e PaymentChannel) String() string {
	return string(e)
}

func (e *PaymentChannel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentChannel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentChannel", str)
	}
	return nil
}

func (e PaymentChannel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentIntentStatus string

const (
	PaymentIntentStatusCreated        PaymentIntentStatus = "CREATED"
	PaymentIntentStatusProcessing     PaymentIntentStatus = "PROCESSING"
	PaymentIntentStatusSucceeded      PaymentIntentStatus = "SUCCEEDED"
	PaymentIntentStatusFailed         PaymentIntentStatus = "FAILED"
	PaymentIntentStatusCanceled       PaymentIntentStatus = "CANCELED"
	PaymentIntentStatusRequiresAction PaymentIntentStatus = "REQUIRES_ACTION"
	PaymentIntentStatusRefunded       PaymentIntentStatus = "REFUNDED"
)

var AllPaymentIntentStatus = []PaymentIntentStatus{
	PaymentIntentStatusCreated,
	PaymentIntentStatusProcessing,
	PaymentIntentStatusSucceeded,
	PaymentIntentStatusFailed,
	PaymentIntentStatusCanceled,
	PaymentIntentStatusRequiresAction,
	PaymentIntentStatusRefunded,
}

func (e PaymentIntentStatus) IsValid() bool {
	switch e {
	case PaymentIntentStatusCreated, PaymentIntentStatusProcessing, PaymentIntentStatusSucceeded, PaymentIntentStatusFailed, PaymentIntentStatusCanceled, PaymentIntentStatusRequiresAction, PaymentIntentStatusRefunded:
		return true
	}
	return false
}

func (e PaymentIntentStatus) String() string {
	return string(e)
}

func (e *PaymentIntentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentIntentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentIntentStatus", str)
	}
	return nil
}

func (e PaymentIntentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductType string

const (
	ProductTypeProduct ProductType = "PRODUCT"
	ProductTypeService ProductType = "SERVICE"
)

var AllProductType = []ProductType{
	ProductTypeProduct,
	ProductTypeService,
}

func (e ProductType) IsValid() bool {
	switch e {
	case ProductTypeProduct, ProductTypeService:
		return true
	}
	return false
}

func (e ProductType) String() string {
	return string(e)
}

func (e *ProductType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductType", str)
	}
	return nil
}

func (e ProductType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProgramType string

const (
	ProgramTypeRetailerProgram ProgramType = "RETAILER_PROGRAM"
)

var AllProgramType = []ProgramType{
	ProgramTypeRetailerProgram,
}

func (e ProgramType) IsValid() bool {
	switch e {
	case ProgramTypeRetailerProgram:
		return true
	}
	return false
}

func (e ProgramType) String() string {
	return string(e)
}

func (e *ProgramType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProgramType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProgramType", str)
	}
	return nil
}

func (e ProgramType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Sex string

const (
	SexF Sex = "F"
	SexM Sex = "M"
)

var AllSex = []Sex{
	SexF,
	SexM,
}

func (e Sex) IsValid() bool {
	switch e {
	case SexF, SexM:
		return true
	}
	return false
}

func (e Sex) String() string {
	return string(e)
}

func (e *Sex) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Sex(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Sex", str)
	}
	return nil
}

func (e Sex) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SystemTransactionDetailType string

const (
	SystemTransactionDetailTypeTransferIn                     SystemTransactionDetailType = "TRANSFER_IN"
	SystemTransactionDetailTypeRewardCheckInRecords           SystemTransactionDetailType = "REWARD_CHECK_IN_RECORDS"
	SystemTransactionDetailTypeRewardTaskParticipation        SystemTransactionDetailType = "REWARD_TASK_PARTICIPATION"
	SystemTransactionDetailTypeRewardEventParticipation       SystemTransactionDetailType = "REWARD_EVENT_PARTICIPATION"
	SystemTransactionDetailTypeRewardUserRegistration         SystemTransactionDetailType = "REWARD_USER_REGISTRATION"
	SystemTransactionDetailTypeRewardUserRegistrationReferral SystemTransactionDetailType = "REWARD_USER_REGISTRATION_REFERRAL"
	SystemTransactionDetailTypeRewardUserProfileCompletion    SystemTransactionDetailType = "REWARD_USER_PROFILE_COMPLETION"
	SystemTransactionDetailTypeRewardRetailerReview           SystemTransactionDetailType = "REWARD_RETAILER_REVIEW"
	SystemTransactionDetailTypeRefundEventParticipation       SystemTransactionDetailType = "REFUND_EVENT_PARTICIPATION"
	SystemTransactionDetailTypeRefundVouchersOwnership        SystemTransactionDetailType = "REFUND_VOUCHERS_OWNERSHIP"
	SystemTransactionDetailTypeRefundShopline                 SystemTransactionDetailType = "REFUND_SHOPLINE"
	SystemTransactionDetailTypeTransferOut                    SystemTransactionDetailType = "TRANSFER_OUT"
	SystemTransactionDetailTypePurchaseVouchersOwnership      SystemTransactionDetailType = "PURCHASE_VOUCHERS_OWNERSHIP"
	SystemTransactionDetailTypePurchaseEventParticipation     SystemTransactionDetailType = "PURCHASE_EVENT_PARTICIPATION"
	SystemTransactionDetailTypeRevokationEventParticipation   SystemTransactionDetailType = "REVOKATION_EVENT_PARTICIPATION"
)

var AllSystemTransactionDetailType = []SystemTransactionDetailType{
	SystemTransactionDetailTypeTransferIn,
	SystemTransactionDetailTypeRewardCheckInRecords,
	SystemTransactionDetailTypeRewardTaskParticipation,
	SystemTransactionDetailTypeRewardEventParticipation,
	SystemTransactionDetailTypeRewardUserRegistration,
	SystemTransactionDetailTypeRewardUserRegistrationReferral,
	SystemTransactionDetailTypeRewardUserProfileCompletion,
	SystemTransactionDetailTypeRewardRetailerReview,
	SystemTransactionDetailTypeRefundEventParticipation,
	SystemTransactionDetailTypeRefundVouchersOwnership,
	SystemTransactionDetailTypeRefundShopline,
	SystemTransactionDetailTypeTransferOut,
	SystemTransactionDetailTypePurchaseVouchersOwnership,
	SystemTransactionDetailTypePurchaseEventParticipation,
	SystemTransactionDetailTypeRevokationEventParticipation,
}

func (e SystemTransactionDetailType) IsValid() bool {
	switch e {
	case SystemTransactionDetailTypeTransferIn, SystemTransactionDetailTypeRewardCheckInRecords, SystemTransactionDetailTypeRewardTaskParticipation, SystemTransactionDetailTypeRewardEventParticipation, SystemTransactionDetailTypeRewardUserRegistration, SystemTransactionDetailTypeRewardUserRegistrationReferral, SystemTransactionDetailTypeRewardUserProfileCompletion, SystemTransactionDetailTypeRewardRetailerReview, SystemTransactionDetailTypeRefundEventParticipation, SystemTransactionDetailTypeRefundVouchersOwnership, SystemTransactionDetailTypeRefundShopline, SystemTransactionDetailTypeTransferOut, SystemTransactionDetailTypePurchaseVouchersOwnership, SystemTransactionDetailTypePurchaseEventParticipation, SystemTransactionDetailTypeRevokationEventParticipation:
		return true
	}
	return false
}

func (e SystemTransactionDetailType) String() string {
	return string(e)
}

func (e *SystemTransactionDetailType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SystemTransactionDetailType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SystemTransactionDetailType", str)
	}
	return nil
}

func (e SystemTransactionDetailType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskParticipationStatus string

const (
	TaskParticipationStatusCompleted   TaskParticipationStatus = "COMPLETED"
	TaskParticipationStatusUncompleted TaskParticipationStatus = "UNCOMPLETED"
)

var AllTaskParticipationStatus = []TaskParticipationStatus{
	TaskParticipationStatusCompleted,
	TaskParticipationStatusUncompleted,
}

func (e TaskParticipationStatus) IsValid() bool {
	switch e {
	case TaskParticipationStatusCompleted, TaskParticipationStatusUncompleted:
		return true
	}
	return false
}

func (e TaskParticipationStatus) String() string {
	return string(e)
}

func (e *TaskParticipationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskParticipationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskParticipationStatus", str)
	}
	return nil
}

func (e TaskParticipationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskStatus string

const (
	TaskStatusNotStarted TaskStatus = "NOT_STARTED"
	TaskStatusOngoing    TaskStatus = "ONGOING"
	TaskStatusEnded      TaskStatus = "ENDED"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusNotStarted,
	TaskStatusOngoing,
	TaskStatusEnded,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusNotStarted, TaskStatusOngoing, TaskStatusEnded:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskType string

const (
	TaskTypeUserProfileCompletion    TaskType = "USER_PROFILE_COMPLETION"
	TaskTypeUserRegistration         TaskType = "USER_REGISTRATION"
	TaskTypeUserRegistrationReferral TaskType = "USER_REGISTRATION_REFERRAL"
	TaskTypeRetailerReviewLength     TaskType = "RETAILER_REVIEW_LENGTH"
	TaskTypeRetailerReviewCount      TaskType = "RETAILER_REVIEW_COUNT"
	TaskTypeCustom                   TaskType = "CUSTOM"
)

var AllTaskType = []TaskType{
	TaskTypeUserProfileCompletion,
	TaskTypeUserRegistration,
	TaskTypeUserRegistrationReferral,
	TaskTypeRetailerReviewLength,
	TaskTypeRetailerReviewCount,
	TaskTypeCustom,
}

func (e TaskType) IsValid() bool {
	switch e {
	case TaskTypeUserProfileCompletion, TaskTypeUserRegistration, TaskTypeUserRegistrationReferral, TaskTypeRetailerReviewLength, TaskTypeRetailerReviewCount, TaskTypeCustom:
		return true
	}
	return false
}

func (e TaskType) String() string {
	return string(e)
}

func (e *TaskType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskType", str)
	}
	return nil
}

func (e TaskType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransactionSourceEntity string

const (
	TransactionSourceEntityShopline TransactionSourceEntity = "SHOPLINE"
	TransactionSourceEntitySystem   TransactionSourceEntity = "SYSTEM"
)

var AllTransactionSourceEntity = []TransactionSourceEntity{
	TransactionSourceEntityShopline,
	TransactionSourceEntitySystem,
}

func (e TransactionSourceEntity) IsValid() bool {
	switch e {
	case TransactionSourceEntityShopline, TransactionSourceEntitySystem:
		return true
	}
	return false
}

func (e TransactionSourceEntity) String() string {
	return string(e)
}

func (e *TransactionSourceEntity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionSourceEntity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionSourceEntity", str)
	}
	return nil
}

func (e TransactionSourceEntity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransactionType string

const (
	TransactionTypeIncome  TransactionType = "INCOME"
	TransactionTypeExpense TransactionType = "EXPENSE"
)

var AllTransactionType = []TransactionType{
	TransactionTypeIncome,
	TransactionTypeExpense,
}

func (e TransactionType) IsValid() bool {
	switch e {
	case TransactionTypeIncome, TransactionTypeExpense:
		return true
	}
	return false
}

func (e TransactionType) String() string {
	return string(e)
}

func (e *TransactionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionType", str)
	}
	return nil
}

func (e TransactionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VoucherStatus string

const (
	VoucherStatusRedeemable VoucherStatus = "REDEEMABLE"
	VoucherStatusRedeemed   VoucherStatus = "REDEEMED"
	VoucherStatusExpired    VoucherStatus = "EXPIRED"
	VoucherStatusInvalid    VoucherStatus = "INVALID"
)

var AllVoucherStatus = []VoucherStatus{
	VoucherStatusRedeemable,
	VoucherStatusRedeemed,
	VoucherStatusExpired,
	VoucherStatusInvalid,
}

func (e VoucherStatus) IsValid() bool {
	switch e {
	case VoucherStatusRedeemable, VoucherStatusRedeemed, VoucherStatusExpired, VoucherStatusInvalid:
		return true
	}
	return false
}

func (e VoucherStatus) String() string {
	return string(e)
}

func (e *VoucherStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VoucherStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VoucherStatus", str)
	}
	return nil
}

func (e VoucherStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
