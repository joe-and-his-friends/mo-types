// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: wpapi.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WpapiClient is the client API for Wpapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WpapiClient interface {
	GetHomepagePosts(ctx context.Context, in *GetHomepagePostsRequest, opts ...grpc.CallOption) (*GetHomepagePostsResponse, error)
	GetEditorialPostsByCategories(ctx context.Context, in *GetEditorialPostsByCategoriesRequest, opts ...grpc.CallOption) (*GetEditorialPostsByCategoriesResponse, error)
}

type wpapiClient struct {
	cc grpc.ClientConnInterface
}

func NewWpapiClient(cc grpc.ClientConnInterface) WpapiClient {
	return &wpapiClient{cc}
}

func (c *wpapiClient) GetHomepagePosts(ctx context.Context, in *GetHomepagePostsRequest, opts ...grpc.CallOption) (*GetHomepagePostsResponse, error) {
	out := new(GetHomepagePostsResponse)
	err := c.cc.Invoke(ctx, "/pb.Wpapi/GetHomepagePosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wpapiClient) GetEditorialPostsByCategories(ctx context.Context, in *GetEditorialPostsByCategoriesRequest, opts ...grpc.CallOption) (*GetEditorialPostsByCategoriesResponse, error) {
	out := new(GetEditorialPostsByCategoriesResponse)
	err := c.cc.Invoke(ctx, "/pb.Wpapi/GetEditorialPostsByCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WpapiServer is the server API for Wpapi service.
// All implementations must embed UnimplementedWpapiServer
// for forward compatibility
type WpapiServer interface {
	GetHomepagePosts(context.Context, *GetHomepagePostsRequest) (*GetHomepagePostsResponse, error)
	GetEditorialPostsByCategories(context.Context, *GetEditorialPostsByCategoriesRequest) (*GetEditorialPostsByCategoriesResponse, error)
	mustEmbedUnimplementedWpapiServer()
}

// UnimplementedWpapiServer must be embedded to have forward compatible implementations.
type UnimplementedWpapiServer struct {
}

func (UnimplementedWpapiServer) GetHomepagePosts(context.Context, *GetHomepagePostsRequest) (*GetHomepagePostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomepagePosts not implemented")
}
func (UnimplementedWpapiServer) GetEditorialPostsByCategories(context.Context, *GetEditorialPostsByCategoriesRequest) (*GetEditorialPostsByCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEditorialPostsByCategories not implemented")
}
func (UnimplementedWpapiServer) mustEmbedUnimplementedWpapiServer() {}

// UnsafeWpapiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WpapiServer will
// result in compilation errors.
type UnsafeWpapiServer interface {
	mustEmbedUnimplementedWpapiServer()
}

func RegisterWpapiServer(s grpc.ServiceRegistrar, srv WpapiServer) {
	s.RegisterService(&Wpapi_ServiceDesc, srv)
}

func _Wpapi_GetHomepagePosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomepagePostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WpapiServer).GetHomepagePosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Wpapi/GetHomepagePosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WpapiServer).GetHomepagePosts(ctx, req.(*GetHomepagePostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wpapi_GetEditorialPostsByCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEditorialPostsByCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WpapiServer).GetEditorialPostsByCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Wpapi/GetEditorialPostsByCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WpapiServer).GetEditorialPostsByCategories(ctx, req.(*GetEditorialPostsByCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wpapi_ServiceDesc is the grpc.ServiceDesc for Wpapi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wpapi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Wpapi",
	HandlerType: (*WpapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHomepagePosts",
			Handler:    _Wpapi_GetHomepagePosts_Handler,
		},
		{
			MethodName: "GetEditorialPostsByCategories",
			Handler:    _Wpapi_GetEditorialPostsByCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wpapi.proto",
}
