// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: task.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	GetTasksWithParticipation(ctx context.Context, in *GetTasksWithParticipationRequest, opts ...grpc.CallOption) (*GetTasksWithParticipationResponse, error)
	GetTasks(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*GetTasksResponse, error)
	PostTask(ctx context.Context, in *PostTaskRequest, opts ...grpc.CallOption) (*PostTaskResponse, error)
	PutTask(ctx context.Context, in *PutTaskRequest, opts ...grpc.CallOption) (*PutTaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	PutTaskStatus(ctx context.Context, in *PutTaskStatusRequest, opts ...grpc.CallOption) (*PutTaskStatusResponse, error)
	GetTaskParticipationList(ctx context.Context, in *GetTaskParticipationListRequest, opts ...grpc.CallOption) (*GetTaskParticipationListResponse, error)
	GetTaskParticipationByRedemptionCode(ctx context.Context, in *GetTaskParticipationByRedemptionCodeRequest, opts ...grpc.CallOption) (*GetTaskParticipationByRedemptionCodeResponse, error)
	PutTaskParticipation(ctx context.Context, in *PutTaskParticipationRequest, opts ...grpc.CallOption) (*PutTaskParticipationResponse, error)
	DeleteTaskParticipation(ctx context.Context, in *DeleteTaskParticipationRequest, opts ...grpc.CallOption) (*DeleteTaskParticipationResponse, error)
	PutTaskParticipationStatuses(ctx context.Context, in *PutTaskParticipationStatusesRequest, opts ...grpc.CallOption) (*PutTaskParticipationStatusesResponse, error)
	PostTaskParticipationStatusCheckEvent(ctx context.Context, in *PostTaskParticipationStatusCheckEventRequest, opts ...grpc.CallOption) (*PostTaskParticipationStatusCheckEventResponse, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GetTasksWithParticipation(ctx context.Context, in *GetTasksWithParticipationRequest, opts ...grpc.CallOption) (*GetTasksWithParticipationResponse, error) {
	out := new(GetTasksWithParticipationResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/GetTasksWithParticipation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTasks(ctx context.Context, in *GetTasksRequest, opts ...grpc.CallOption) (*GetTasksResponse, error) {
	out := new(GetTasksResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/GetTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) PostTask(ctx context.Context, in *PostTaskRequest, opts ...grpc.CallOption) (*PostTaskResponse, error) {
	out := new(PostTaskResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/PostTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) PutTask(ctx context.Context, in *PutTaskRequest, opts ...grpc.CallOption) (*PutTaskResponse, error) {
	out := new(PutTaskResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/PutTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) PutTaskStatus(ctx context.Context, in *PutTaskStatusRequest, opts ...grpc.CallOption) (*PutTaskStatusResponse, error) {
	out := new(PutTaskStatusResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/PutTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskParticipationList(ctx context.Context, in *GetTaskParticipationListRequest, opts ...grpc.CallOption) (*GetTaskParticipationListResponse, error) {
	out := new(GetTaskParticipationListResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/GetTaskParticipationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskParticipationByRedemptionCode(ctx context.Context, in *GetTaskParticipationByRedemptionCodeRequest, opts ...grpc.CallOption) (*GetTaskParticipationByRedemptionCodeResponse, error) {
	out := new(GetTaskParticipationByRedemptionCodeResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/GetTaskParticipationByRedemptionCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) PutTaskParticipation(ctx context.Context, in *PutTaskParticipationRequest, opts ...grpc.CallOption) (*PutTaskParticipationResponse, error) {
	out := new(PutTaskParticipationResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/PutTaskParticipation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DeleteTaskParticipation(ctx context.Context, in *DeleteTaskParticipationRequest, opts ...grpc.CallOption) (*DeleteTaskParticipationResponse, error) {
	out := new(DeleteTaskParticipationResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/DeleteTaskParticipation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) PutTaskParticipationStatuses(ctx context.Context, in *PutTaskParticipationStatusesRequest, opts ...grpc.CallOption) (*PutTaskParticipationStatusesResponse, error) {
	out := new(PutTaskParticipationStatusesResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/PutTaskParticipationStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) PostTaskParticipationStatusCheckEvent(ctx context.Context, in *PostTaskParticipationStatusCheckEventRequest, opts ...grpc.CallOption) (*PostTaskParticipationStatusCheckEventResponse, error) {
	out := new(PostTaskParticipationStatusCheckEventResponse)
	err := c.cc.Invoke(ctx, "/task.TaskService/PostTaskParticipationStatusCheckEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility
type TaskServiceServer interface {
	GetTasksWithParticipation(context.Context, *GetTasksWithParticipationRequest) (*GetTasksWithParticipationResponse, error)
	GetTasks(context.Context, *GetTasksRequest) (*GetTasksResponse, error)
	PostTask(context.Context, *PostTaskRequest) (*PostTaskResponse, error)
	PutTask(context.Context, *PutTaskRequest) (*PutTaskResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	PutTaskStatus(context.Context, *PutTaskStatusRequest) (*PutTaskStatusResponse, error)
	GetTaskParticipationList(context.Context, *GetTaskParticipationListRequest) (*GetTaskParticipationListResponse, error)
	GetTaskParticipationByRedemptionCode(context.Context, *GetTaskParticipationByRedemptionCodeRequest) (*GetTaskParticipationByRedemptionCodeResponse, error)
	PutTaskParticipation(context.Context, *PutTaskParticipationRequest) (*PutTaskParticipationResponse, error)
	DeleteTaskParticipation(context.Context, *DeleteTaskParticipationRequest) (*DeleteTaskParticipationResponse, error)
	PutTaskParticipationStatuses(context.Context, *PutTaskParticipationStatusesRequest) (*PutTaskParticipationStatusesResponse, error)
	PostTaskParticipationStatusCheckEvent(context.Context, *PostTaskParticipationStatusCheckEventRequest) (*PostTaskParticipationStatusCheckEventResponse, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (UnimplementedTaskServiceServer) GetTasksWithParticipation(context.Context, *GetTasksWithParticipationRequest) (*GetTasksWithParticipationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksWithParticipation not implemented")
}
func (UnimplementedTaskServiceServer) GetTasks(context.Context, *GetTasksRequest) (*GetTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedTaskServiceServer) PostTask(context.Context, *PostTaskRequest) (*PostTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTask not implemented")
}
func (UnimplementedTaskServiceServer) PutTask(context.Context, *PutTaskRequest) (*PutTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTask not implemented")
}
func (UnimplementedTaskServiceServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskServiceServer) PutTaskStatus(context.Context, *PutTaskStatusRequest) (*PutTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTaskStatus not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskParticipationList(context.Context, *GetTaskParticipationListRequest) (*GetTaskParticipationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskParticipationList not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskParticipationByRedemptionCode(context.Context, *GetTaskParticipationByRedemptionCodeRequest) (*GetTaskParticipationByRedemptionCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskParticipationByRedemptionCode not implemented")
}
func (UnimplementedTaskServiceServer) PutTaskParticipation(context.Context, *PutTaskParticipationRequest) (*PutTaskParticipationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTaskParticipation not implemented")
}
func (UnimplementedTaskServiceServer) DeleteTaskParticipation(context.Context, *DeleteTaskParticipationRequest) (*DeleteTaskParticipationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskParticipation not implemented")
}
func (UnimplementedTaskServiceServer) PutTaskParticipationStatuses(context.Context, *PutTaskParticipationStatusesRequest) (*PutTaskParticipationStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTaskParticipationStatuses not implemented")
}
func (UnimplementedTaskServiceServer) PostTaskParticipationStatusCheckEvent(context.Context, *PostTaskParticipationStatusCheckEventRequest) (*PostTaskParticipationStatusCheckEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTaskParticipationStatusCheckEvent not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_GetTasksWithParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksWithParticipationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTasksWithParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/GetTasksWithParticipation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTasksWithParticipation(ctx, req.(*GetTasksWithParticipationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTasks(ctx, req.(*GetTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_PostTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).PostTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/PostTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).PostTask(ctx, req.(*PostTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_PutTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).PutTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/PutTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).PutTask(ctx, req.(*PutTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_PutTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).PutTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/PutTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).PutTaskStatus(ctx, req.(*PutTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskParticipationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskParticipationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskParticipationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/GetTaskParticipationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskParticipationList(ctx, req.(*GetTaskParticipationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskParticipationByRedemptionCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskParticipationByRedemptionCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskParticipationByRedemptionCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/GetTaskParticipationByRedemptionCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskParticipationByRedemptionCode(ctx, req.(*GetTaskParticipationByRedemptionCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_PutTaskParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTaskParticipationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).PutTaskParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/PutTaskParticipation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).PutTaskParticipation(ctx, req.(*PutTaskParticipationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DeleteTaskParticipation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskParticipationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DeleteTaskParticipation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/DeleteTaskParticipation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DeleteTaskParticipation(ctx, req.(*DeleteTaskParticipationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_PutTaskParticipationStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTaskParticipationStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).PutTaskParticipationStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/PutTaskParticipationStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).PutTaskParticipationStatuses(ctx, req.(*PutTaskParticipationStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_PostTaskParticipationStatusCheckEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTaskParticipationStatusCheckEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).PostTaskParticipationStatusCheckEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.TaskService/PostTaskParticipationStatusCheckEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).PostTaskParticipationStatusCheckEvent(ctx, req.(*PostTaskParticipationStatusCheckEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTasksWithParticipation",
			Handler:    _TaskService_GetTasksWithParticipation_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _TaskService_GetTasks_Handler,
		},
		{
			MethodName: "PostTask",
			Handler:    _TaskService_PostTask_Handler,
		},
		{
			MethodName: "PutTask",
			Handler:    _TaskService_PutTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskService_DeleteTask_Handler,
		},
		{
			MethodName: "PutTaskStatus",
			Handler:    _TaskService_PutTaskStatus_Handler,
		},
		{
			MethodName: "GetTaskParticipationList",
			Handler:    _TaskService_GetTaskParticipationList_Handler,
		},
		{
			MethodName: "GetTaskParticipationByRedemptionCode",
			Handler:    _TaskService_GetTaskParticipationByRedemptionCode_Handler,
		},
		{
			MethodName: "PutTaskParticipation",
			Handler:    _TaskService_PutTaskParticipation_Handler,
		},
		{
			MethodName: "DeleteTaskParticipation",
			Handler:    _TaskService_DeleteTaskParticipation_Handler,
		},
		{
			MethodName: "PutTaskParticipationStatuses",
			Handler:    _TaskService_PutTaskParticipationStatuses_Handler,
		},
		{
			MethodName: "PostTaskParticipationStatusCheckEvent",
			Handler:    _TaskService_PostTaskParticipationStatusCheckEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
