// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	PostUser(ctx context.Context, in *PostUserRequest, opts ...grpc.CallOption) (*PostUserResponse, error)
	GetUserCount(ctx context.Context, in *GetUserCountRequest, opts ...grpc.CallOption) (*GetUserCountResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	PostUserFromApple(ctx context.Context, in *PostUserFromAppleRequest, opts ...grpc.CallOption) (*PostUserFromAppleResponse, error)
	GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error)
	GetUserProfiles(ctx context.Context, in *GetUserProfilesRequest, opts ...grpc.CallOption) (*GetUserProfilesResponse, error)
	PutUserAvatar(ctx context.Context, in *PutUserAvatarRequest, opts ...grpc.CallOption) (*PutUserAvatarResponse, error)
	PutUserPassword(ctx context.Context, in *PutUserPasswordRequest, opts ...grpc.CallOption) (*PutUserPasswordResponse, error)
	PutUserPasswordAlt(ctx context.Context, in *PutUserPasswordAltRequest, opts ...grpc.CallOption) (*PutUserPasswordAltResponse, error)
	PutUserBasics(ctx context.Context, in *PutUserBasicsRequest, opts ...grpc.CallOption) (*PutUserBasicsResponse, error)
	PutUserRole(ctx context.Context, in *PutUserRoleRequest, opts ...grpc.CallOption) (*PutUserRoleResponse, error)
	PutUserLevel(ctx context.Context, in *PutUserLevelRequest, opts ...grpc.CallOption) (*PutUserLevelResponse, error)
	PutUserGoogleAuth(ctx context.Context, in *PutUserGoogleAuthRequest, opts ...grpc.CallOption) (*PutUserGoogleAuthResponse, error)
	DeleteUserGoogleAuth(ctx context.Context, in *DeleteUserGoogleAuthRequest, opts ...grpc.CallOption) (*DeleteUserGoogleAuthResponse, error)
	PutUserAppleAuth(ctx context.Context, in *PutUserAppleAuthRequest, opts ...grpc.CallOption) (*PutUserAppleAuthResponse, error)
	DeleteUserAppleAuth(ctx context.Context, in *DeleteUserAppleAuthRequest, opts ...grpc.CallOption) (*DeleteUserAppleAuthResponse, error)
	PutPhoneOrEmailBinding(ctx context.Context, in *PutPhoneOrEmailBindingRequest, opts ...grpc.CallOption) (*PutPhoneOrEmailBindingResponse, error)
	PostPetProfile(ctx context.Context, in *PostPetProfileRequest, opts ...grpc.CallOption) (*PostPetProfileResponse, error)
	GetPetProfiles(ctx context.Context, in *GetPetProfilesRequest, opts ...grpc.CallOption) (*GetPetProfilesResponse, error)
	GetPetProfile(ctx context.Context, in *GetPetProfileRequest, opts ...grpc.CallOption) (*GetPetProfileResponse, error)
	PutPetProfile(ctx context.Context, in *PutPetProfileRequest, opts ...grpc.CallOption) (*PutPetProfileResponse, error)
	DeletePetProfile(ctx context.Context, in *DeletePetProfileRequest, opts ...grpc.CallOption) (*DeletePetProfileResponse, error)
	GeneratePetIdCardCode(ctx context.Context, in *GeneratePetIdCardCodeRequest, opts ...grpc.CallOption) (*GeneratePetIdCardCodeResponse, error)
	GetPetsWithComments(ctx context.Context, in *GetPetsWithCommentsRequest, opts ...grpc.CallOption) (*GetPetsWithCommentsResponse, error)
	PostPetBodyMeasurements(ctx context.Context, in *PostPetBodyMeasurementsRequest, opts ...grpc.CallOption) (*PostPetBodyMeasurementsResponse, error)
	PostPetPawMeasurements(ctx context.Context, in *PostPetPawMeasurementsRequest, opts ...grpc.CallOption) (*PostPetPawMeasurementsResponse, error)
	PostPetInsurance(ctx context.Context, in *PostPetInsuranceRequest, opts ...grpc.CallOption) (*PostPetInsuranceResponse, error)
	PostPetVax(ctx context.Context, in *PostPetVaxRequest, opts ...grpc.CallOption) (*PostPetVaxResponse, error)
	DeletePetBodyMeasurements(ctx context.Context, in *DeletePetBodyMeasurementsRequest, opts ...grpc.CallOption) (*DeletePetBodyMeasurementsResponse, error)
	DeletePetPawMeasurements(ctx context.Context, in *DeletePetPawMeasurementsRequest, opts ...grpc.CallOption) (*DeletePetPawMeasurementsResponse, error)
	DeletePetInsurance(ctx context.Context, in *DeletePetInsuranceRequest, opts ...grpc.CallOption) (*DeletePetInsuranceResponse, error)
	DeletePetVax(ctx context.Context, in *DeletePetVaxRequest, opts ...grpc.CallOption) (*DeletePetVaxResponse, error)
	PutPetCertificates(ctx context.Context, in *PutPetCertificatesRequest, opts ...grpc.CallOption) (*PutPetCertificatesResponse, error)
	GetRetailers(ctx context.Context, in *GetRetailersRequest, opts ...grpc.CallOption) (*GetRetailersResponse, error)
	PutRetailerProfile(ctx context.Context, in *PutRetailerProfileRequest, opts ...grpc.CallOption) (*PutRetailerProfileResponse, error)
	PutRetailerRecommendation(ctx context.Context, in *PutRetailerRecommendationRequest, opts ...grpc.CallOption) (*PutRetailerRecommendationResponse, error)
	PutRetailerRating(ctx context.Context, in *PutRetailerRatingRequest, opts ...grpc.CallOption) (*PutRetailerRatingResponse, error)
	PatchRetailerFavoritingUsers(ctx context.Context, in *PatchRetailerFavoritingUsersRequest, opts ...grpc.CallOption) (*PatchRetailerFavoritingUsersResponse, error)
	GetRetailer(ctx context.Context, in *GetRetailerRequest, opts ...grpc.CallOption) (*GetRetailerResponse, error)
	GetDiscoveredRetailers(ctx context.Context, in *GetDiscoveredRetailersRequest, opts ...grpc.CallOption) (*GetDiscoveredRetailersResponse, error)
	PostDiscoveredRetailer(ctx context.Context, in *PostDiscoveredRetailerRequest, opts ...grpc.CallOption) (*PostDiscoveredRetailerResponse, error)
	GetRetailerNameEntries(ctx context.Context, in *GetRetailerNameEntriesRequest, opts ...grpc.CallOption) (*GetRetailerNameEntriesResponse, error)
	PostCommentatorCertificate(ctx context.Context, in *PostCommentatorCertificateRequest, opts ...grpc.CallOption) (*PostCommentatorCertificateResponse, error)
	PatchCommentatorCertificate(ctx context.Context, in *PatchCommentatorCertificateRequest, opts ...grpc.CallOption) (*PatchCommentatorCertificateResponse, error)
	DeleteCommentatorCertificate(ctx context.Context, in *DeleteCommentatorCertificateRequest, opts ...grpc.CallOption) (*DeleteCommentatorCertificateResponse, error)
	PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error)
	PatchComment(ctx context.Context, in *PatchCommentRequest, opts ...grpc.CallOption) (*PatchCommentResponse, error)
	PutCommentStatus(ctx context.Context, in *PutCommentStatusRequest, opts ...grpc.CallOption) (*PutCommentStatusResponse, error)
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error)
	PutFcmRegistrationToken(ctx context.Context, in *PutFcmRegistrationTokenRequest, opts ...grpc.CallOption) (*PutFcmRegistrationTokenResponse, error)
	DeleteFcmRegistrationToken(ctx context.Context, in *DeleteFcmRegistrationTokenRequest, opts ...grpc.CallOption) (*DeleteFcmRegistrationTokenResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) PostUser(ctx context.Context, in *PostUserRequest, opts ...grpc.CallOption) (*PostUserResponse, error) {
	out := new(PostUserResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PostUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserCount(ctx context.Context, in *GetUserCountRequest, opts ...grpc.CallOption) (*GetUserCountResponse, error) {
	out := new(GetUserCountResponse)
	err := c.cc.Invoke(ctx, "/pb.User/GetUserCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/pb.User/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PostUserFromApple(ctx context.Context, in *PostUserFromAppleRequest, opts ...grpc.CallOption) (*PostUserFromAppleResponse, error) {
	out := new(PostUserFromAppleResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PostUserFromApple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...grpc.CallOption) (*GetUserProfileResponse, error) {
	out := new(GetUserProfileResponse)
	err := c.cc.Invoke(ctx, "/pb.User/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserProfiles(ctx context.Context, in *GetUserProfilesRequest, opts ...grpc.CallOption) (*GetUserProfilesResponse, error) {
	out := new(GetUserProfilesResponse)
	err := c.cc.Invoke(ctx, "/pb.User/GetUserProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutUserAvatar(ctx context.Context, in *PutUserAvatarRequest, opts ...grpc.CallOption) (*PutUserAvatarResponse, error) {
	out := new(PutUserAvatarResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutUserAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutUserPassword(ctx context.Context, in *PutUserPasswordRequest, opts ...grpc.CallOption) (*PutUserPasswordResponse, error) {
	out := new(PutUserPasswordResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutUserPasswordAlt(ctx context.Context, in *PutUserPasswordAltRequest, opts ...grpc.CallOption) (*PutUserPasswordAltResponse, error) {
	out := new(PutUserPasswordAltResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutUserPasswordAlt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutUserBasics(ctx context.Context, in *PutUserBasicsRequest, opts ...grpc.CallOption) (*PutUserBasicsResponse, error) {
	out := new(PutUserBasicsResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutUserBasics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutUserRole(ctx context.Context, in *PutUserRoleRequest, opts ...grpc.CallOption) (*PutUserRoleResponse, error) {
	out := new(PutUserRoleResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutUserLevel(ctx context.Context, in *PutUserLevelRequest, opts ...grpc.CallOption) (*PutUserLevelResponse, error) {
	out := new(PutUserLevelResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutUserLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutUserGoogleAuth(ctx context.Context, in *PutUserGoogleAuthRequest, opts ...grpc.CallOption) (*PutUserGoogleAuthResponse, error) {
	out := new(PutUserGoogleAuthResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutUserGoogleAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteUserGoogleAuth(ctx context.Context, in *DeleteUserGoogleAuthRequest, opts ...grpc.CallOption) (*DeleteUserGoogleAuthResponse, error) {
	out := new(DeleteUserGoogleAuthResponse)
	err := c.cc.Invoke(ctx, "/pb.User/DeleteUserGoogleAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutUserAppleAuth(ctx context.Context, in *PutUserAppleAuthRequest, opts ...grpc.CallOption) (*PutUserAppleAuthResponse, error) {
	out := new(PutUserAppleAuthResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutUserAppleAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteUserAppleAuth(ctx context.Context, in *DeleteUserAppleAuthRequest, opts ...grpc.CallOption) (*DeleteUserAppleAuthResponse, error) {
	out := new(DeleteUserAppleAuthResponse)
	err := c.cc.Invoke(ctx, "/pb.User/DeleteUserAppleAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutPhoneOrEmailBinding(ctx context.Context, in *PutPhoneOrEmailBindingRequest, opts ...grpc.CallOption) (*PutPhoneOrEmailBindingResponse, error) {
	out := new(PutPhoneOrEmailBindingResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutPhoneOrEmailBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PostPetProfile(ctx context.Context, in *PostPetProfileRequest, opts ...grpc.CallOption) (*PostPetProfileResponse, error) {
	out := new(PostPetProfileResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PostPetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetPetProfiles(ctx context.Context, in *GetPetProfilesRequest, opts ...grpc.CallOption) (*GetPetProfilesResponse, error) {
	out := new(GetPetProfilesResponse)
	err := c.cc.Invoke(ctx, "/pb.User/GetPetProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetPetProfile(ctx context.Context, in *GetPetProfileRequest, opts ...grpc.CallOption) (*GetPetProfileResponse, error) {
	out := new(GetPetProfileResponse)
	err := c.cc.Invoke(ctx, "/pb.User/GetPetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutPetProfile(ctx context.Context, in *PutPetProfileRequest, opts ...grpc.CallOption) (*PutPetProfileResponse, error) {
	out := new(PutPetProfileResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutPetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeletePetProfile(ctx context.Context, in *DeletePetProfileRequest, opts ...grpc.CallOption) (*DeletePetProfileResponse, error) {
	out := new(DeletePetProfileResponse)
	err := c.cc.Invoke(ctx, "/pb.User/DeletePetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GeneratePetIdCardCode(ctx context.Context, in *GeneratePetIdCardCodeRequest, opts ...grpc.CallOption) (*GeneratePetIdCardCodeResponse, error) {
	out := new(GeneratePetIdCardCodeResponse)
	err := c.cc.Invoke(ctx, "/pb.User/GeneratePetIdCardCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetPetsWithComments(ctx context.Context, in *GetPetsWithCommentsRequest, opts ...grpc.CallOption) (*GetPetsWithCommentsResponse, error) {
	out := new(GetPetsWithCommentsResponse)
	err := c.cc.Invoke(ctx, "/pb.User/GetPetsWithComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PostPetBodyMeasurements(ctx context.Context, in *PostPetBodyMeasurementsRequest, opts ...grpc.CallOption) (*PostPetBodyMeasurementsResponse, error) {
	out := new(PostPetBodyMeasurementsResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PostPetBodyMeasurements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PostPetPawMeasurements(ctx context.Context, in *PostPetPawMeasurementsRequest, opts ...grpc.CallOption) (*PostPetPawMeasurementsResponse, error) {
	out := new(PostPetPawMeasurementsResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PostPetPawMeasurements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PostPetInsurance(ctx context.Context, in *PostPetInsuranceRequest, opts ...grpc.CallOption) (*PostPetInsuranceResponse, error) {
	out := new(PostPetInsuranceResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PostPetInsurance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PostPetVax(ctx context.Context, in *PostPetVaxRequest, opts ...grpc.CallOption) (*PostPetVaxResponse, error) {
	out := new(PostPetVaxResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PostPetVax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeletePetBodyMeasurements(ctx context.Context, in *DeletePetBodyMeasurementsRequest, opts ...grpc.CallOption) (*DeletePetBodyMeasurementsResponse, error) {
	out := new(DeletePetBodyMeasurementsResponse)
	err := c.cc.Invoke(ctx, "/pb.User/DeletePetBodyMeasurements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeletePetPawMeasurements(ctx context.Context, in *DeletePetPawMeasurementsRequest, opts ...grpc.CallOption) (*DeletePetPawMeasurementsResponse, error) {
	out := new(DeletePetPawMeasurementsResponse)
	err := c.cc.Invoke(ctx, "/pb.User/DeletePetPawMeasurements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeletePetInsurance(ctx context.Context, in *DeletePetInsuranceRequest, opts ...grpc.CallOption) (*DeletePetInsuranceResponse, error) {
	out := new(DeletePetInsuranceResponse)
	err := c.cc.Invoke(ctx, "/pb.User/DeletePetInsurance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeletePetVax(ctx context.Context, in *DeletePetVaxRequest, opts ...grpc.CallOption) (*DeletePetVaxResponse, error) {
	out := new(DeletePetVaxResponse)
	err := c.cc.Invoke(ctx, "/pb.User/DeletePetVax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutPetCertificates(ctx context.Context, in *PutPetCertificatesRequest, opts ...grpc.CallOption) (*PutPetCertificatesResponse, error) {
	out := new(PutPetCertificatesResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutPetCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetRetailers(ctx context.Context, in *GetRetailersRequest, opts ...grpc.CallOption) (*GetRetailersResponse, error) {
	out := new(GetRetailersResponse)
	err := c.cc.Invoke(ctx, "/pb.User/GetRetailers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutRetailerProfile(ctx context.Context, in *PutRetailerProfileRequest, opts ...grpc.CallOption) (*PutRetailerProfileResponse, error) {
	out := new(PutRetailerProfileResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutRetailerProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutRetailerRecommendation(ctx context.Context, in *PutRetailerRecommendationRequest, opts ...grpc.CallOption) (*PutRetailerRecommendationResponse, error) {
	out := new(PutRetailerRecommendationResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutRetailerRecommendation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutRetailerRating(ctx context.Context, in *PutRetailerRatingRequest, opts ...grpc.CallOption) (*PutRetailerRatingResponse, error) {
	out := new(PutRetailerRatingResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutRetailerRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PatchRetailerFavoritingUsers(ctx context.Context, in *PatchRetailerFavoritingUsersRequest, opts ...grpc.CallOption) (*PatchRetailerFavoritingUsersResponse, error) {
	out := new(PatchRetailerFavoritingUsersResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PatchRetailerFavoritingUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetRetailer(ctx context.Context, in *GetRetailerRequest, opts ...grpc.CallOption) (*GetRetailerResponse, error) {
	out := new(GetRetailerResponse)
	err := c.cc.Invoke(ctx, "/pb.User/GetRetailer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetDiscoveredRetailers(ctx context.Context, in *GetDiscoveredRetailersRequest, opts ...grpc.CallOption) (*GetDiscoveredRetailersResponse, error) {
	out := new(GetDiscoveredRetailersResponse)
	err := c.cc.Invoke(ctx, "/pb.User/GetDiscoveredRetailers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PostDiscoveredRetailer(ctx context.Context, in *PostDiscoveredRetailerRequest, opts ...grpc.CallOption) (*PostDiscoveredRetailerResponse, error) {
	out := new(PostDiscoveredRetailerResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PostDiscoveredRetailer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetRetailerNameEntries(ctx context.Context, in *GetRetailerNameEntriesRequest, opts ...grpc.CallOption) (*GetRetailerNameEntriesResponse, error) {
	out := new(GetRetailerNameEntriesResponse)
	err := c.cc.Invoke(ctx, "/pb.User/GetRetailerNameEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PostCommentatorCertificate(ctx context.Context, in *PostCommentatorCertificateRequest, opts ...grpc.CallOption) (*PostCommentatorCertificateResponse, error) {
	out := new(PostCommentatorCertificateResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PostCommentatorCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PatchCommentatorCertificate(ctx context.Context, in *PatchCommentatorCertificateRequest, opts ...grpc.CallOption) (*PatchCommentatorCertificateResponse, error) {
	out := new(PatchCommentatorCertificateResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PatchCommentatorCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteCommentatorCertificate(ctx context.Context, in *DeleteCommentatorCertificateRequest, opts ...grpc.CallOption) (*DeleteCommentatorCertificateResponse, error) {
	out := new(DeleteCommentatorCertificateResponse)
	err := c.cc.Invoke(ctx, "/pb.User/DeleteCommentatorCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error) {
	out := new(PostCommentResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PostComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PatchComment(ctx context.Context, in *PatchCommentRequest, opts ...grpc.CallOption) (*PatchCommentResponse, error) {
	out := new(PatchCommentResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PatchComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutCommentStatus(ctx context.Context, in *PutCommentStatusRequest, opts ...grpc.CallOption) (*PutCommentStatusResponse, error) {
	out := new(PutCommentStatusResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutCommentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error) {
	out := new(GetCommentResponse)
	err := c.cc.Invoke(ctx, "/pb.User/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, "/pb.User/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error) {
	out := new(GetCommentsResponse)
	err := c.cc.Invoke(ctx, "/pb.User/GetComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PutFcmRegistrationToken(ctx context.Context, in *PutFcmRegistrationTokenRequest, opts ...grpc.CallOption) (*PutFcmRegistrationTokenResponse, error) {
	out := new(PutFcmRegistrationTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.User/PutFcmRegistrationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteFcmRegistrationToken(ctx context.Context, in *DeleteFcmRegistrationTokenRequest, opts ...grpc.CallOption) (*DeleteFcmRegistrationTokenResponse, error) {
	out := new(DeleteFcmRegistrationTokenResponse)
	err := c.cc.Invoke(ctx, "/pb.User/DeleteFcmRegistrationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	PostUser(context.Context, *PostUserRequest) (*PostUserResponse, error)
	GetUserCount(context.Context, *GetUserCountRequest) (*GetUserCountResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	PostUserFromApple(context.Context, *PostUserFromAppleRequest) (*PostUserFromAppleResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	GetUserProfiles(context.Context, *GetUserProfilesRequest) (*GetUserProfilesResponse, error)
	PutUserAvatar(context.Context, *PutUserAvatarRequest) (*PutUserAvatarResponse, error)
	PutUserPassword(context.Context, *PutUserPasswordRequest) (*PutUserPasswordResponse, error)
	PutUserPasswordAlt(context.Context, *PutUserPasswordAltRequest) (*PutUserPasswordAltResponse, error)
	PutUserBasics(context.Context, *PutUserBasicsRequest) (*PutUserBasicsResponse, error)
	PutUserRole(context.Context, *PutUserRoleRequest) (*PutUserRoleResponse, error)
	PutUserLevel(context.Context, *PutUserLevelRequest) (*PutUserLevelResponse, error)
	PutUserGoogleAuth(context.Context, *PutUserGoogleAuthRequest) (*PutUserGoogleAuthResponse, error)
	DeleteUserGoogleAuth(context.Context, *DeleteUserGoogleAuthRequest) (*DeleteUserGoogleAuthResponse, error)
	PutUserAppleAuth(context.Context, *PutUserAppleAuthRequest) (*PutUserAppleAuthResponse, error)
	DeleteUserAppleAuth(context.Context, *DeleteUserAppleAuthRequest) (*DeleteUserAppleAuthResponse, error)
	PutPhoneOrEmailBinding(context.Context, *PutPhoneOrEmailBindingRequest) (*PutPhoneOrEmailBindingResponse, error)
	PostPetProfile(context.Context, *PostPetProfileRequest) (*PostPetProfileResponse, error)
	GetPetProfiles(context.Context, *GetPetProfilesRequest) (*GetPetProfilesResponse, error)
	GetPetProfile(context.Context, *GetPetProfileRequest) (*GetPetProfileResponse, error)
	PutPetProfile(context.Context, *PutPetProfileRequest) (*PutPetProfileResponse, error)
	DeletePetProfile(context.Context, *DeletePetProfileRequest) (*DeletePetProfileResponse, error)
	GeneratePetIdCardCode(context.Context, *GeneratePetIdCardCodeRequest) (*GeneratePetIdCardCodeResponse, error)
	GetPetsWithComments(context.Context, *GetPetsWithCommentsRequest) (*GetPetsWithCommentsResponse, error)
	PostPetBodyMeasurements(context.Context, *PostPetBodyMeasurementsRequest) (*PostPetBodyMeasurementsResponse, error)
	PostPetPawMeasurements(context.Context, *PostPetPawMeasurementsRequest) (*PostPetPawMeasurementsResponse, error)
	PostPetInsurance(context.Context, *PostPetInsuranceRequest) (*PostPetInsuranceResponse, error)
	PostPetVax(context.Context, *PostPetVaxRequest) (*PostPetVaxResponse, error)
	DeletePetBodyMeasurements(context.Context, *DeletePetBodyMeasurementsRequest) (*DeletePetBodyMeasurementsResponse, error)
	DeletePetPawMeasurements(context.Context, *DeletePetPawMeasurementsRequest) (*DeletePetPawMeasurementsResponse, error)
	DeletePetInsurance(context.Context, *DeletePetInsuranceRequest) (*DeletePetInsuranceResponse, error)
	DeletePetVax(context.Context, *DeletePetVaxRequest) (*DeletePetVaxResponse, error)
	PutPetCertificates(context.Context, *PutPetCertificatesRequest) (*PutPetCertificatesResponse, error)
	GetRetailers(context.Context, *GetRetailersRequest) (*GetRetailersResponse, error)
	PutRetailerProfile(context.Context, *PutRetailerProfileRequest) (*PutRetailerProfileResponse, error)
	PutRetailerRecommendation(context.Context, *PutRetailerRecommendationRequest) (*PutRetailerRecommendationResponse, error)
	PutRetailerRating(context.Context, *PutRetailerRatingRequest) (*PutRetailerRatingResponse, error)
	PatchRetailerFavoritingUsers(context.Context, *PatchRetailerFavoritingUsersRequest) (*PatchRetailerFavoritingUsersResponse, error)
	GetRetailer(context.Context, *GetRetailerRequest) (*GetRetailerResponse, error)
	GetDiscoveredRetailers(context.Context, *GetDiscoveredRetailersRequest) (*GetDiscoveredRetailersResponse, error)
	PostDiscoveredRetailer(context.Context, *PostDiscoveredRetailerRequest) (*PostDiscoveredRetailerResponse, error)
	GetRetailerNameEntries(context.Context, *GetRetailerNameEntriesRequest) (*GetRetailerNameEntriesResponse, error)
	PostCommentatorCertificate(context.Context, *PostCommentatorCertificateRequest) (*PostCommentatorCertificateResponse, error)
	PatchCommentatorCertificate(context.Context, *PatchCommentatorCertificateRequest) (*PatchCommentatorCertificateResponse, error)
	DeleteCommentatorCertificate(context.Context, *DeleteCommentatorCertificateRequest) (*DeleteCommentatorCertificateResponse, error)
	PostComment(context.Context, *PostCommentRequest) (*PostCommentResponse, error)
	PatchComment(context.Context, *PatchCommentRequest) (*PatchCommentResponse, error)
	PutCommentStatus(context.Context, *PutCommentStatusRequest) (*PutCommentStatusResponse, error)
	GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error)
	PutFcmRegistrationToken(context.Context, *PutFcmRegistrationTokenRequest) (*PutFcmRegistrationTokenResponse, error)
	DeleteFcmRegistrationToken(context.Context, *DeleteFcmRegistrationTokenRequest) (*DeleteFcmRegistrationTokenResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) PostUser(context.Context, *PostUserRequest) (*PostUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUser not implemented")
}
func (UnimplementedUserServer) GetUserCount(context.Context, *GetUserCountRequest) (*GetUserCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCount not implemented")
}
func (UnimplementedUserServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServer) PostUserFromApple(context.Context, *PostUserFromAppleRequest) (*PostUserFromAppleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUserFromApple not implemented")
}
func (UnimplementedUserServer) GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserServer) GetUserProfiles(context.Context, *GetUserProfilesRequest) (*GetUserProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfiles not implemented")
}
func (UnimplementedUserServer) PutUserAvatar(context.Context, *PutUserAvatarRequest) (*PutUserAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserAvatar not implemented")
}
func (UnimplementedUserServer) PutUserPassword(context.Context, *PutUserPasswordRequest) (*PutUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserPassword not implemented")
}
func (UnimplementedUserServer) PutUserPasswordAlt(context.Context, *PutUserPasswordAltRequest) (*PutUserPasswordAltResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserPasswordAlt not implemented")
}
func (UnimplementedUserServer) PutUserBasics(context.Context, *PutUserBasicsRequest) (*PutUserBasicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserBasics not implemented")
}
func (UnimplementedUserServer) PutUserRole(context.Context, *PutUserRoleRequest) (*PutUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserRole not implemented")
}
func (UnimplementedUserServer) PutUserLevel(context.Context, *PutUserLevelRequest) (*PutUserLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserLevel not implemented")
}
func (UnimplementedUserServer) PutUserGoogleAuth(context.Context, *PutUserGoogleAuthRequest) (*PutUserGoogleAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserGoogleAuth not implemented")
}
func (UnimplementedUserServer) DeleteUserGoogleAuth(context.Context, *DeleteUserGoogleAuthRequest) (*DeleteUserGoogleAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserGoogleAuth not implemented")
}
func (UnimplementedUserServer) PutUserAppleAuth(context.Context, *PutUserAppleAuthRequest) (*PutUserAppleAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserAppleAuth not implemented")
}
func (UnimplementedUserServer) DeleteUserAppleAuth(context.Context, *DeleteUserAppleAuthRequest) (*DeleteUserAppleAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAppleAuth not implemented")
}
func (UnimplementedUserServer) PutPhoneOrEmailBinding(context.Context, *PutPhoneOrEmailBindingRequest) (*PutPhoneOrEmailBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPhoneOrEmailBinding not implemented")
}
func (UnimplementedUserServer) PostPetProfile(context.Context, *PostPetProfileRequest) (*PostPetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPetProfile not implemented")
}
func (UnimplementedUserServer) GetPetProfiles(context.Context, *GetPetProfilesRequest) (*GetPetProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPetProfiles not implemented")
}
func (UnimplementedUserServer) GetPetProfile(context.Context, *GetPetProfileRequest) (*GetPetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPetProfile not implemented")
}
func (UnimplementedUserServer) PutPetProfile(context.Context, *PutPetProfileRequest) (*PutPetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPetProfile not implemented")
}
func (UnimplementedUserServer) DeletePetProfile(context.Context, *DeletePetProfileRequest) (*DeletePetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePetProfile not implemented")
}
func (UnimplementedUserServer) GeneratePetIdCardCode(context.Context, *GeneratePetIdCardCodeRequest) (*GeneratePetIdCardCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePetIdCardCode not implemented")
}
func (UnimplementedUserServer) GetPetsWithComments(context.Context, *GetPetsWithCommentsRequest) (*GetPetsWithCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPetsWithComments not implemented")
}
func (UnimplementedUserServer) PostPetBodyMeasurements(context.Context, *PostPetBodyMeasurementsRequest) (*PostPetBodyMeasurementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPetBodyMeasurements not implemented")
}
func (UnimplementedUserServer) PostPetPawMeasurements(context.Context, *PostPetPawMeasurementsRequest) (*PostPetPawMeasurementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPetPawMeasurements not implemented")
}
func (UnimplementedUserServer) PostPetInsurance(context.Context, *PostPetInsuranceRequest) (*PostPetInsuranceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPetInsurance not implemented")
}
func (UnimplementedUserServer) PostPetVax(context.Context, *PostPetVaxRequest) (*PostPetVaxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPetVax not implemented")
}
func (UnimplementedUserServer) DeletePetBodyMeasurements(context.Context, *DeletePetBodyMeasurementsRequest) (*DeletePetBodyMeasurementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePetBodyMeasurements not implemented")
}
func (UnimplementedUserServer) DeletePetPawMeasurements(context.Context, *DeletePetPawMeasurementsRequest) (*DeletePetPawMeasurementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePetPawMeasurements not implemented")
}
func (UnimplementedUserServer) DeletePetInsurance(context.Context, *DeletePetInsuranceRequest) (*DeletePetInsuranceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePetInsurance not implemented")
}
func (UnimplementedUserServer) DeletePetVax(context.Context, *DeletePetVaxRequest) (*DeletePetVaxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePetVax not implemented")
}
func (UnimplementedUserServer) PutPetCertificates(context.Context, *PutPetCertificatesRequest) (*PutPetCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPetCertificates not implemented")
}
func (UnimplementedUserServer) GetRetailers(context.Context, *GetRetailersRequest) (*GetRetailersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetailers not implemented")
}
func (UnimplementedUserServer) PutRetailerProfile(context.Context, *PutRetailerProfileRequest) (*PutRetailerProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRetailerProfile not implemented")
}
func (UnimplementedUserServer) PutRetailerRecommendation(context.Context, *PutRetailerRecommendationRequest) (*PutRetailerRecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRetailerRecommendation not implemented")
}
func (UnimplementedUserServer) PutRetailerRating(context.Context, *PutRetailerRatingRequest) (*PutRetailerRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRetailerRating not implemented")
}
func (UnimplementedUserServer) PatchRetailerFavoritingUsers(context.Context, *PatchRetailerFavoritingUsersRequest) (*PatchRetailerFavoritingUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRetailerFavoritingUsers not implemented")
}
func (UnimplementedUserServer) GetRetailer(context.Context, *GetRetailerRequest) (*GetRetailerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetailer not implemented")
}
func (UnimplementedUserServer) GetDiscoveredRetailers(context.Context, *GetDiscoveredRetailersRequest) (*GetDiscoveredRetailersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscoveredRetailers not implemented")
}
func (UnimplementedUserServer) PostDiscoveredRetailer(context.Context, *PostDiscoveredRetailerRequest) (*PostDiscoveredRetailerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDiscoveredRetailer not implemented")
}
func (UnimplementedUserServer) GetRetailerNameEntries(context.Context, *GetRetailerNameEntriesRequest) (*GetRetailerNameEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetailerNameEntries not implemented")
}
func (UnimplementedUserServer) PostCommentatorCertificate(context.Context, *PostCommentatorCertificateRequest) (*PostCommentatorCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCommentatorCertificate not implemented")
}
func (UnimplementedUserServer) PatchCommentatorCertificate(context.Context, *PatchCommentatorCertificateRequest) (*PatchCommentatorCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchCommentatorCertificate not implemented")
}
func (UnimplementedUserServer) DeleteCommentatorCertificate(context.Context, *DeleteCommentatorCertificateRequest) (*DeleteCommentatorCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentatorCertificate not implemented")
}
func (UnimplementedUserServer) PostComment(context.Context, *PostCommentRequest) (*PostCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostComment not implemented")
}
func (UnimplementedUserServer) PatchComment(context.Context, *PatchCommentRequest) (*PatchCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchComment not implemented")
}
func (UnimplementedUserServer) PutCommentStatus(context.Context, *PutCommentStatusRequest) (*PutCommentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCommentStatus not implemented")
}
func (UnimplementedUserServer) GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedUserServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedUserServer) GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedUserServer) PutFcmRegistrationToken(context.Context, *PutFcmRegistrationTokenRequest) (*PutFcmRegistrationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFcmRegistrationToken not implemented")
}
func (UnimplementedUserServer) DeleteFcmRegistrationToken(context.Context, *DeleteFcmRegistrationTokenRequest) (*DeleteFcmRegistrationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFcmRegistrationToken not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_PostUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PostUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PostUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PostUser(ctx, req.(*PostUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GetUserCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserCount(ctx, req.(*GetUserCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PostUserFromApple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserFromAppleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PostUserFromApple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PostUserFromApple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PostUserFromApple(ctx, req.(*PostUserFromAppleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserProfile(ctx, req.(*GetUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GetUserProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserProfiles(ctx, req.(*GetUserProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutUserAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutUserAvatar(ctx, req.(*PutUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutUserPassword(ctx, req.(*PutUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutUserPasswordAlt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUserPasswordAltRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutUserPasswordAlt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutUserPasswordAlt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutUserPasswordAlt(ctx, req.(*PutUserPasswordAltRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutUserBasics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUserBasicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutUserBasics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutUserBasics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutUserBasics(ctx, req.(*PutUserBasicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutUserRole(ctx, req.(*PutUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutUserLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUserLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutUserLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutUserLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutUserLevel(ctx, req.(*PutUserLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutUserGoogleAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUserGoogleAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutUserGoogleAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutUserGoogleAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutUserGoogleAuth(ctx, req.(*PutUserGoogleAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteUserGoogleAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserGoogleAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteUserGoogleAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/DeleteUserGoogleAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteUserGoogleAuth(ctx, req.(*DeleteUserGoogleAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutUserAppleAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUserAppleAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutUserAppleAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutUserAppleAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutUserAppleAuth(ctx, req.(*PutUserAppleAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteUserAppleAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserAppleAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteUserAppleAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/DeleteUserAppleAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteUserAppleAuth(ctx, req.(*DeleteUserAppleAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutPhoneOrEmailBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPhoneOrEmailBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutPhoneOrEmailBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutPhoneOrEmailBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutPhoneOrEmailBinding(ctx, req.(*PutPhoneOrEmailBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PostPetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PostPetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PostPetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PostPetProfile(ctx, req.(*PostPetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetPetProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetPetProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GetPetProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetPetProfiles(ctx, req.(*GetPetProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetPetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetPetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GetPetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetPetProfile(ctx, req.(*GetPetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutPetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutPetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutPetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutPetProfile(ctx, req.(*PutPetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeletePetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeletePetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/DeletePetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeletePetProfile(ctx, req.(*DeletePetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GeneratePetIdCardCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePetIdCardCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GeneratePetIdCardCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GeneratePetIdCardCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GeneratePetIdCardCode(ctx, req.(*GeneratePetIdCardCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetPetsWithComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetsWithCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetPetsWithComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GetPetsWithComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetPetsWithComments(ctx, req.(*GetPetsWithCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PostPetBodyMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPetBodyMeasurementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PostPetBodyMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PostPetBodyMeasurements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PostPetBodyMeasurements(ctx, req.(*PostPetBodyMeasurementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PostPetPawMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPetPawMeasurementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PostPetPawMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PostPetPawMeasurements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PostPetPawMeasurements(ctx, req.(*PostPetPawMeasurementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PostPetInsurance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPetInsuranceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PostPetInsurance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PostPetInsurance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PostPetInsurance(ctx, req.(*PostPetInsuranceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PostPetVax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPetVaxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PostPetVax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PostPetVax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PostPetVax(ctx, req.(*PostPetVaxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeletePetBodyMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetBodyMeasurementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeletePetBodyMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/DeletePetBodyMeasurements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeletePetBodyMeasurements(ctx, req.(*DeletePetBodyMeasurementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeletePetPawMeasurements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetPawMeasurementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeletePetPawMeasurements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/DeletePetPawMeasurements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeletePetPawMeasurements(ctx, req.(*DeletePetPawMeasurementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeletePetInsurance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetInsuranceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeletePetInsurance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/DeletePetInsurance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeletePetInsurance(ctx, req.(*DeletePetInsuranceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeletePetVax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetVaxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeletePetVax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/DeletePetVax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeletePetVax(ctx, req.(*DeletePetVaxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutPetCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPetCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutPetCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutPetCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutPetCertificates(ctx, req.(*PutPetCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetRetailers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetailersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetRetailers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GetRetailers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetRetailers(ctx, req.(*GetRetailersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutRetailerProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRetailerProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutRetailerProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutRetailerProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutRetailerProfile(ctx, req.(*PutRetailerProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutRetailerRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRetailerRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutRetailerRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutRetailerRecommendation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutRetailerRecommendation(ctx, req.(*PutRetailerRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutRetailerRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRetailerRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutRetailerRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutRetailerRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutRetailerRating(ctx, req.(*PutRetailerRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PatchRetailerFavoritingUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRetailerFavoritingUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PatchRetailerFavoritingUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PatchRetailerFavoritingUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PatchRetailerFavoritingUsers(ctx, req.(*PatchRetailerFavoritingUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetRetailer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetailerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetRetailer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GetRetailer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetRetailer(ctx, req.(*GetRetailerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetDiscoveredRetailers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscoveredRetailersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetDiscoveredRetailers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GetDiscoveredRetailers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetDiscoveredRetailers(ctx, req.(*GetDiscoveredRetailersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PostDiscoveredRetailer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDiscoveredRetailerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PostDiscoveredRetailer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PostDiscoveredRetailer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PostDiscoveredRetailer(ctx, req.(*PostDiscoveredRetailerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetRetailerNameEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetailerNameEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetRetailerNameEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GetRetailerNameEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetRetailerNameEntries(ctx, req.(*GetRetailerNameEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PostCommentatorCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCommentatorCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PostCommentatorCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PostCommentatorCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PostCommentatorCertificate(ctx, req.(*PostCommentatorCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PatchCommentatorCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCommentatorCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PatchCommentatorCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PatchCommentatorCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PatchCommentatorCertificate(ctx, req.(*PatchCommentatorCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteCommentatorCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentatorCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteCommentatorCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/DeleteCommentatorCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteCommentatorCertificate(ctx, req.(*DeleteCommentatorCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PostComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PostComment(ctx, req.(*PostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PatchComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PatchComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PatchComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PatchComment(ctx, req.(*PatchCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutCommentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutCommentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutCommentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutCommentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutCommentStatus(ctx, req.(*PutCommentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/GetComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetComments(ctx, req.(*GetCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PutFcmRegistrationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutFcmRegistrationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PutFcmRegistrationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/PutFcmRegistrationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PutFcmRegistrationToken(ctx, req.(*PutFcmRegistrationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteFcmRegistrationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFcmRegistrationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteFcmRegistrationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.User/DeleteFcmRegistrationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteFcmRegistrationToken(ctx, req.(*DeleteFcmRegistrationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostUser",
			Handler:    _User_PostUser_Handler,
		},
		{
			MethodName: "GetUserCount",
			Handler:    _User_GetUserCount_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _User_DeleteUser_Handler,
		},
		{
			MethodName: "PostUserFromApple",
			Handler:    _User_PostUserFromApple_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _User_GetUserProfile_Handler,
		},
		{
			MethodName: "GetUserProfiles",
			Handler:    _User_GetUserProfiles_Handler,
		},
		{
			MethodName: "PutUserAvatar",
			Handler:    _User_PutUserAvatar_Handler,
		},
		{
			MethodName: "PutUserPassword",
			Handler:    _User_PutUserPassword_Handler,
		},
		{
			MethodName: "PutUserPasswordAlt",
			Handler:    _User_PutUserPasswordAlt_Handler,
		},
		{
			MethodName: "PutUserBasics",
			Handler:    _User_PutUserBasics_Handler,
		},
		{
			MethodName: "PutUserRole",
			Handler:    _User_PutUserRole_Handler,
		},
		{
			MethodName: "PutUserLevel",
			Handler:    _User_PutUserLevel_Handler,
		},
		{
			MethodName: "PutUserGoogleAuth",
			Handler:    _User_PutUserGoogleAuth_Handler,
		},
		{
			MethodName: "DeleteUserGoogleAuth",
			Handler:    _User_DeleteUserGoogleAuth_Handler,
		},
		{
			MethodName: "PutUserAppleAuth",
			Handler:    _User_PutUserAppleAuth_Handler,
		},
		{
			MethodName: "DeleteUserAppleAuth",
			Handler:    _User_DeleteUserAppleAuth_Handler,
		},
		{
			MethodName: "PutPhoneOrEmailBinding",
			Handler:    _User_PutPhoneOrEmailBinding_Handler,
		},
		{
			MethodName: "PostPetProfile",
			Handler:    _User_PostPetProfile_Handler,
		},
		{
			MethodName: "GetPetProfiles",
			Handler:    _User_GetPetProfiles_Handler,
		},
		{
			MethodName: "GetPetProfile",
			Handler:    _User_GetPetProfile_Handler,
		},
		{
			MethodName: "PutPetProfile",
			Handler:    _User_PutPetProfile_Handler,
		},
		{
			MethodName: "DeletePetProfile",
			Handler:    _User_DeletePetProfile_Handler,
		},
		{
			MethodName: "GeneratePetIdCardCode",
			Handler:    _User_GeneratePetIdCardCode_Handler,
		},
		{
			MethodName: "GetPetsWithComments",
			Handler:    _User_GetPetsWithComments_Handler,
		},
		{
			MethodName: "PostPetBodyMeasurements",
			Handler:    _User_PostPetBodyMeasurements_Handler,
		},
		{
			MethodName: "PostPetPawMeasurements",
			Handler:    _User_PostPetPawMeasurements_Handler,
		},
		{
			MethodName: "PostPetInsurance",
			Handler:    _User_PostPetInsurance_Handler,
		},
		{
			MethodName: "PostPetVax",
			Handler:    _User_PostPetVax_Handler,
		},
		{
			MethodName: "DeletePetBodyMeasurements",
			Handler:    _User_DeletePetBodyMeasurements_Handler,
		},
		{
			MethodName: "DeletePetPawMeasurements",
			Handler:    _User_DeletePetPawMeasurements_Handler,
		},
		{
			MethodName: "DeletePetInsurance",
			Handler:    _User_DeletePetInsurance_Handler,
		},
		{
			MethodName: "DeletePetVax",
			Handler:    _User_DeletePetVax_Handler,
		},
		{
			MethodName: "PutPetCertificates",
			Handler:    _User_PutPetCertificates_Handler,
		},
		{
			MethodName: "GetRetailers",
			Handler:    _User_GetRetailers_Handler,
		},
		{
			MethodName: "PutRetailerProfile",
			Handler:    _User_PutRetailerProfile_Handler,
		},
		{
			MethodName: "PutRetailerRecommendation",
			Handler:    _User_PutRetailerRecommendation_Handler,
		},
		{
			MethodName: "PutRetailerRating",
			Handler:    _User_PutRetailerRating_Handler,
		},
		{
			MethodName: "PatchRetailerFavoritingUsers",
			Handler:    _User_PatchRetailerFavoritingUsers_Handler,
		},
		{
			MethodName: "GetRetailer",
			Handler:    _User_GetRetailer_Handler,
		},
		{
			MethodName: "GetDiscoveredRetailers",
			Handler:    _User_GetDiscoveredRetailers_Handler,
		},
		{
			MethodName: "PostDiscoveredRetailer",
			Handler:    _User_PostDiscoveredRetailer_Handler,
		},
		{
			MethodName: "GetRetailerNameEntries",
			Handler:    _User_GetRetailerNameEntries_Handler,
		},
		{
			MethodName: "PostCommentatorCertificate",
			Handler:    _User_PostCommentatorCertificate_Handler,
		},
		{
			MethodName: "PatchCommentatorCertificate",
			Handler:    _User_PatchCommentatorCertificate_Handler,
		},
		{
			MethodName: "DeleteCommentatorCertificate",
			Handler:    _User_DeleteCommentatorCertificate_Handler,
		},
		{
			MethodName: "PostComment",
			Handler:    _User_PostComment_Handler,
		},
		{
			MethodName: "PatchComment",
			Handler:    _User_PatchComment_Handler,
		},
		{
			MethodName: "PutCommentStatus",
			Handler:    _User_PutCommentStatus_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _User_GetComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _User_DeleteComment_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _User_GetComments_Handler,
		},
		{
			MethodName: "PutFcmRegistrationToken",
			Handler:    _User_PutFcmRegistrationToken_Handler,
		},
		{
			MethodName: "DeleteFcmRegistrationToken",
			Handler:    _User_DeleteFcmRegistrationToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
